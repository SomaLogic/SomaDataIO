% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getAnalytes.R, R/getMeta.R, R/z-deprecated.R
\name{getAnalytes}
\alias{getAnalytes}
\alias{getMeta}
\alias{getFeatures}
\title{Get Analytes}
\usage{
getAnalytes(x, n = FALSE, rm.controls = FALSE)

getMeta(x, n = FALSE)

getFeatures(x, n = FALSE, rm.controls = FALSE)
}
\arguments{
\item{x}{Typically a \code{soma_adat} class object created using \code{\link[=read_adat]{read_adat()}}.
Alternatively, a character vector with elements containing \code{SeqIds}
corresponding to analyte features.}

\item{n}{Logical. Return an integer corresponding to the \emph{length}
of the features?}

\item{rm.controls}{Logical. Should all control and non-human analytes
(e.g. \code{HybControls}, \code{Non-Human}, \code{Non-Biotin}, \code{Spuriomer}) be removed
from the returned value?}
}
\value{
A character vector of ADAT feature ("analyte") names.
If \code{n = TRUE}, an integer corresponding to the length of the
feature names.

Either a character vector of ADAT meta data names or
an integer number the length of the meta data names (if \code{n = TRUE}).
}
\description{
Return the feature names (i.e. the column names for
SOMAmer reagent analytes) from a \code{soma_adat}, data frame,
matrix, list, or character vector. S3 methods exist for these classes.
}
\section{Functions}{
\itemize{
\item \code{getMeta}: Return a character vector of string names of \emph{non}-analyte feature
columns/variables.

\item \code{getFeatures}: renamed in \pkg{SomaDataIO v5.1.0}. Exported
(with life-cycle warning) to maintain backward compatibility.
Please adjust your code accordingly.
}}

\examples{
apts <- getAnalytes(example_data)
head(apts)
getAnalytes(example_data, n = TRUE)

# vector string
bb <- getAnalytes(names(example_data))
all.equal(apts, bb)

# create some control sequences
#           Spuriomer      HybControl
apts2 <- c("seq.2053.2", "seq.2171.12", head(apts))
apts2
no_crtl <- getAnalytes(apts2, rm.controls = TRUE)
no_crtl
setdiff(apts2, no_crtl)

# getMeta()
mvec <- getMeta(example_data)
head(mvec, 10)
getMeta(example_data, n = TRUE)

# test data.frame and character S3 methods
identical(getMeta(example_data), getMeta(names(example_data))) # TRUE
}
\seealso{
\code{\link[=is.apt]{is.apt()}}
}
\author{
Stu Field
}
