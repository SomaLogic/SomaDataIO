% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SeqId.R, R/matchSeqIds.R
\name{SeqId}
\alias{SeqId}
\alias{getSeqId}
\alias{seqid2apt}
\alias{is.apt}
\alias{is.SeqId}
\alias{regexSeqId}
\alias{matchSeqIds}
\alias{getSeqIdMatches}
\title{Working with SomaLogic SeqIds}
\usage{
getSeqId(x, trim.version = FALSE)

seqid2apt(x)

is.apt(x)

is.SeqId(x)

regexSeqId()

matchSeqIds(x, y, order.by.x = TRUE)

getSeqIdMatches(x, y, show = FALSE)
}
\arguments{
\item{x}{Character. A vector of strings, usually analyte/feature column
names, \code{AptNames}, or \code{SeqIds}. For \code{\link[=seqid2apt]{seqid2apt()}}, a vector of \code{SeqIds}.
For \code{\link[=matchSeqIds]{matchSeqIds()}}, a vector of pattern matches containing \code{SeqIds}. Can be
\code{AptNames} with \code{GeneIDs} or \code{seq.XXXX} format, or even naked \code{SeqIds}.}

\item{trim.version}{Logical. Whether to remove the version number,
i.e. "1234-56" vs "1234-56_7". This is primarily for legacy ADATs
where version numbers were common. Newer \code{SeqId} format does not
contain version numbers.}

\item{y}{Character. A second vector of \code{AptNames} containing \code{SeqIds}
to match against those in contained in \code{x}.
For \code{\link[=matchSeqIds]{matchSeqIds()}} these values are returned if there are matching elements.}

\item{order.by.x}{Logical. Order the returned character string by
the \code{x} (first) argument?}

\item{show}{Logical. Return the data frame visibly?}
}
\value{
\code{\link[=getSeqId]{getSeqId()}}: a character vector of only the \code{SeqId} portion
of a string.

\code{\link[=is.apt]{is.apt()}}, \code{\link[=is.SeqId]{is.SeqId()}}: Logical. \code{TRUE} or \code{FALSE}.

\code{\link[=matchSeqIds]{matchSeqIds()}}: a character string corresponding to values
in \code{y} of the intersect of \code{x} and \code{y}. If no matches are
found, \code{character(0)}.

\code{\link[=getSeqIdMatches]{getSeqIdMatches()}}: a \eqn{n x 2} data frame, where \code{n} is the
length of the intersect of the matching \code{SeqIds}.
The data frame is named by the passed arguments, \code{x} and \code{y}.
}
\description{
The \code{SeqId}, e.g. \code{1234-56}, is the cornerstone used to uniquely identify
SomaLogic analytes. The tools below enable users to extract, test,
identify, and manipulate \code{SeqIds}.
}
\section{Functions}{
\itemize{
\item \code{getSeqId}: Extracts the the \code{SeqId} portion (\code{SeqId-Clone_Version}) from an
analyte column identifier, i.e. column name of an ADAT loaded
with \code{\link[=read_adat]{read_adat()}}.

\item \code{seqid2apt}: Converts a \code{SeqId} format into anonymous-AptName format, i.e.
\code{1234-56} -> \code{seq.1234.56}.

\item \code{is.apt}: Regular expression match to determine if a string \emph{contains}
a \code{SeqId}, and thus is probably an \code{AptName} format string. Both
legacy \code{EntrezGeneSymbol-SeqId} combinations or newer
\code{"anonymous-AptNames"} formats (\code{seq.1234.45}) are matched.

\item \code{is.SeqId}: Tests for \code{SeqId} format. Values returned from \code{\link[=getSeqId]{getSeqId()}}
evaluate to \code{TRUE}.

\item \code{regexSeqId}: Generates a pre-formatted regular expression for
matching of \code{SeqIds}. Used internally in \emph{many} utility functions

\item \code{matchSeqIds}: Matches two character vectors on the basis of their
intersecting \code{SeqIds}. Note that elements in \code{y} not
containing a \code{SeqId} regular expression are silently dropped.

\item \code{getSeqIdMatches}: Matches two character vectors on the basis of their intersecting \emph{SeqIds}
only (irrespective of the \code{GeneID}-prefix). This produces a two-column
data frame which then can be used as to map between the two sets.

The final order of the matches/rows is by the input
corresponding to the \emph{first} argument (\code{x}).

By default the data frame is invisibly returned to
avoid dumping excess output to the console (see the \verb{show =} argument.)
}}

\examples{
x <- c("ABDC.3948.48.2", "3948.88",
       "3948.48.2", "3948-48_2", "3948.48.2",
       "3948-48_2", "3948-88",
       "My.Favorite.Apt.3948.88.9")

tibble::tibble(orig       = x,
               SeqId      = getSeqId(x),
               SeqId_trim = getSeqId(x, TRUE),
               AptName    = seqid2apt(SeqId_trim))

# Logical Matching
is.apt("AGR2.4959.2") # TRUE
is.apt("seq.4959.2")  # TRUE
is.apt("4959-2")      # TRUE
is.apt("AGR2")        # FALSE


# SeqId Matching
x <- c("seq.4554.56", "seq.3714.49", "PlateId")
y <- c("Group", "3714-49", "Assay", "4554-56")
matchSeqIds(x, y)
matchSeqIds(x, y, order.by.x = FALSE)

# vector of features
feats <- names(example_data) \%>\% purrr::keep(is.apt)

match_df <- getSeqIdMatches(feats[1:100], feats[90:500])  # 11 overlapping
match_df

a <- utils::head(feats, 15)
b <- withr::with_seed(99, sample(getSeqId(a)))   # => SeqId & shuffle
(getSeqIdMatches(a, b))                          # sorted by first vector "a"
}
\seealso{
\code{\link[=str_locate]{str_locate()}}

\code{\link[=intersect]{intersect()}}, \code{\link[=discard]{discard()}}
}
\author{
Stu Field
}
