[{"path":"https://somalogic.github.io/SomaDataIO/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to SomaDataIO","title":"Contributing to SomaDataIO","text":"currently accept individual contributions SomaDataIO via traditional PR fork--clone pathway. Please submit issue one prescripted issue-types.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/CONTRIBUTING.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"Contributing to SomaDataIO","text":"information obtain support SomaDataIO, please see SUPPORT.md.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/CONTRIBUTING.html","id":"as-always-a-reprex","dir":"","previous_headings":"","what":"as Always, a Reprex","title":"Contributing to SomaDataIO","text":", ‚Äôve found bug, please file issue using link illustrates üêõ minimal reproducible example. information reprex, please start .","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright ¬© 2025 Standard BioTools, Inc. Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/SECURITY.html","id":"reporting-a-vulnerability","dir":"","previous_headings":"","what":"Reporting a Vulnerability","title":"Security Policy","text":"create issue send e-mail techsupport@somalogic.com report vulnerability","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with SomaDataIO","title":"Getting help with SomaDataIO","text":"Thanks using SomaDataIO! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with SomaDataIO","text":"can‚Äôt reproduce bug, can‚Äôt fix ! Start making minimal reproducible example using reprex package. haven‚Äôt heard used reprex , ‚Äôre treat! Seriously, reprex make R-question-asking endeavors easier (excellent ROI five ten minutes ‚Äôll take learn ‚Äôs ). additional reprex pointers, check Get help!.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with SomaDataIO","text":"Armed reprex, next step figure ask. ‚Äôs R related question: start community.rstudio.com /StackOverflow. people answer questions. ‚Äôs bug SomaDataIO: ‚Äôre right place; please file issue. ‚Äôre sure: let community help figure ! problem bug feature request, can easily return report . non-coding related feedback inquiries please reach techsupport@somalogic.com. opening new issue, sure search issues pull requests make sure bug hasn‚Äôt reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers, :pr, :closed, etc., needed, e.g.¬†‚Äôd simply remove :open search issues repo, open closed.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with SomaDataIO","text":"aim respond questions simple bugs within 24 - 48h, particularly questions accompanied reprex can typically addressed quickly. complex bugs feature requests can take longer, require deeper discussion regarding software development lifecycle SomaDataIO. mentioned , may always reach Global Scientific Engagement team techsupport@somalogic.com general inquiries support@somalogic.com.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/SomaDataIO.html","id":"main-features-io","dir":"Articles","previous_headings":"","what":"Main Features (I/O)","title":"Introduction to SomaDataIO","text":"parse import *.adat text file R session soma_adat object. subset, reorder, list various fields soma_adat object. ?SeqId analyte (feature) matching. dplyr tidyr verb S3 methods soma_adat class. ?rownames helpers break soma_adat attributes. please see article Loading Wrangling ‚ÄòSomaScan‚Äô write soma_adat object *.adat text file.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/SomaDataIO.html","id":"workflows-and-analysis","dir":"Articles","previous_headings":"","what":"Workflows and Analysis","title":"Introduction to SomaDataIO","text":"section become fleshed future versions SomaDataIO. meantime, 4 examples typical primary statistical analyses commonly performed ‚ÄòSomaScan‚Äô data: see stats::t.test() see workflow: Two-Group Comparison see stats::aov() see workflow: ANOVA Three-Group Analysis see stats::glm() see workflow: Binary Classification see stats::lm() see workflow: Linear Regression Note , effort reduce package size dependencies, articles workflows accessible via SomaDataIO pkgdown website, included installed package.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/SomaDataIO.html","id":"mit-license","dir":"Articles","previous_headings":"","what":"MIT LICENSE","title":"Introduction to SomaDataIO","text":"SomaDataIO‚Ñ¢ Copyright ¬© 2025 Standard BioTools, Inc. Permission hereby granted, free charge, person obtaining copy SomaDataIO software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sub-license, /sell copies Software, permit persons Software furnished , subject following conditions outlined . , SomaDataIO SomaLogic trademarks owned Standard BioTools, Inc. license hereby granted trademarks purposes identifying origin source Software. copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NON-INFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDER(S) LIABLE CLAIM, DAMAGES, WHETHER DIRECT INDIRECT, LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Command Line Merge Tool","text":"Occasionally, additional clinical data obtained samples submitted SomaLogic, Inc.¬†even ‚ÄòSomaScan‚Äô results delivered. requires new clinical, .e.¬†non-proteomic, data merged ‚ÄòSomaScan‚Äô data ‚Äúnew‚Äù ADAT prior analysis. purpose, command-line-interface (‚ÄúCLI‚Äù) tool included SomaDataIO cli/merge/ directory, allows one generate updated *.adat file via command-line without launch integrated development environment (‚ÄúIDE‚Äù), e.g.¬†RStudio. use SomaDataIOs exported functionality within R session, please see merge_clin().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"setup","dir":"Articles","previous_headings":"Overview","what":"Setup","title":"Command Line Merge Tool","text":"clinical merge tool R script comes installation SomaDataIO: First create temporary ‚Äúanalysis‚Äù directory:","code":"dir(system.file(\"cli\", \"merge\", package = \"SomaDataIO\", mustWork = TRUE)) #> [1] \"merge_clin.R\" \"meta.csv\"     \"meta2.csv\"  merge_script <- system.file(\"cli/merge\", \"merge_clin.R\", package = \"SomaDataIO\") merge_script #> [1] \"/Users/runner/work/_temp/Library/SomaDataIO/cli/merge/merge_clin.R\" analysis_dir <- tempfile(pattern = \"somascan-\") # create directory dir.create(analysis_dir)  # sanity check dir.exists(analysis_dir) #> [1] TRUE  # copy merge tool into analysis directory file.copy(merge_script, to = analysis_dir) #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"create-example-data","dir":"Articles","previous_headings":"Overview","what":"Create Example Data","title":"Command Line Merge Tool","text":"Let‚Äôs create dummy ‚ÄòSomaScan‚Äô data derived example_data object SomaDataIO. First reduce size 9 samples 5 proteomic features, write text file new analysis directory write_adat(). ‚Äúnew‚Äù starting point clinical data merge represents customers typically begin analysis. Next create random clinical data common key (typically SampleId identifier common key). point now 3 files analysis directory: merge_clin.R merge script engine new data containing 3 columns: common key: SampleId new variable grouping information: group new variable continuous variable: newvar ADAT 9 samples containing 5 ‚ÄòSomaScan‚Äô proteomic features 5 pre-existing variables like merge PlateId, SlideId, Subarray, SampleId, Age note: PlateId, SlideId, Subarray key fields common almost ADATs; removing yield unintended results common key SampleId required","code":"feats <- withr::with_seed(3, sample(getAnalytes(example_data), 5L)) sub_adat <- dplyr::select(example_data, PlateId, SlideId, Subarray,                           SampleId, Age, all_of(feats)) |> head(9L) withr::with_dir(analysis_dir,   write_adat(sub_adat, file = \"ex-data-9.adat\") ) #> ‚úî ADAT passed all checks and traps. #> ‚úî ADAT written to: \"ex-data-9.adat\" df <- data.frame(SampleId = as.character(seq(1, 9, by = 2)),  # common key                  group    = c(\"a\", \"b\", \"a\", \"b\", \"a\"),                  newvar   = withr::with_seed(1, rnorm(5))) df #>   SampleId group     newvar #> 1        1     a -0.6264538 #> 2        3     b  0.1836433 #> 3        5     a -0.8356286 #> 4        7     b  1.5952808 #> 5        9     a  0.3295078  # write clinical data to file withr::with_dir(analysis_dir,   write.csv(df, file = \"clin-data.csv\", row.names = FALSE) ) dir(analysis_dir) #> [1] \"clin-data.csv\"  \"ex-data-9.adat\" \"merge_clin.R\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"merging-clinical-data","dir":"Articles","previous_headings":"Overview","what":"Merging Clinical Data","title":"Command Line Merge Tool","text":"clinical data merge tool simple use common command line terminals (BASH, ZSH, etc.). must R installed (available) SomaDataIO dependencies installed.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"arguments","dir":"Articles","previous_headings":"Overview > Merging Clinical Data","what":"Arguments","title":"Command Line Merge Tool","text":"merge script takes 4 (four), ordered arguments: path original ADAT (*.adat) file path clinical data (*.csv) file common key variable name (e.g.¬†SampleId) output file name (*.adat) new ADAT","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"standard-syntax","dir":"Articles","previous_headings":"Overview > Merging Clinical Data","what":"Standard Syntax","title":"Command Line Merge Tool","text":"primary syntax common key files, (ADAT CSV), variable name:","code":"# change directory to the analysis path cd /var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T//Rtmp3fXAxU/somascan-1b174d048452  # run the Rscript: # - we recommend using the --vanilla flag Rscript --vanilla merge_clin.R ex-data-9.adat clin-data.csv SampleId ex-data-9-merged.adat dir(analysis_dir) #> [1] \"clin-data.csv\"         \"ex-data-9-merged.adat\" #> [3] \"ex-data-9.adat\"        \"merge_clin.R\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"alternative-syntax","dir":"Articles","previous_headings":"Overview > Merging Clinical Data","what":"Alternative Syntax","title":"Command Line Merge Tool","text":"certain instances may common key different variable name respective files. handled modification argument 3, now takes form key1=key2 key1 contains common keys *.adat file, key2 contains keys *.csv file. highlight syntax, first let‚Äôs create new clinical data file different variable name, ClinID: can now execute merge script command line slightly modified syntax:","code":"# rename original `df` names(df) <- c(\"ClinID\", \"letter\", \"size\") df #>   ClinID letter       size #> 1      1      a -0.6264538 #> 2      3      b  0.1836433 #> 3      5      a -0.8356286 #> 4      7      b  1.5952808 #> 5      9      a  0.3295078  # write clinical data to file withr::with_dir(analysis_dir,   write.csv(df, file = \"clin-data2.csv\", row.names = FALSE) ) Rscript --vanilla merge_clin.R ex-data-9.adat clin-data2.csv SampleId=ClinID ex-data-9-merged2.adat dir(analysis_dir) #> [1] \"clin-data.csv\"          \"clin-data2.csv\"         #> [3] \"ex-data-9-merged.adat\"  \"ex-data-9-merged2.adat\" #> [5] \"ex-data-9.adat\"         \"merge_clin.R\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"check-results","dir":"Articles","previous_headings":"Overview","what":"Check Results","title":"Command Line Merge Tool","text":"Now let‚Äôs check clinical data merged successfully yields expected *.adat:","code":"new <- withr::with_dir(analysis_dir,   read_adat(\"ex-data-9-merged2.adat\") ) new #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 9 #>      Columns              12 #>      Clinical Data        7 #>      Features             5 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 9 √ó 13 #>   row_names      PlateId  SlideId Subarray SampleId   Age letter   size #>   <chr>          <chr>      <dbl>    <dbl> <chr>    <int> <chr>   <dbl> #> 1 258495800012_3 Example‚Ä¶ 2.58e11        3 1           76 a      -0.626 #> 2 258495800004_7 Example‚Ä¶ 2.58e11        7 2           55 NA     NA     #> 3 258495800010_8 Example‚Ä¶ 2.58e11        8 3           47 b       0.184 #> 4 258495800003_4 Example‚Ä¶ 2.58e11        4 4           37 NA     NA     #> 5 258495800009_4 Example‚Ä¶ 2.58e11        4 5           71 a      -0.836 #> 6 258495800012_8 Example‚Ä¶ 2.58e11        8 6           41 NA     NA     #> 7 258495800001_3 Example‚Ä¶ 2.58e11        3 7           36 b       1.60  #> 8 258495800004_8 Example‚Ä¶ 2.58e11        8 8           77 NA     NA     #> 9 258495800001_8 Example‚Ä¶ 2.58e11        8 9           62 a       0.330 #> # ‚Ñπ 5 more variables: seq.2977.7 <dbl>, seq.5864.10 <dbl>, #> #   seq.12358.6 <dbl>, seq.9536.16 <dbl>, seq.3216.2 <dbl> #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  getMeta(new) #> [1] \"PlateId\"  \"SlideId\"  \"Subarray\" \"SampleId\" \"Age\"      \"letter\"   #> [7] \"size\"  getAnalytes(new) #> [1] \"seq.2977.7\"  \"seq.5864.10\" \"seq.12358.6\" \"seq.9536.16\" #> [5] \"seq.3216.2\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/cli-merge-tool.html","id":"summary","dir":"Articles","previous_headings":"Overview","what":"Summary","title":"Command Line Merge Tool","text":"Merging newly obtained clinical variables existing ‚ÄòSomaScan‚Äô ADATs easy via merge_clin.R script provided SomaDataIO. Alternatively, one use exported function merge_clin(). run trouble please hesitate reach techsupport@somalogic.com file issue GitHub repository.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Lifting and Bridging SomaScan","text":"SomaDataIO contains functionality bridge (aka ‚Äúlift‚Äù) various SomaScan versions linear transformations RFU data. Lifting various versions essentially calibration analytes/features RFU space.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"why-lift","dir":"Articles","previous_headings":"Overview","what":"Why lift?","title":"Lifting and Bridging SomaScan","text":"SomaScan platform continually improves technical processes assay versions. primary change interest content expansion, protocol changes may implemented including: changing reagents, liquid handling equipment, well volumes. given analyte, technical upgrades may result minute measurement signal differences, requiring calibration (aka ‚Äúlifting‚Äù ‚Äúbridging‚Äù) bring RFU values comparable signal space. accomplished applying analyte-specific scalar, linear transformation, analyte RFU measurement (column).","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"lifting-requirements","dir":"Articles","previous_headings":"Overview > Why lift?","what":"Lifting Requirements","title":"Lifting and Bridging SomaScan","text":"4 main requirements order reliably bridge across SomaScan signal space: soma_adat object attributes, SomaScan signal information stored, must intact (see is_intact_attr()). sample matrix must either human serum human EDTA-plasma. matrices currently supported. Additionally, bridging must applied across matrices (.e.¬†serum ‚Üî\\leftrightarrow plasma). RFU data must normalized Adaptive Normalization via Maximum-Likelihood (ANML). standard normalization SomaScan deliveries. current SomaScan version signal space must one (see table), .e.¬†one 5k, 7k, 11k. Older versions SomaScan supported.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"lifting-scalars","dir":"Articles","previous_headings":"Overview","what":"Lifting Scalars","title":"Lifting and Bridging SomaScan","text":"Lifting (aka ‚Äúbridging‚Äù) scalars numeric values used multiply vector RFU values linearly transform another signal space. Lifting scalars generated matched samples (n >> 1000) healthy, normal reference population run across assay versions. experiment run separately serum plasma SomaScan runs first normalized per standard normalization procedure, flagged samples removed prior analysis. analyte, lifting scalar computed ratio population medians assay versions. example, linear scalar ithi^{th} analyte translating 11k ‚Üí\\rightarrow7k defined : Ri=ŒºÃÇ7kŒºÃÇ11k, R_i = \\frac{\\hat\\mu_{7k}}{\\hat\\mu_{11k}}, ŒºÃÇ\\hat\\mu median signal ithi^{th} analyte. Signals generated 11k space can multiplied scale factor translate 7k space. concordance plot shift look like single analyte simulated reference population. Please see section Lin‚Äôs CCC definition interpretation. Figure 1. Signal concordance single analyte pre- post-lifting.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"lifting-concordance","dir":"Articles","previous_headings":"Overview","what":"Lifting Concordance","title":"Lifting and Bridging SomaScan","text":"Measurements generated matched samples used calculate lifting scalars also used calculate post-hoc Lin‚Äôs Concordance Correlation Coefficient (CCC) estimates SomaScan bridge. Lin‚Äôs CCC calculated computing correlation post-lift RFU values RFU values generated original SomaScan version, defined : CCC=2œÅœÉÃÇxœÉÃÇy(ŒºÃÇx‚àíŒºÃÇy)2+œÉÃÇx2+œÉÃÇy2, CCC = \\frac{2\\rho\\hat\\sigma_x\\hat\\sigma_y}{(\\hat\\mu_x - \\hat\\mu_y)^2 + \\hat\\sigma^2_x + \\hat\\sigma^2_y}, œÅ\\rho, ŒºÃÇ\\hat\\mu, œÉÃÇ\\hat\\sigma Pearson correlation coefficient, estimated mean standard deviation assay version groups x y respectively.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"interpretation-of-ccc","dir":"Articles","previous_headings":"Overview > Lifting Concordance","what":"Interpretation of CCC","title":"Lifting and Bridging SomaScan","text":"Lin‚Äôs CCC chosen evaluate lifting performance characterized correlation (Pearson‚Äôs œÅ\\rho), also accounts deviation y=xy = x unit line (diagonal). CCC range [‚àí1,1][-1, 1] can viewed estimate confidence bridging transformation (normal reference samples) across SomaScan versions. Examples factors affect lifting CCC : analytes/reagents high intra-assay CV (Coefficient Variation) analytes/reagents signaling near background saturation levels","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"accessing-ccc","dir":"Articles","previous_headings":"Overview > Lifting Concordance","what":"Accessing CCC","title":"Lifting and Bridging SomaScan","text":"getSomaScanLiftCCC() function retrieves values internal object either \"serum\" \"plasma\". Figure 2. Cumulative distribution function CCC values 11k -> 7k lift. shown distribution , 11k ‚Üí\\rightarrow7k lift, post-bridging CCC values 0.75 (considered high quality) approximately 88% 84% SomaScan menu plasma serum respectively. fact, characterizing CCC lifting quality 3 categories (Low, Medium, High) yields table : Table 1. proportion SomaScan menu split 3 categories CCC.","code":"plasma <- getSomaScanLiftCCC(\"p\") plasma #> # A tibble: 11,083 √ó 4 #>    SeqId  plasma_11k_to_5k_ccc plasma_11k_to_7k_ccc plasma_7k_to_5k_ccc #>    <chr>                 <dbl>                <dbl>               <dbl> #>  1 10000‚Ä¶                0.966                0.982               0.963 #>  2 10001‚Ä¶                0.86                 0.961               0.875 #>  3 10003‚Ä¶                0.674                0.787               0.668 #>  4 10006‚Ä¶                0.864                0.927               0.877 #>  5 10008‚Ä¶                0.879                0.939               0.908 #>  6 10010‚Ä¶               NA                    0.915              NA     #>  7 10011‚Ä¶                0.642                0.784               0.743 #>  8 10012‚Ä¶                0.528                0.661               0.591 #>  9 10013‚Ä¶                0.76                 0.824               0.744 #> 10 10014‚Ä¶                0.934                0.971               0.941 #> # ‚Ñπ 11,073 more rows  serum <- getSomaScanLiftCCC(\"s\") serum #> # A tibble: 11,083 √ó 4 #>    SeqId    serum_11k_to_5k_ccc serum_11k_to_7k_ccc serum_7k_to_5k_ccc #>    <chr>                  <dbl>               <dbl>              <dbl> #>  1 10000-28               0.97                0.977              0.967 #>  2 10001-7                0.819               0.857              0.875 #>  3 10003-15               0.761               0.759              0.774 #>  4 10006-25               0.903               0.937              0.937 #>  5 10008-43               0.915               0.951              0.925 #>  6 10010-10              NA                   0.895             NA     #>  7 10011-65               0.515               0.748              0.741 #>  8 10012-5                0.57                0.717              0.716 #>  9 10013-34               0.716               0.86               0.778 #> 10 10014-31               0.906               0.951              0.913 #> # ‚Ñπ 11,073 more rows cdf_df <- data.frame(   ccc    = c(plasma$plasma_11k_to_7k_ccc, serum$serum_11k_to_7k_ccc),   matrix = rep(c(\"plasma\", \"serum\"), each = nrow(plasma)) ) cdf_df <- cdf_df[!is.na(cdf_df$ccc), ]   # rm NAs; non-comparable analytes ggplot(cdf_df, aes(x = ccc, colour = matrix)) +   stat_ecdf(linewidth = 0.75) +   scale_colour_manual(name = \"\", values = c(\"#00A499\", \"#24135F\")) +   labs(title = \"CDF of CCC Values\",        x = \"Lin's CCC (11k -> 7k)\", y = \"P(X < x)\") +   coord_cartesian()"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"somascan-analyte-setdiff","dir":"Articles","previous_headings":"Overview","what":"SomaScan Analyte Setdiff","title":"Lifting and Bridging SomaScan","text":"given bridge, common, intersecting subset analytes SomaScan versions. Non-intersecting analytes either missing added new signal space. result, bridging data across SomaScan may involve either skipping analytes (columns) scaling 1.0. SomaDataIO internal checks trigger warnings conditions met. two scenarios consider: Newer versions SomaScan typically additional content, .e.¬†new reagents added multi-plex assay bind additional proteins. lifting previous SomaScan version, new reagents exist ‚Äúearlier‚Äù assay version assay scaled 1.0, thus maintained, unmodified returned object. Downstream analysis may require removing columns order combine data previous study earlier SomaScan version, e.g.¬†collapseAdats(). inverse scenario, lifting ‚Äúforward‚Äù previous, lower-plex version, extra reference values unnecessary perform lift, warning triggered. resulting data consists RFU data ‚Äúnew‚Äù signal space, fewer analytes otherwise expected (e.g.¬†11k space 5284 analytes; see example ).","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"example-5k-rightarrow-11k","dir":"Articles","previous_headings":"Overview","what":"Example: 5k ‚Üí\\rightarrow11k","title":"Lifting and Bridging SomaScan","text":"Since example_data object originally run SomaScan V4, vignette demonstrate lifting/bridging process 5k ‚Üí\\rightarrow11k signal space, recent SomaScan version.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"steps","dir":"Articles","previous_headings":"Overview > Example: 5k ‚Üí\\rightarrow11k","what":"Steps","title":"Lifting and Bridging SomaScan","text":"Determine attributes intact. Determine matrix type data (serum plasma). Ensure current SomaScan signal space lift-supported. Apply analyte-specific scalars corresponding columns via lift_adat(). Current bridge options : ‚Äú11k_to_7k‚Äù, ‚Äú11k_to_5k‚Äù, ‚Äú7k_to_11k‚Äù, ‚Äú7k_to_5k‚Äù, ‚Äú5k_to_11k‚Äù, ‚Äú5k_to_7k‚Äù.","code":"is_intact_attr(adat) attr(adat, \"Header.Meta\")$HEADER$StudyMatrix getSignalSpace(adat) checkSomaScanVersion(getSignalSpace(adat)) lift_adat(adat, bridge = \"<direction>\")"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"step-1","dir":"Articles","previous_headings":"Overview > Example: 5k ‚Üí\\rightarrow11k","what":"Step 1","title":"Lifting and Bridging SomaScan","text":"","code":"# determine intact attributes # must be TRUE is_intact_attr(example_data) #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"step-2","dir":"Articles","previous_headings":"Overview > Example: 5k ‚Üí\\rightarrow11k","what":"Step 2","title":"Lifting and Bridging SomaScan","text":"Confirm matrix SomaScan run \"EDTA Plasma\":","code":"# determine study matrix # must be Human Serum or EDTA-Plasma attr(example_data, \"Header.Meta\")$HEADER$StudyMatrix |> as.character() #> [1] \"EDTA Plasma\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"step-3","dir":"Articles","previous_headings":"Overview > Example: 5k ‚Üí\\rightarrow11k","what":"Step 3","title":"Lifting and Bridging SomaScan","text":"Finally, invoke lift_adat() perform bridge/transformation:","code":"# determine if current space can be lifted # must be V4, v4.1, or v5.0 from_space <- getSignalSpace(example_data) from_space #> [1] \"V4\"  # must be NULL is.null(checkSomaScanVersion(from_space)) #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"step-4","dir":"Articles","previous_headings":"Overview > Example: 5k ‚Üí\\rightarrow11k","what":"Step 4","title":"Lifting and Bridging SomaScan","text":"","code":"lift_11k <- lift_adat(example_data, bridge = \"5k_to_11k\") #> Warning: There are extra scaling values (5799) in the reference. #> They will be ignored.  is_lifted(lift_11k)           # signal space was lifted #> [1] TRUE  is.soma_adat(lift_11k)        # preserves 'soma_adat' class #> [1] TRUE  getSignalSpace(lift_11k)      # current space #> [1] \"v5.0\"  getSomaScanVersion(lift_11k)  # original space #> [1] \"V4\""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"was-the-somascan-bridge-successful","dir":"Articles","previous_headings":"Overview > Caveats to Consider","what":"Was the SomaScan bridge successful?","title":"Lifting and Bridging SomaScan","text":"Lifting SomaScan involves simple linear transformation numeric vector (RFU values), thus one sense always ‚Äúsuccessful‚Äù. However, users often wish know correct course action data. concordance plot Figure 1, can see transformation reducing 11k RFU brightness ~19% accordance median signal difference existed reference population (healthy normals). Rare edge cases aside, usually desired outcome, otherwise downstream analysis confounded uncorrected shift SomaScan space, likely result significant differences related signal space rather actual biology.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"should-you-filter-analytes","dir":"Articles","previous_headings":"Overview > Caveats to Consider","what":"Should you filter analytes?","title":"Lifting and Bridging SomaScan","text":"Users often ask certain analytes removed based given CCC threshold prior analysis. issue choosing appropriate threshold aside, unless prior knowledge justifying removal, recommend removing analytes based CCC alone. advice stems CCC values initially calculated; .e. healthy, normal reference population sampled across two versions SomaScan. Recall CCC influenced CV thus signaling range. example, given analyte near limit detection healthy population, therefore likely high(er) CV, .e.¬†low CCC, removing analyte may desired course action disease population analyte signaling linear range. Therefore, currently recommend careful evaluation case case basis using prior knowledge orthogonal justification filtering analytes discovery exploratory analyses.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/lifting-and-bridging.html","id":"questions","dir":"Articles","previous_headings":"Overview","what":"Questions","title":"Lifting and Bridging SomaScan","text":"always, bridging lifting questions, help. Please reach us via: via GitHub SUPPORT Global Scientific Engagement Team: techsupport@somalogic.com General SomaScan inquiries: support@somalogic.com","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Pre-Processing SomaScan","text":"SomaDataIO contains functionality prepare SomaScan .adat data file containing microarray-based relative fluorescent units (RFUs) analysis. typical data analysis path includes several steps pre-processing, including: Filtering features Filtering samples Data QC Transformations article walk pre-processing steps recommended prior executing analysis SomaScan data, along steps can performed using SomaDataIO package.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"load-libraries","dir":"Articles","previous_headings":"Overview","what":"Load Libraries","title":"Pre-Processing SomaScan","text":"","code":"library(SomaDataIO) library(ggplot2) library(dplyr) library(purrr)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"filtering-features","dir":"Articles","previous_headings":"Overview","what":"Filtering Features","title":"Pre-Processing SomaScan","text":"goal pre-processing step remove features (SeqIds) typically useful analysis SomaScan dataset, also retaining relevant features enable broad discovery downstream analysis. filtering logic typically used protein features (.e.¬†SOMAmer Reagents) : information logic convey? indicates human protein features raw SomaScan data set retained. can accomplished filtering ADAT Type attribute, represents SOMAmer target type. used conjunction Organism attribute, represents organism protein originated. two attributes (Type Organism) can accessed via SomaDataIO::getAnalyteInfo(). function retrieves analyte annotation data (.e.¬†column metadata, COL_DATA) appears protein measurements ADAT file, returns data.frame format. Note: example_data object used vignette V4.0 plasma ADAT. matrices versions ADATs may contain expanded feature sets. information format content ADAT, please reference SomaLogic-Data GitHub repository. retrieve column metadata annotations data set: can now check contents Type Organism attributes, can accessed columns data frame extracted getAnalyteInfo(): described filtering strategy , want retain features Type == \"Protein\", indicating feature related human protein. filtering step, can also specify want retain proteins found humans (Organism == \"Human\"). versions assay SeqIds labeled ‚ÄúInternal Use ‚Äù intended downstream analysis can also removed. can performed using dplyr::filter(): original dataset (example_adat) contained 5284 analytes; filtering human proteins removing 305 features described , contains 4979 analytes. Remember human_prots object ADAT, rather data.frame representing column metadata corresponds example_data ADAT object. must now filter example_data object match filtering performed human_prots object. data set now contains human proteins.","code":"Type == \"Protein\" & Organism == \"Human\" annots <- getAnalyteInfo(example_data) annots |> count(Type) |> arrange(desc(n)) #> # A tibble: 7 √ó 2 #>   Type                              n #>   <chr>                         <int> #> 1 Protein                        5207 #> 2 Non-Human                        24 #> 3 Spuriomer                        20 #> 4 Hybridization Control Elution    12 #> 5 Non-Biotin                       10 #> 6 Deprecated                        7 #> 7 Non-cleavable                     4  annots |> count(Organism) |> arrange(desc(n)) #> # A tibble: 14 √ó 2 #>    Organism                                                           n #>    <chr>                                                          <int> #>  1 Human                                                           5032 #>  2 Mouse                                                            228 #>  3 Aequorea victoria (Jellyfish)                                      3 #>  4 African clawed frog                                                3 #>  5 Heloderma suspectum (Gila monster)                                 3 #>  6 Hornet                                                             3 #>  7 Thermus thermophilus                                               3 #>  8 Photinus pyralis (North American firefly)                          2 #>  9 Sambucus nigra (European elder)                                    2 #> 10 Cyanidium caldarium                                                1 #> 11 Geobacillus stearothermophilus (Bacillus stearothermophilus)       1 #> 12 Rhizobium meliloti (Ensifer meliloti) (Sinorhizobium meliloti)     1 #> 13 isolate BEN                                                        1 #> 14 isolate LW123                                                      1 human_prots <- getAnalyteInfo(example_data) |>   filter(Type == \"Protein\" & Organism == \"Human\") |>   filter(!grepl(\"^Internal Use Only\", TargetFullName)) length(human_prots$SeqId) #> [1] 4979 # Identify SeqIds that differ between the data sets discard <- setdiff(grep(\"^seq\\\\.\", colnames(example_data), value = TRUE),                     human_prots$AptName) # Discard non-human, non-protein features filt_data <- example_data |>   dplyr::select(-all_of(discard))"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"flagged-features","dir":"Articles","previous_headings":"Overview > Filtering Features","what":"Flagged Features","title":"Pre-Processing SomaScan","text":"human protein analyte annotations object human_prots contains single column, called ColCheck, can used filtering flagged features ADAT datasets. column contains QC acceptance criteria plates/sets. standard QC acceptance criteria used determine feature flagged QC ratio plate (aggregate across plates) within acceptance range 0.8 1.2:  , please see SomaLogic-Data details. 214 human protein features filt_data flagged column check, marked FLAG value. presence FLAG value indicates SeqId one QC control samples outside range shown least one plate. total number SeqIds outside range can used assess potential issues runs studies, however FLAG value necessarily indicate problem signal specific analyte study samples. Therefore, features filtered dataset part standard pre-processing.","code":"human_prots |> count(ColCheck) #> # A tibble: 2 √ó 2 #>   ColCheck     n #>   <chr>    <int> #> 1 FLAG       214 #> 2 PASS      4765"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"filtering-samples","dir":"Articles","previous_headings":"Overview","what":"Filtering Samples","title":"Pre-Processing SomaScan","text":"next pre-processing step consider filtering samples. typical data analysis focused study samples within ADAT file. SampleType column filt_data object can used filter study samples . ADAT file also include buffer, calibrator QC samples. recommended remove samples prior analysis. filt_data object now 170 study samples, removing 10 calibrator samples (replicate controls combining data across runs), 6 QC samples (replicate controls used assess run quality), 6 buffer samples (protein controls).","code":"filt_data |> count(SampleType) #> # A tibble: 4 √ó 2 #>   SampleType     n #>   <chr>      <int> #> 1 Buffer         6 #> 2 Calibrator    10 #> 3 QC             6 #> 4 Sample       170 filt_data <- filt_data |>    filter(SampleType == \"Sample\")"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"flagged-samples","dir":"Articles","previous_headings":"Overview > Filtering Samples","what":"Flagged Samples","title":"Pre-Processing SomaScan","text":"ADAT file contains single column, called RowCheck, can used filtering flagged samples pass pre-defined normalization acceptance criteria. standard normalization acceptance criteria used determine sample flagged RowCheck column rowwise normalization scale factors outside acceptance range 0.4 2.5:  Note 2 samples filt_data flagged row check, marked FLAG value. can see samples normalization scale factor least one dilution bin fall standard accepted range. Filtering samples based default RowCheck column drop samples filt_data. Note normalization reference may result scaling bias certain scenarios. recommended check flag rate using default acceptance criteria RowCheck, > 10% samples flagged, evaluation may needed. Depending data experiment, may reasonable keep samples FLAG values, particularly samples close acceptance criteria boundary. FLAG value indicates non-conformance reference (either study-specific external ANML), evaluation encouraged assess samples considered true outliers given study removed.","code":"filt_data |>   count(RowCheck) |>    mutate(percent = n / sum(n) * 100) #> # A tibble: 2 √ó 3 #>   RowCheck     n percent #>   <chr>    <int>   <dbl> #> 1 FLAG         2    1.18 #> 2 PASS       168   98.8 # pull normalization scale factor variable names from ADAT norm_vars <- grep(\"^[Nn]orm[Ss]cale|^Med\\\\.Scale\\\\.\",                    names(filt_data), value = TRUE)  filt_data |>   filter(!RowCheck == \"PASS\") |>    dplyr::select(SampleId, all_of(norm_vars)) |>    as.data.frame() #>                SampleId NormScale_20 NormScale_0_005 NormScale_0_5 #> 258495800110_3      126    0.3700948        1.064435     0.9836240 #> 258495800109_1      147    0.2891420        1.111629     0.9634776 filt_data <- filt_data |>    filter(RowCheck == \"PASS\")"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"sample-level-outliers-by-rfu","dir":"Articles","previous_headings":"Overview > Filtering Samples","what":"Sample Level Outliers by RFU","title":"Pre-Processing SomaScan","text":"also important evaluate sample-level outliers RFU measurements. standard plasma serum studies Standard BioTools‚Äô recommended outlier definition sample >= 5% RFU measurements exceed 6 median absolute deviations (MADs) 5x fold-change median signal. filter typically appropriate studies plasma, serum, biological matrices generally exhibiting homeostatic characteristics. studies matrices tissue homogenate, cell culture, study designs containing client-provided background lysis buffer controls (similar), filter likely appropriate. can identify plasma serum outlier samples using definition calcOutlierMap() function.  one sample filt_data modified previous code chunk identified outlier RFU measurements *. getOutlierIds() function useful extracting sample IDs flagged outliers plot. sample IDs investigated possibly considered removal prior analysis.","code":"# filt_data does not have any outliers by default # create a \"fake\" outlier sample as an example apts <- getAnalytes(filt_data) filt_data[12, apts[1:600]] <- filt_data[12, apts[1:600]] * 100  # 600 apts ~ 12% om <- calcOutlierMap(filt_data) plot(om) rfu_outliers <- getOutlierIds(om) rfu_outliers #>   idx #> 1  12  # drop one outlier sample filt_data <- filt_data |>    filter(!dplyr::row_number() %in% rfu_outliers$idx)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"data-qc","dir":"Articles","previous_headings":"Overview","what":"Data QC","title":"Pre-Processing SomaScan","text":"goal step assess normalization applied input ADAT appropriate study. accomplish , can check association normalization scale factors endpoint interest. example, create status_class two-group endpoint variable status_cont continuous endpoint variable filt_data ADAT. Plot normalization scale factors status_class endpoint.  appear visual normalization bias status_class. conclusion confirmed results t-tests. Now, check normalization bias continuous endpoint status_cont.  appear visual normalization bias status_cont continuous endpoint. conclusion confirmed results correlation tests. considerable normalization bias observed ADAT, alternate normalization used univariate analyses, planned analyses may need modified account bias.","code":"# create \"status\" endpoints as examples filt_data <- withr::with_seed(101,   filt_data |>      mutate(status_cont = runif(nrow(filt_data))) |>      mutate(status_class = ifelse(status_cont > 0.5, \"treatment\", \"control\")) ) filt_data |>    select(SampleId, status_class, all_of(norm_vars)) |>    tidyr::pivot_longer(!c(SampleId, status_class),                       names_to = \"Normalization Scale Factor\",                       values_to = \"Value\") |>    ggplot(aes(x = `Normalization Scale Factor`, y = Value, fill = status_class)) +     geom_boxplot() +     ylim(0, 2.6) +     geom_hline(yintercept  = 0.4, linetype = \"dashed\", color = \"red\") +     geom_hline(yintercept  = 2.5, linetype = \"dashed\", color = \"red\") +     theme_bw() +     scale_fill_manual(values = c(\"#4067E2\", \"#59CFDB\")) norm_vars |>   as_tibble() |>    mutate(     formula = map(norm_vars, ~ as.formula(paste(.x, \"~ status_class\"))), # create formula     t_test  = map(formula, ~ stats::t.test(.x, data = filt_data)),  # fit t-tests     t_stat  = map_dbl(t_test, \"statistic\"),            # pull out t-statistic     p.value = map_dbl(t_test, \"p.value\"),              # pull out p-values     fdr     = p.adjust(p.value, method = \"BH\")         # FDR for multiple testing   )  #> # A tibble: 3 √ó 6 #>   value           formula   t_test  t_stat p.value   fdr #>   <chr>           <list>    <list>   <dbl>   <dbl> <dbl> #> 1 NormScale_20    <formula> <htest>  0.604   0.547 0.585 #> 2 NormScale_0_005 <formula> <htest> -1.58    0.117 0.351 #> 3 NormScale_0_5   <formula> <htest> -0.548   0.585 0.585 filt_data |>    select(SampleId, status_cont, all_of(norm_vars)) |>    tidyr::pivot_longer(!c(SampleId, status_cont),                       names_to = \"Normalization Scale Factor\",                       values_to = \"Value\") |>    ggplot(aes(x = status_cont, y = Value, color = `Normalization Scale Factor`)) +     geom_point() +     ylim(0, 2.6) +     geom_hline(yintercept  = 0.4, linetype = \"dashed\", color = \"red\") +     geom_hline(yintercept  = 2.5, linetype = \"dashed\", color = \"red\") +     theme_bw() +     scale_color_manual(values = c(\"#4067E2\", \"#59CFDB\", \"#DB40EF\")) +     facet_wrap(~`Normalization Scale Factor`) +     theme(legend.position = \"none\") norm_vars |>   as_tibble() |>    mutate(     formula = map(norm_vars, ~ as.formula(paste(\"~ status_cont +\", .x))), # create formula     cor     = map(formula, ~ stats::cor.test(.x, data = filt_data)),  # calculate correlations     pearson = map_dbl(cor, \"statistic\"),            # pull out test statistic     p.value = map_dbl(cor, \"p.value\"),              # pull out p-values     fdr     = p.adjust(p.value, method = \"BH\")      # FDR for multiple testing   )  #> # A tibble: 3 √ó 6 #>   value           formula   cor     pearson p.value   fdr #>   <chr>           <list>    <list>    <dbl>   <dbl> <dbl> #> 1 NormScale_20    <formula> <htest>   0.132   0.895 0.895 #> 2 NormScale_0_005 <formula> <htest>   0.674   0.501 0.853 #> 3 NormScale_0_5   <formula> <htest>   0.571   0.569 0.853"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"transformations","dir":"Articles","previous_headings":"Overview","what":"Transformations","title":"Pre-Processing SomaScan","text":"SomaScan data typically delivered end users normalized, untransformed RFUs. Many analytic operations best performed using untransformed values, including fold-change calculations, bridging RFUs across assay versions, calculating coefficients variation (CV) replicate samples, comparing study-specific RFUs population reference values provided SomaScan Menu Tool. many operations conducted untransformed RFU values, important note SeqId, distribution biological sample RFUs generally follows right-tailed, log-normal distribution. Let‚Äôs take look distribution one example analyte feature, seq.10023.32, transformations applied.  log-normal distribution, long right-tail distribution raw RFU values, assumed distribution untransformed analytes provided ADAT file.","code":"filt_data |>    ggplot(aes(x = seq.10023.32)) +   geom_density(fill = \"#59CFDB\", color = \"#59CFDB\", alpha = 0.8) +   theme_bw()"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"log-10","dir":"Articles","previous_headings":"Overview > Transformations","what":"Log-10","title":"Pre-Processing SomaScan","text":"Performing log10 transformation recommended prior using methods assume normally distributed measurements. Please note real-world data rarely conforms exactly ideal distributional assumptions analysts feel free explore alternative transformations may better suit specific data statistical test assumptions. However, found log10 transformation broadly appropriate standard parametric analyses across SomaScan menu. SomaDataIO package provides log10() math generic function soma_adat class, log-10 transform SOMAmer analyte features within ADAT file.","code":"filt_data <- filt_data |>    log10()"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"centering-and-scaling-z-score","dir":"Articles","previous_headings":"Overview > Transformations","what":"Centering and Scaling (Z-Score)","title":"Pre-Processing SomaScan","text":"transformation consider applying analyte features Z-score transformation experiment includes multivariate analysis. compare relative differential signal across analyte features, centering scaling RFU values applied Z-score transformation: Z=x‚àíŒºœÉ Z = \\frac{x - \\mu}{\\sigma} xx observed value, Œº\\mu, mean sample, œÉ\\sigma standard deviation sample. z-score transformation typically performed log10-transformed RFUs. can done creating simple function, center_scale(), applying analytes filt_data. Now, re-examine distribution analyte feature seq.10023.32:  applying transformations, distribution pre-processed analyte features look similar . true modal behavior analytes observed, may require secondary assessment evaluation. centering scaling standardizes RFU distributions across SeqIds multivariate analysis, important understand enable meaningful comparison expression values different SeqIds. Take, instance, hypothetical SeqId z-score 2 hypothetical SeqId B z-score -1. One infer protein target SeqId present higher concentration target SeqId B original sample prep. comparisons made sample groups within given SeqId. RFU value, well log10 RFU z-score, dependent variety analyte-specific factors SOMAmer Reagent-target protein binding kinetics, dilution bin SOMAmer reagent, NHS-biotin conjugation efficiency SOMAmer, factors intrinsic SOMAmer Reagent within SomaScan assay.","code":"# center/scale center_scale <- function(.x) {    # .x = numeric vector   out <- .x - mean(.x)  # center   out / sd(out)         # scale }  filt_data <- filt_data |>    mutate(across(getAnalytes(filt_data), center_scale)) filt_data |>    ggplot(aes(x = seq.10023.32)) +   geom_density(fill = \"#59CFDB\", color = \"#59CFDB\", alpha = 0.8) +   theme_bw()"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"preprocessadat-function","dir":"Articles","previous_headings":"Overview","what":"preProcessAdat() function","title":"Pre-Processing SomaScan","text":"preProcessAdat() function available perform steps outlined vignette. default, filter features samples using standard QC normalization acceptance criteria described earlier, drop sample-level RFU outliers. also option perform log-10 center & scale transformations untransformed RFU values. data QC plots endpoints clinical variables desired,names variables explicitly passed data.qc argument. Please see preProcessAdat() function documentation details.","code":"# first recreate outlier and endpoints, and add to original example_data object apts <- getAnalytes(example_data) example_data[12, apts[1:600]] <- example_data[12, apts[1:600]] * 100  # 600 apts ~ 12%  example_data <- withr::with_seed(101,   example_data |>      mutate(status_cont  = runif(nrow(example_data))) |>      mutate(status_class = ifelse(status_cont > 0.5, \"treatment\", \"control\")) ) processed_data <- preProcessAdat(adat            = example_data,                                  filter.features = TRUE,                                  filter.controls = TRUE,                                  filter.qc       = TRUE,                                  filter.outliers = FALSE,                                  data.qc         = c(\"status_class\",                                                      \"status_cont\"),                                  log.10          = FALSE,                                  center.scale    = FALSE) #> ‚úî 305 non-human protein features were removed. #> ‚Üí 214 human proteins did not pass standard QC #> acceptance criteria and were flagged in `ColCheck`.  These features #> were not removed, as they still may yield useful information in an #> analysis, but further evaluation may be needed. #> ‚úî 6 buffer samples were removed. #> ‚úî 10 calibrator samples were removed. #> ‚úî 6 QC samples were removed. #> ‚úî 2 samples flagged in `RowCheck` did not #> pass standard normalization acceptance criteria (0.4 <= x <= 2.5) #> and were removed. #> ‚Üí Data QC plots were generated: #> $status_class #>  #> $status_cont processed_data #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 168 #>      Columns              5015 #>      Clinical Data        36 #>      Features             4979 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 168 √ó 5,016 #>    row_names      PlateId  PlateRunDate ScannerID PlatePosition SlideId #>    <chr>          <chr>    <chr>        <chr>     <chr>           <dbl> #>  1 258495800012_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11 #>  2 258495800004_7 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11 #>  3 258495800010_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11 #>  4 258495800003_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H6            2.58e11 #>  5 258495800009_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H5            2.58e11 #>  6 258495800012_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H4            2.58e11 #>  7 258495800001_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H3            2.58e11 #>  8 258495800004_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H2            2.58e11 #>  9 258495800001_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H12           2.58e11 #> 10 258495800009_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H10           2.58e11 #> # ‚Ñπ 158 more rows #> # ‚Ñπ 5,010 more variables: Subarray <dbl>, SampleId <chr>, #> #   SampleType <chr>, PercentDilution <int>, SampleMatrix <chr>, #> #   Barcode <lgl>, Barcode2d <chr>, SampleName <lgl>, #> #   SampleNotes <lgl>, AliquotingNotes <lgl>, ‚Ä¶ #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/pre-processing.html","id":"questions","dir":"Articles","previous_headings":"Overview","what":"Questions","title":"Pre-Processing SomaScan","text":"always, pre-processing questions, help. Please reach us via: GitHub SUPPORT Global Scientific Engagement Team: techsupport@somalogic.com General SomaScan inquiries: support@somalogic.com","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-binary-classification.html","id":"classification-via-logistic-regression","dir":"Articles","previous_headings":"","what":"Classification via Logistic Regression","title":"Binary Classification","text":"Although targeted statistical analyses beyond scope SomaDataIO package, example analysis typical users/customers perform ‚ÄòSomaScan‚Äô data. intended definitive guide statistical analysis existing packages exist R ecosystem perform parts extensions techniques. Many variations workflow exist, however framework highlights one perform standard preliminary analyses ‚ÄòSomaScan‚Äô data.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-binary-classification.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load Libraries","title":"Binary Classification","text":"","code":"library(SomaDataIO) library(dplyr) library(tidyr) library(purrr)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-binary-classification.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Binary Classification","text":"","code":"# the `example_data` .adat object # download from `SomaLogic-Data` repo or directly via bash command: # `wget https://raw.githubusercontent.com/SomaLogic/SomaLogic-Data/main/example_data.adat` # then read in to R with: # example_data <- read_adat(\"example_data.adat\") dim(example_data) #> [1]  192 5318  table(example_data$SampleType) #>  #>     Buffer Calibrator         QC     Sample  #>          6         10          6        170  # prepare data set for analysis using `preProcessAdat()` cleanData <- example_data |>   preProcessAdat(     filter.features = TRUE,            # rm non-human protein features     filter.controls = TRUE,            # rm control samples     filter.qc       = TRUE,            # rm non-passing qc samples     log.10          = TRUE,            # log10 transform     center.scale    = TRUE             # center/scale analytes   ) #> ‚úî 305 non-human protein features were removed. #> ‚Üí 214 human proteins did not pass standard QC #> acceptance criteria and were flagged in `ColCheck`.  These features #> were not removed, as they still may yield useful information in an #> analysis, but further evaluation may be needed. #> ‚úî 6 buffer samples were removed. #> ‚úî 10 calibrator samples were removed. #> ‚úî 6 QC samples were removed. #> ‚úî 2 samples flagged in `RowCheck` did not #> pass standard normalization acceptance criteria (0.4 <= x <= 2.5) #> and were removed. #> ‚úî RFU features were log-10 transformed. #> ‚úî RFU features were centered and scaled.  # drop any missing values in Sex, and convert to binary 0/1 variable cleanData <- cleanData |>    drop_na(Sex) |>                              # rm NAs if present   mutate(Group = as.numeric(factor(Sex)) - 1)  # map Sex -> 0/1  table(cleanData$Sex) #>  #>  F  M  #> 85 83  table(cleanData$Group)    # F = 0; M = 1 #>  #>  0  1  #> 85 83"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-binary-classification.html","id":"set-up-traintest-data","dir":"Articles","previous_headings":"","what":"Set up Train/Test Data","title":"Binary Classification","text":"","code":"# idx = hold-out  # seed resulting in 50/50 class balance idx   <- withr::with_seed(3, sample(1:nrow(cleanData), size = nrow(cleanData) - 50)) train <- cleanData[idx, ] test  <- cleanData[-idx, ]  # assert no overlap isTRUE(   all.equal(intersect(rownames(train), rownames(test)), character(0)) ) #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-binary-classification.html","id":"logistic-regression","dir":"Articles","previous_headings":"","what":"Logistic Regression","title":"Binary Classification","text":"use cleanData, train, test data objects .","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-binary-classification.html","id":"predict-sex","dir":"Articles","previous_headings":"Logistic Regression","what":"Predict Sex","title":"Binary Classification","text":"","code":"LR_tbl <- getAnalyteInfo(train) |>   select(AptName, SeqId, Target = TargetFullName, EntrezGeneSymbol, UniProt) |>   mutate(     formula  = map(AptName, ~ as.formula(paste(\"Group ~\", .x))),  # create formula     model    = map(formula, ~ stats::glm(.x, data = train, family = \"binomial\", model = FALSE)),  # fit glm()     beta_hat = map(model, coef) |> map_dbl(2L),     # pull out coef Beta     p.value  = map2_dbl(model, AptName, ~ {       summary(.x)$coefficients[.y, \"Pr(>|z|)\"] }),  # pull out p-values     fdr      = p.adjust(p.value, method = \"BH\")     # FDR correction multiple testing   ) |>   arrange(p.value) |>            # re-order by `p-value`   mutate(rank = row_number())    # add numeric ranks  LR_tbl #> # A tibble: 4,979 √ó 11 #>    AptName      SeqId   Target EntrezGeneSymbol UniProt formula   model #>    <chr>        <chr>   <chr>  <chr>            <chr>   <list>    <lis> #>  1 seq.6580.29  6580-29 Pregn‚Ä¶ PZP              P20742  <formula> <glm> #>  2 seq.5763.67  5763-67 Beta-‚Ä¶ DEFB104A         Q8WTQ1  <formula> <glm> #>  3 seq.7926.13  7926-13 Kunit‚Ä¶ SPINT3           P49223  <formula> <glm> #>  4 seq.3032.11  3032-11 Folli‚Ä¶ CGA FSHB         P01215‚Ä¶ <formula> <glm> #>  5 seq.7139.14  7139-14 SLIT ‚Ä¶ SLITRK4          Q8IW52  <formula> <glm> #>  6 seq.16892.23 16892-‚Ä¶ Ecton‚Ä¶ ENPP2            Q13822  <formula> <glm> #>  7 seq.2953.31  2953-31 Lutei‚Ä¶ CGA LHB          P01215‚Ä¶ <formula> <glm> #>  8 seq.9282.12  9282-12 Cyste‚Ä¶ CRISP2           P16562  <formula> <glm> #>  9 seq.4914.10  4914-10 Human‚Ä¶ CGA CGB          P01215‚Ä¶ <formula> <glm> #> 10 seq.2474.54  2474-54 Serum‚Ä¶ APCS             P02743  <formula> <glm> #> # ‚Ñπ 4,969 more rows #> # ‚Ñπ 4 more variables: beta_hat <dbl>, p.value <dbl>, fdr <dbl>, #> #   rank <int>"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-binary-classification.html","id":"fit-model-calculate-performance","dir":"Articles","previous_headings":"Logistic Regression","what":"Fit Model | Calculate Performance","title":"Binary Classification","text":"Next, select features model fit. good idea reasonable Sex markers prior knowledge (CGA*), fortunately many highly ranked LR_tbl. fit 4-marker logistic regression model cherry-picked gender-related features:","code":"# AptName is index key between `LR_tbl` and `train` feats <- LR_tbl$AptName[c(1L, 3L, 5L, 7L)] form  <- as.formula(paste(\"Group ~\", paste(feats, collapse = \"+\"))) fit   <- glm(form, data = train, family = \"binomial\", model = FALSE) pred  <- tibble(   true_class = test$Sex,                                         # orig class label   pred       = predict(fit, newdata = test, type = \"response\"),  # prob. 'Male'   pred_class = ifelse(pred < 0.5, \"F\", \"M\"),                     # class label ) conf <- table(pred$true_class, pred$pred_class, dnn = list(\"Actual\", \"Predicted\")) tp   <- conf[2L, 2L] tn   <- conf[1L, 1L] fp   <- conf[1L, 2L] fn   <- conf[2L, 1L]  # Confusion matrix conf #>       Predicted #> Actual  F  M #>      F 27  1 #>      M  4 18  # Classification metrics tibble(Sensitivity = tp / (tp + fn),        Specificity = tn / (tn + fp),        Accuracy    = (tp + tn) / sum(conf),        PPV         = tp / (tp + fp),        NPV         = tn / (tn + fn) ) #> # A tibble: 1 √ó 5 #>   Sensitivity Specificity Accuracy   PPV   NPV #>         <dbl>       <dbl>    <dbl> <dbl> <dbl> #> 1       0.818       0.964      0.9 0.947 0.871"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-linear-regression.html","id":"regression-of-continuous-variables","dir":"Articles","previous_headings":"","what":"Regression of Continuous Variables","title":"Linear Regression","text":"Although targeted statistical analyses beyond scope SomaDataIO package, example analysis typical users/customers perform ‚ÄòSomaScan‚Äô data. intended definitive guide statistical analysis existing packages exist R ecosystem perform parts extensions techniques. Many variations workflow exist, however framework highlights one perform standard preliminary analyses ‚ÄòSomaScan‚Äô data.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-linear-regression.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load Libraries","title":"Linear Regression","text":"","code":"library(SomaDataIO) library(ggplot2) library(dplyr) library(tidyr) library(purrr)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-linear-regression.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Linear Regression","text":"","code":"# the `example_data` .adat object # download from `SomaLogic-Data` repo or directly via bash command: # `wget https://raw.githubusercontent.com/SomaLogic/SomaLogic-Data/main/example_data.adat` # then read in to R with: # example_data <- read_adat(\"example_data.adat\") dim(example_data) #> [1]  192 5318  table(example_data$SampleType) #>  #>     Buffer Calibrator         QC     Sample  #>          6         10          6        170  # prepare data set for analysis using `preProcessAdat()` cleanData <- example_data |>   preProcessAdat(     filter.features = TRUE,            # rm non-human protein features     filter.controls = TRUE,            # rm control samples     filter.qc       = TRUE,            # rm non-passing qc samples     log.10          = TRUE,            # log10 transform     center.scale    = TRUE             # center/scale analytes   ) #> ‚úî 305 non-human protein features were removed. #> ‚Üí 214 human proteins did not pass standard QC #> acceptance criteria and were flagged in `ColCheck`.  These features #> were not removed, as they still may yield useful information in an #> analysis, but further evaluation may be needed. #> ‚úî 6 buffer samples were removed. #> ‚úî 10 calibrator samples were removed. #> ‚úî 6 QC samples were removed. #> ‚úî 2 samples flagged in `RowCheck` did not #> pass standard normalization acceptance criteria (0.4 <= x <= 2.5) #> and were removed. #> ‚úî RFU features were log-10 transformed. #> ‚úî RFU features were centered and scaled.  # drop any missing Age values cleanData <- cleanData |>   drop_na(Age)                         # rm NAs if present  summary(cleanData$Age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.00   46.00   55.00   55.64   67.00   77.00"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-linear-regression.html","id":"set-up-traintest-data","dir":"Articles","previous_headings":"","what":"Set up Train/Test Data","title":"Linear Regression","text":"","code":"# idx = hold-out  idx   <- withr::with_seed(3, sample(1:nrow(cleanData), size = nrow(cleanData) - 50)) train <- cleanData[idx, ] test  <- cleanData[-idx, ]  # assert no overlap isTRUE(   all.equal(intersect(rownames(train), rownames(test)), character(0)) ) #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-linear-regression.html","id":"linear-regression","dir":"Articles","previous_headings":"","what":"Linear Regression","title":"Linear Regression","text":"use cleanData, train, test data objects .","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-linear-regression.html","id":"predict-age","dir":"Articles","previous_headings":"Linear Regression","what":"Predict Age","title":"Linear Regression","text":"","code":"LinR_tbl <- getAnalyteInfo(train) |>                # `train` from above   select(AptName, SeqId, Target = TargetFullName, EntrezGeneSymbol, UniProt) |>   mutate(     formula = map(AptName, ~ as.formula(paste(\"Age ~\", .x, collapse = \" + \"))),     model   = map(formula, ~ stats::lm(.x, data = train, model = FALSE)), # fit models     slope   = map(model, coef) |> map_dbl(2L),     # pull out B_1     p.value = map2_dbl(model, AptName, ~ {       summary(.x)$coefficients[.y, \"Pr(>|t|)\"] }), # pull out p-values     fdr     = p.adjust(p.value, method = \"BH\")     # FDR for multiple testing   ) |>   arrange(p.value) |>            # re-order by `p-value`   mutate(rank = row_number())    # add numeric ranks  LinR_tbl #> # A tibble: 4,979 √ó 11 #>    AptName  SeqId Target EntrezGeneSymbol UniProt formula   model slope #>    <chr>    <chr> <chr>  <chr>            <chr>   <list>    <lis> <dbl> #>  1 seq.304‚Ä¶ 3045‚Ä¶ Pleio‚Ä¶ PTN              P21246  <formula> <lm>   7.96 #>  2 seq.437‚Ä¶ 4374‚Ä¶ Growt‚Ä¶ GDF15            Q99988  <formula> <lm>   7.20 #>  3 seq.153‚Ä¶ 1538‚Ä¶ Fatty‚Ä¶ FABP4            P15090  <formula> <lm>   6.91 #>  4 seq.156‚Ä¶ 1564‚Ä¶ Trans‚Ä¶ TAGLN            Q01995  <formula> <lm>   7.16 #>  5 seq.449‚Ä¶ 4496‚Ä¶ Macro‚Ä¶ MMP12            P39900  <formula> <lm>   6.77 #>  6 seq.639‚Ä¶ 6392‚Ä¶ WNT1-‚Ä¶ WISP2            O76076  <formula> <lm>   6.80 #>  7 seq.155‚Ä¶ 1553‚Ä¶ Macro‚Ä¶ MSR1             P21757  <formula> <lm>   6.49 #>  8 seq.141‚Ä¶ 1413‚Ä¶ Inter‚Ä¶ IL1R2            P27930  <formula> <lm>  -6.08 #>  9 seq.536‚Ä¶ 5364‚Ä¶ Prote‚Ä¶ SET              Q01105  <formula> <lm>  -6.03 #> 10 seq.336‚Ä¶ 3364‚Ä¶ Cathe‚Ä¶ CTSV             O60911  <formula> <lm>  -6.15 #> # ‚Ñπ 4,969 more rows #> # ‚Ñπ 3 more variables: p.value <dbl>, fdr <dbl>, rank <int>"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-linear-regression.html","id":"fit-model-calculate-performance","dir":"Articles","previous_headings":"Linear Regression","what":"Fit Model | Calculate Performance","title":"Linear Regression","text":"Fit 8-marker model top 8 features LinR_tbl:","code":"feats <- head(LinR_tbl$AptName, 8L) form  <- as.formula(paste(\"Age ~\", paste(feats, collapse = \"+\"))) fit   <- stats::lm(form, data = train, model = FALSE) n     <- nrow(test) p     <- length(feats)  # Results res   <- tibble(   true_age   = test$Age,   pred_age   = predict(fit, newdata = test),   pred_error = pred_age - true_age )  # Lin's Concordance Correl. Coef. # Accounts for location + scale shifts linCCC <- function(x, y) {   stopifnot(length(x) == length(y))   a <- 2 * cor(x, y) * sd(x) * sd(y)   b <- var(x) + var(y) + (mean(x) - mean(y))^2   a / b }  # Regression metrics tibble(   rss  = sum(res$pred_error^2),                 # residual sum of squares   tss  = sum((test$Age - mean(test$Age))^2),    # total sum of squares   rsq  = 1 - (rss / tss),                       # R-squared   rsqadj = max(0, 1 - (1 - rsq) * (n - 1) / (n - p - 1)), # Adjusted R-squared   R2   = stats::cor(res$true_age, res$pred_age)^2,        # R-squared Pearson approx.   MAE  = mean(abs(res$pred_error)),             # Mean Absolute Error   RMSE = sqrt(mean(res$pred_error^2)),          # Root Mean Squared Error   CCC  = linCCC(res$true_age, res$pred_age)     # Lin's CCC ) #> # A tibble: 1 √ó 8 #>     rss   tss   rsq rsqadj    R2   MAE  RMSE   CCC #>   <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 4027.  7136 0.436  0.326 0.452  7.22  8.97 0.655"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-linear-regression.html","id":"visualize-concordance","dir":"Articles","previous_headings":"Linear Regression","what":"Visualize Concordance","title":"Linear Regression","text":"","code":"lims <- range(res$true_age, res$pred_age) res |>   ggplot(aes(x = true_age, y = pred_age)) +   geom_point(colour = \"#24135F\", alpha = 0.5, size = 4) +   expand_limits(x = lims, y = lims) +                # make square   geom_abline(slope = 1, colour = \"black\") +         # add unit line   geom_rug(colour = \"#286d9b\", linewidth = 0.2) +   labs(y = \"Predicted Age\", x = \"Actual Age\") +   ggtitle(\"Concordance in Predicted vs. Actual Age\") +   theme(plot.title = element_text(size = 21, face = \"bold\"),         axis.title.x = element_text(size = 14),         axis.title.y = element_text(size = 14))"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-three-group-analysis-anova.html","id":"differential-expression-via-anova","dir":"Articles","previous_headings":"","what":"Differential Expression via ANOVA","title":"ANOVA Three-Group Analysis","text":"Although targeted statistical analyses beyond scope SomaDataIO package, example analysis typical users/customers perform ‚ÄòSomaScan‚Äô data. intended definitive guide statistical analysis existing packages exist R ecosystem perform parts extensions techniques. Many variations workflow exist, however framework highlights one perform standard preliminary analyses ‚ÄòSomaScan‚Äô data.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-three-group-analysis-anova.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load Libraries","title":"ANOVA Three-Group Analysis","text":"","code":"library(SomaDataIO) library(ggplot2) library(dplyr) library(tidyr) library(purrr)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-three-group-analysis-anova.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"ANOVA Three-Group Analysis","text":"","code":"# the `example_data` .adat object # download from `SomaLogic-Data` repo or directly via bash command: # `wget https://raw.githubusercontent.com/SomaLogic/SomaLogic-Data/main/example_data.adat` # then read in to R with: # example_data <- read_adat(\"example_data.adat\") dim(example_data) #> [1]  192 5318  table(example_data$SampleType) #>  #>     Buffer Calibrator         QC     Sample  #>          6         10          6        170  # prepare data set for analysis using `preProcessAdat()` cleanData <- example_data |>   preProcessAdat(     filter.features = TRUE,            # rm non-human protein features     filter.controls = TRUE,            # rm control samples     filter.qc       = TRUE,            # rm non-passing qc samples     log.10          = TRUE,            # log10 transform     center.scale    = TRUE             # center/scale analytes   ) #> ‚úî 305 non-human protein features were removed. #> ‚Üí 214 human proteins did not pass standard QC #> acceptance criteria and were flagged in `ColCheck`.  These features #> were not removed, as they still may yield useful information in an #> analysis, but further evaluation may be needed. #> ‚úî 6 buffer samples were removed. #> ‚úî 10 calibrator samples were removed. #> ‚úî 6 QC samples were removed. #> ‚úî 2 samples flagged in `RowCheck` did not #> pass standard normalization acceptance criteria (0.4 <= x <= 2.5) #> and were removed. #> ‚úî RFU features were log-10 transformed. #> ‚úî RFU features were centered and scaled.  # drop any missing values in Sex cleanData <- cleanData |>   drop_na(Sex)                         # rm NAs if present  # dummy 3 group setup # set up semi-random 3-group with structure # based on the `Sex` variable (with known structure) cleanData$Group <- ifelse(cleanData$Sex == \"F\", \"A\", \"B\") g3 <- withr::with_seed(123, sample(1:nrow(cleanData), size = round(nrow(cleanData) / 3))) cleanData$Group[g3] <- \"C\" table(cleanData$Group) #>  #>  A  B  C  #> 55 57 56"},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-three-group-analysis-anova.html","id":"get-annotations-via-getanalyteinfo","dir":"Articles","previous_headings":"Compare Three Groups (A/B/C)","what":"Get annotations via getAnalyteInfo():","title":"ANOVA Three-Group Analysis","text":"","code":"aov_tbl <- getAnalyteInfo(cleanData) |>   select(AptName, SeqId, Target = TargetFullName, EntrezGeneSymbol, UniProt)  # Feature data info: #   Subset via dplyr::filter(aov_tbl, ...) here to #   restrict analysis to only certain analytes  aov_tbl #> # A tibble: 4,979 √ó 5 #>    AptName       SeqId     Target              EntrezGeneSymbol UniProt #>    <chr>         <chr>     <chr>               <chr>            <chr>   #>  1 seq.10000.28  10000-28  Beta-crystallin B2  CRYBB2           P43320  #>  2 seq.10001.7   10001-7   RAF proto-oncogene‚Ä¶ RAF1             P04049  #>  3 seq.10003.15  10003-15  Zinc finger protei‚Ä¶ ZNF41            P51814  #>  4 seq.10006.25  10006-25  ETS domain-contain‚Ä¶ ELK1             P19419  #>  5 seq.10008.43  10008-43  Guanylyl cyclase-a‚Ä¶ GUCA1A           P43080  #>  6 seq.10011.65  10011-65  Inositol polyphosp‚Ä¶ OCRL             Q01968  #>  7 seq.10012.5   10012-5   SAM pointed domain‚Ä¶ SPDEF            O95238  #>  8 seq.10014.31  10014-31  Zinc finger protei‚Ä¶ SNAI2            O43623  #>  9 seq.10015.119 10015-119 Voltage-gated pota‚Ä¶ KCNAB2           Q13303  #> 10 seq.10022.207 10022-207 DNA polymerase eta  POLH             Q9Y253  #> # ‚Ñπ 4,969 more rows"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-three-group-analysis-anova.html","id":"calculate-anovas","dir":"Articles","previous_headings":"Compare Three Groups (A/B/C)","what":"Calculate ANOVAs","title":"ANOVA Three-Group Analysis","text":"Use ‚Äúlist columns‚Äù approach via nested tibble object using dplyr, purrr, stats::aov()","code":"aov_tbl <- aov_tbl |>   mutate(     formula   = map(AptName, ~ as.formula(paste(.x, \"~ Group\"))), # create formula     aov_model = map(formula, ~ stats::aov(.x, data = cleanData)),  # fit ANOVA-models     aov_smry  = map(aov_model, summary) |> map(1L),      # summary() method     F.stat    = map(aov_smry, \"F value\") |> map_dbl(1L), # pull out F-statistic     p.value   = map(aov_smry, \"Pr(>F)\") |> map_dbl(1L),  # pull out p-values     fdr       = p.adjust(p.value, method = \"BH\")         # FDR multiple testing   ) |>   arrange(p.value) |>            # re-order by `p-value`   mutate(rank = row_number())    # add numeric ranks  # View analysis tibble aov_tbl #> # A tibble: 4,979 √ó 12 #>    AptName    SeqId Target EntrezGeneSymbol UniProt formula   aov_model #>    <chr>      <chr> <chr>  <chr>            <chr>   <list>    <list>    #>  1 seq.8468.‚Ä¶ 8468‚Ä¶ Prost‚Ä¶ KLK3             P07288  <formula> <aov>     #>  2 seq.6580.‚Ä¶ 6580‚Ä¶ Pregn‚Ä¶ PZP              P20742  <formula> <aov>     #>  3 seq.7926.‚Ä¶ 7926‚Ä¶ Kunit‚Ä¶ SPINT3           P49223  <formula> <aov>     #>  4 seq.3032.‚Ä¶ 3032‚Ä¶ Folli‚Ä¶ CGA FSHB         P01215‚Ä¶ <formula> <aov>     #>  5 seq.16892‚Ä¶ 1689‚Ä¶ Ecton‚Ä¶ ENPP2            Q13822  <formula> <aov>     #>  6 seq.7139.‚Ä¶ 7139‚Ä¶ SLIT ‚Ä¶ SLITRK4          Q8IW52  <formula> <aov>     #>  7 seq.5763.‚Ä¶ 5763‚Ä¶ Beta-‚Ä¶ DEFB104A         Q8WTQ1  <formula> <aov>     #>  8 seq.9282.‚Ä¶ 9282‚Ä¶ Cyste‚Ä¶ CRISP2           P16562  <formula> <aov>     #>  9 seq.4914.‚Ä¶ 4914‚Ä¶ Human‚Ä¶ CGA CGB          P01215‚Ä¶ <formula> <aov>     #> 10 seq.2953.‚Ä¶ 2953‚Ä¶ Lutei‚Ä¶ CGA LHB          P01215‚Ä¶ <formula> <aov>     #> # ‚Ñπ 4,969 more rows #> # ‚Ñπ 5 more variables: aov_smry <list>, F.stat <dbl>, p.value <dbl>, #> #   fdr <dbl>, rank <int>"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-three-group-analysis-anova.html","id":"visualize-with-ggplot2","dir":"Articles","previous_headings":"Compare Three Groups (A/B/C)","what":"Visualize with ggplot2()","title":"ANOVA Three-Group Analysis","text":"Create plotting tibble ‚Äúlong‚Äù format ggplot2:","code":"target_map <- head(aov_tbl, 12L) |>     # mapping table   select(AptName, Target)               # SeqId -> Target  plot_tbl <- cleanData |>   select(Group, target_map$AptName) |>    # top 12 analytes   pivot_longer(cols = -Group, names_to = \"AptName\", values_to = \"RFU\") |>   left_join(target_map, by = \"AptName\") |>   # order factor levels by 'aov_tbl' rank to order plots below   mutate(Target = factor(Target, levels = target_map$Target))  plot_tbl #> # A tibble: 2,016 √ó 4 #>    Group AptName         RFU Target                                     #>    <chr> <chr>         <dbl> <fct>                                      #>  1 A     seq.8468.19  -1.06  Prostate-specific antigen                  #>  2 A     seq.6580.29   0.298 Pregnancy zone protein                     #>  3 A     seq.7926.13  -1.08  Kunitz-type protease inhibitor 3           #>  4 A     seq.3032.11   0.398 Follicle stimulating hormone               #>  5 A     seq.16892.23  1.53  Ectonucleotide pyrophosphatase/phosphodie‚Ä¶ #>  6 A     seq.7139.14  -0.750 SLIT and NTRK-like protein 4               #>  7 A     seq.5763.67  -0.634 Beta-defensin 104                          #>  8 A     seq.9282.12  -1.12  Cysteine-rich secretory protein 2          #>  9 A     seq.4914.10   1.74  Human Chorionic Gonadotropin               #> 10 A     seq.2953.31  -0.425 Luteinizing hormone                        #> # ‚Ñπ 2,006 more rows plot_tbl |>   ggplot(aes(x = RFU, fill = Group)) +   geom_density(linetype = 0, alpha = 0.25) +   scale_fill_manual(values = c(\"#24135F\", \"#00A499\", \"#006BA6\")) +   facet_wrap(~ Target, ncol = 3) +   ggtitle(\"Probability Density of Top Analytes by ANOVA\") +   labs(y = \"log10(RFU)\") +   theme(plot.title = element_text(size = 21, face = \"bold\"),         axis.title.x = element_text(size = 14),         axis.title.y = element_text(size = 14),         legend.position = \"top\"   )"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-two-group-comparison.html","id":"differential-expression-via-t-test","dir":"Articles","previous_headings":"","what":"Differential Expression via t-test","title":"Two-Group Comparison","text":"Although targeted statistical analyses beyond scope SomaDataIO package, example analysis typical users/customers perform ‚ÄòSomaScan‚Äô data. intended definitive guide statistical analysis existing packages exist R ecosystem perform parts extensions techniques. Many variations workflow exist, however framework highlights one perform standard preliminary analyses ‚ÄòSomaScan‚Äô data.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-two-group-comparison.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load Libraries","title":"Two-Group Comparison","text":"","code":"library(SomaDataIO) library(ggplot2) library(dplyr) library(tidyr) library(purrr)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-two-group-comparison.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Two-Group Comparison","text":"","code":"# the `example_data` .adat object # download from `SomaLogic-Data` repo or directly via bash command: # `wget https://raw.githubusercontent.com/SomaLogic/SomaLogic-Data/main/example_data.adat` # then read in to R with: # example_data <- read_adat(\"example_data.adat\") dim(example_data) #> [1]  192 5318  table(example_data$SampleType) #>  #>     Buffer Calibrator         QC     Sample  #>          6         10          6        170  # prepare data set for analysis using `preProcessAdat()` cleanData <- example_data |>   preProcessAdat(     filter.features = TRUE,            # rm non-human protein features     filter.controls = TRUE,            # rm control samples     filter.qc       = TRUE,            # rm non-passing qc samples     log.10          = TRUE,            # log10 transform     center.scale    = TRUE             # center/scale analytes   ) #> ‚úî 305 non-human protein features were removed. #> ‚Üí 214 human proteins did not pass standard QC #> acceptance criteria and were flagged in `ColCheck`.  These features #> were not removed, as they still may yield useful information in an #> analysis, but further evaluation may be needed. #> ‚úî 6 buffer samples were removed. #> ‚úî 10 calibrator samples were removed. #> ‚úî 6 QC samples were removed. #> ‚úî 2 samples flagged in `RowCheck` did not #> pass standard normalization acceptance criteria (0.4 <= x <= 2.5) #> and were removed. #> ‚úî RFU features were log-10 transformed. #> ‚úî RFU features were centered and scaled.  # drop any missing values in Sex cleanData <- cleanData |>   drop_na(Sex)                         # rm NAs if present  table(cleanData$Sex) #>  #>  F  M  #> 85 83"},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-two-group-comparison.html","id":"get-annotations-via-getanalyteinfo","dir":"Articles","previous_headings":"Compare Two Groups (M/F)","what":"Get annotations via getAnalyteInfo():","title":"Two-Group Comparison","text":"","code":"t_tests <- getAnalyteInfo(cleanData) |>   select(AptName, SeqId, Target = TargetFullName, EntrezGeneSymbol, UniProt)  # Feature data info: #   Subset via dplyr::filter(t_tests, ...) here to #   restrict analysis to only certain analytes  t_tests #> # A tibble: 4,979 √ó 5 #>    AptName       SeqId     Target              EntrezGeneSymbol UniProt #>    <chr>         <chr>     <chr>               <chr>            <chr>   #>  1 seq.10000.28  10000-28  Beta-crystallin B2  CRYBB2           P43320  #>  2 seq.10001.7   10001-7   RAF proto-oncogene‚Ä¶ RAF1             P04049  #>  3 seq.10003.15  10003-15  Zinc finger protei‚Ä¶ ZNF41            P51814  #>  4 seq.10006.25  10006-25  ETS domain-contain‚Ä¶ ELK1             P19419  #>  5 seq.10008.43  10008-43  Guanylyl cyclase-a‚Ä¶ GUCA1A           P43080  #>  6 seq.10011.65  10011-65  Inositol polyphosp‚Ä¶ OCRL             Q01968  #>  7 seq.10012.5   10012-5   SAM pointed domain‚Ä¶ SPDEF            O95238  #>  8 seq.10014.31  10014-31  Zinc finger protei‚Ä¶ SNAI2            O43623  #>  9 seq.10015.119 10015-119 Voltage-gated pota‚Ä¶ KCNAB2           Q13303  #> 10 seq.10022.207 10022-207 DNA polymerase eta  POLH             Q9Y253  #> # ‚Ñπ 4,969 more rows"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-two-group-comparison.html","id":"calculate-t-tests","dir":"Articles","previous_headings":"Compare Two Groups (M/F)","what":"Calculate t-tests","title":"Two-Group Comparison","text":"Use ‚Äúlist columns‚Äù approach via nested tibble object using dplyr, purrr, stats::t.test()","code":"t_tests <- t_tests |>   mutate(     formula = map(AptName, ~ as.formula(paste(.x, \"~ Sex\"))), # create formula     t_test  = map(formula, ~ stats::t.test(.x, data = cleanData)),  # fit t-tests     t_stat  = map_dbl(t_test, \"statistic\"),            # pull out t-statistic     p.value = map_dbl(t_test, \"p.value\"),              # pull out p-values     fdr     = p.adjust(p.value, method = \"BH\")         # FDR for multiple testing   ) |>   arrange(p.value) |>            # re-order by `p-value`   mutate(rank = row_number())    # add numeric ranks  # View analysis tibble t_tests #> # A tibble: 4,979 √ó 11 #>    AptName      SeqId Target EntrezGeneSymbol UniProt formula   t_test  #>    <chr>        <chr> <chr>  <chr>            <chr>   <list>    <list>  #>  1 seq.8468.19  8468‚Ä¶ Prost‚Ä¶ KLK3             P07288  <formula> <htest> #>  2 seq.6580.29  6580‚Ä¶ Pregn‚Ä¶ PZP              P20742  <formula> <htest> #>  3 seq.7926.13  7926‚Ä¶ Kunit‚Ä¶ SPINT3           P49223  <formula> <htest> #>  4 seq.3032.11  3032‚Ä¶ Folli‚Ä¶ CGA FSHB         P01215‚Ä¶ <formula> <htest> #>  5 seq.16892.23 1689‚Ä¶ Ecton‚Ä¶ ENPP2            Q13822  <formula> <htest> #>  6 seq.9282.12  9282‚Ä¶ Cyste‚Ä¶ CRISP2           P16562  <formula> <htest> #>  7 seq.5763.67  5763‚Ä¶ Beta-‚Ä¶ DEFB104A         Q8WTQ1  <formula> <htest> #>  8 seq.2953.31  2953‚Ä¶ Lutei‚Ä¶ CGA LHB          P01215‚Ä¶ <formula> <htest> #>  9 seq.7139.14  7139‚Ä¶ SLIT ‚Ä¶ SLITRK4          Q8IW52  <formula> <htest> #> 10 seq.4914.10  4914‚Ä¶ Human‚Ä¶ CGA CGB          P01215‚Ä¶ <formula> <htest> #> # ‚Ñπ 4,969 more rows #> # ‚Ñπ 4 more variables: t_stat <dbl>, p.value <dbl>, fdr <dbl>, #> #   rank <int>"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/stat-two-group-comparison.html","id":"visualize-with-ggplot2","dir":"Articles","previous_headings":"Compare Two Groups (M/F)","what":"Visualize with ggplot2()","title":"Two-Group Comparison","text":"Create plotting tibble ‚Äúlong‚Äù format ggplot2:","code":"target_map <- head(t_tests, 12L) |>     # mapping table   select(AptName, Target)               # SeqId -> Target  plot_tbl <- example_data |>             # plot non-center/scale data   filter(SampleType == \"Sample\") |>     # rm control samples   drop_na(Sex) |>                       # rm NAs if present   log10() |>                            # log10-transform for plotting   select(Sex, target_map$AptName) |>    # top 12 analytes   pivot_longer(cols = -Sex, names_to = \"AptName\", values_to = \"RFU\") |>   left_join(target_map, by = \"AptName\") |>   # order factor levels by 't_tests' rank to order plots below   mutate(Target = factor(Target, levels = target_map$Target))  plot_tbl #> # A tibble: 2,040 √ó 4 #>    Sex   AptName        RFU Target                                      #>    <chr> <chr>        <dbl> <fct>                                       #>  1 F     seq.8468.19   2.54 Prostate-specific antigen                   #>  2 F     seq.6580.29   4.06 Pregnancy zone protein                      #>  3 F     seq.7926.13   2.66 Kunitz-type protease inhibitor 3            #>  4 F     seq.3032.11   3.26 Follicle stimulating hormone                #>  5 F     seq.16892.23  3.44 Ectonucleotide pyrophosphatase/phosphodies‚Ä¶ #>  6 F     seq.9282.12   2.94 Cysteine-rich secretory protein 2           #>  7 F     seq.5763.67   2.52 Beta-defensin 104                           #>  8 F     seq.2953.31   2.99 Luteinizing hormone                         #>  9 F     seq.7139.14   3.43 SLIT and NTRK-like protein 4                #> 10 F     seq.4914.10   3.93 Human Chorionic Gonadotropin                #> # ‚Ñπ 2,030 more rows plot_tbl |>   ggplot(aes(x = Sex, y = RFU, fill = Sex)) +   geom_boxplot(alpha = 0.5, outlier.shape = NA) +   scale_fill_manual(values = c(\"#24135F\", \"#00A499\")) +   geom_jitter(shape = 16, width = 0.1, alpha = 0.5) +   facet_wrap(~ Target, ncol = 3) +   ggtitle(\"Boxplots of Top Analytes by t-test\") +   labs(y = \"log10(RFU)\") +   theme(plot.title = element_text(size = 21, face = \"bold\"),         axis.title.x = element_text(size = 14),         axis.title.y = element_text(size = 14),         legend.position = \"top\"   )"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"loading-an-adat","dir":"Articles","previous_headings":"","what":"Loading an ADAT","title":"Loading and Wrangling 'SomaScan'","text":"Load ADAT text file R memory :","code":"# path to *.adat file # replace with your file path adat_path <- system.file(\"extdata\", \"example_data10.adat\",                          package = \"SomaDataIO\", mustWork = TRUE) adat_path #> [1] \"/Users/runner/work/_temp/Library/SomaDataIO/extdata/example_data10.adat\"  my_adat <- read_adat(adat_path)  # class test is.soma_adat(my_adat) #> [1] TRUE  # S3 print method forwards -> tibble my_adat #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 10 #>      Columns              5318 #>      Clinical Data        34 #>      Features             5284 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, UniProt, #> ‚Ñπ EntrezGeneID, EntrezGeneSymbol, Organism, Units, Type, Dilution, #> ‚Ñπ PlateScale_Reference, CalReference, Cal_Example_Adat_Set001, #> ‚Ñπ ColCheck, CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, CalQcRatio_Example_Adat_Set002_170255, #> ‚Ñπ Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 10 √ó 5,319 #>    row_names      PlateId  PlateRunDate ScannerID PlatePosition SlideId Subarray #>    <chr>          <chr>    <chr>        <chr>     <chr>           <dbl>    <dbl> #>  1 258495800012_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11        3 #>  2 258495800004_7 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11        7 #>  3 258495800010_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11        8 #>  4 258495800003_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H6            2.58e11        4 #>  5 258495800009_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H5            2.58e11        4 #>  6 258495800012_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H4            2.58e11        8 #>  7 258495800001_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H3            2.58e11        3 #>  8 258495800004_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H2            2.58e11        8 #>  9 258495800001_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H12           2.58e11        8 #> 10 258495800004_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H11           2.58e11        3 #> # ‚Ñπ 5,312 more variables: SampleId <chr>, SampleType <chr>, #> #   PercentDilution <int>, SampleMatrix <chr>, Barcode <lgl>, Barcode2d <chr>, #> #   SampleName <lgl>, SampleNotes <lgl>, AliquotingNotes <lgl>, #> #   SampleDescription <chr>, ‚Ä¶ #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  print(my_adat, show_header = TRUE)  # if simply wish to see Header info #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 10 #>      Columns              5318 #>      Clinical Data        34 #>      Features             5284 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, UniProt, #> ‚Ñπ EntrezGeneID, EntrezGeneSymbol, Organism, Units, Type, Dilution, #> ‚Ñπ PlateScale_Reference, CalReference, Cal_Example_Adat_Set001, #> ‚Ñπ ColCheck, CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, CalQcRatio_Example_Adat_Set002_170255, #> ‚Ñπ Dilution2 #> ‚îÄ‚îÄ Header Data ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 35 √ó 2 #>    Key                  Value                                                    #>    <chr>                <chr>                                                    #>  1 AdatId               GID-1234-56-789-abcdef                                   #>  2 Version              1.2                                                      #>  3 AssayType            PharmaServices                                           #>  4 AssayVersion         V4                                                       #>  5 AssayRobot           Fluent 1 L-307                                           #>  6 Legal                Experiment details and data have been processed to prot‚Ä¶ #>  7 CreatedBy            PharmaServices                                           #>  8 CreatedDate          2020-07-24                                               #>  9 EnteredBy            Technician1                                              #> 10 ExpDate              2020-06-18, 2020-07-20                                   #> 11 GeneratedBy          Px (Build:  : ), Canopy_0.1.1                            #> 12 RunNotes             2 columns ('Age' and 'Sex') have been added to this ADA‚Ä¶ #> 13 ProcessSteps         Raw RFU, Hyb Normalization, medNormInt (SampleId), plat‚Ä¶ #> 14 ProteinEffectiveDate 2019-08-06                                               #> 15 StudyMatrix          EDTA Plasma                                              #> # ‚Ñπ 20 more rows #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # S3 summary method # View Target and summary statistics seqs <- tail(names(my_adat), 3L) summary(my_adat[, seqs]) #>  seq.9995.6          seq.9997.12         seq.9999.1           #>  Target : DUT        Target : UBXN4      Target : IRF6        #>  Min    :  1138      Min    :  4427      Min    :  851.9      #>  1Q     :  1535      1Q     : 12423      1Q     : 1306.6      #>  Median :  3861      Median : 20292      Median : 2847.9      #>  Mean   :  5189      Mean   : 26058      Mean   : 3206.0      #>  3Q     :  9343      3Q     : 41184      3Q     : 4641.7      #>  Max    : 10171      Max    : 50390      Max    : 6978.9      #>  sd     :  3983      sd     : 17420      sd     : 2164.4      #>  MAD    :  3938      MAD    : 19516      MAD    : 2387.2      #>  IQR    :  7807      IQR    : 28761      IQR    : 3335.1  # Summarize by Sex my_adat[, seqs] |>   split(my_adat$Sex) |>   lapply(summary) #> $F #>  seq.9995.6          seq.9997.12         seq.9999.1           #>  Target : DUT        Target : UBXN4      Target : IRF6        #>  Min    :  2104      Min    : 13742      Min    : 1253        #>  1Q     :  3898      1Q     : 20719      1Q     : 2190        #>  Median :  9211      Median : 40743      Median : 4546        #>  Mean   :  7104      Mean   : 34683      Mean   : 4048        #>  3Q     :  9652      3Q     : 46513      3Q     : 5307        #>  Max    : 10171      Max    : 50390      Max    : 6979        #>  sd     :  3851      sd     : 16464      sd     : 2268        #>  MAD    :  1082      MAD    : 12636      MAD    : 2508        #>  IQR    :  5754      IQR    : 25794      IQR    : 3116        #>  #> $M #>  seq.9995.6          seq.9997.12         seq.9999.1           #>  Target : DUT        Target : UBXN4      Target : IRF6        #>  Min    : 1137.7     Min    :  9829      Min    : 1222.8      #>  1Q     : 1241.7     1Q     : 10906      1Q     : 1482.1      #>  Median : 1345.6     Median : 11983      Median : 1741.4      #>  Mean   : 2663.8     Mean   : 16019      Mean   : 2306.2      #>  3Q     : 3426.8     3Q     : 19114      3Q     : 2847.9      #>  Max    : 5508.0     Max    : 26246      Max    : 3954.3      #>  sd     : 2465.4     sd     :  8922      sd     : 1450.7      #>  MAD    :  308.2     MAD    :  3193      MAD    :  768.9      #>  IQR    : 2185.2     IQR    :  8208      IQR    : 1365.8"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"debugging","dir":"Articles","previous_headings":"Loading an ADAT","what":"Debugging","title":"Loading and Wrangling 'SomaScan'","text":"Occasionally ‚Äúproblematic‚Äù ADATs can difficult parse. purpose convenient debug = TRUE argument read_adat() allows inspect file specifications R thinks exist file. can useful identifying //parse failure occurred. recommended view output compare physical text file identify misidentified mismatched landmarks:","code":"read_adat(adat_path, debug = TRUE) #> ‚ïê‚ïê Parsing Specs ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> 45 #> ‚Ä¢ Table Begin #> 46 #> ‚Ä¢ Col.Meta Start #> 35 #> ‚Ä¢ Col.Meta Shift #> 66 #> ‚Ä¢ Header Row #> 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, and #> 65 #> ‚Ä¢ Rows of the Col Meta       #> ‚îÄ‚îÄ Col Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 20 ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, UniProt, #> ‚Ñπ EntrezGeneID, EntrezGeneSymbol, Organism, Units, Type, Dilution, #> ‚Ñπ PlateScale_Reference, CalReference, Cal_Example_Adat_Set001, #> ‚Ñπ ColCheck, CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, CalQcRatio_Example_Adat_Set002_170255 #> ‚îÄ‚îÄ Row Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 34 ‚îÄ‚îÄ #> ‚Ñπ PlateId, PlateRunDate, ScannerID, PlatePosition, SlideId, Subarray, #> ‚Ñπ SampleId, SampleType, PercentDilution, SampleMatrix, Barcode, #> ‚Ñπ Barcode2d, SampleName, SampleNotes, AliquotingNotes, #> ‚Ñπ SampleDescription, AssayNotes, TimePoint, ExtIdentifier, SsfExtId, #> ‚Ñπ SampleGroup, SiteId, TubeUniqueID, CLI, HybControlNormScale, #> ‚Ñπ RowCheck, NormScale_20, NormScale_0_005, NormScale_0_5, #> ‚Ñπ ANMLFractionUsed_20, ANMLFractionUsed_0_005, ANMLFractionUsed_0_5, #> ‚Ñπ Age, Sex #> ‚îÄ‚îÄ Empty Strings Detected in Col.Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ! ‚îÄ‚îÄ #> ‚Üí Visually inspect the following Col.Meta rows: \"TargetFullName\", \"UniProt\", \"EntrezGeneID\", and \"EntrezGeneSymbol\" #> ‚Ñπ They may be missing in: #> \"Spuriomers\" and \"HybControls\" #> NULL #> ‚Üí This is non-critical in ADATs with new \"seq.1234.56\" format. #> ‚ïê‚ïê Parse Diagnostic Complete ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"attributes-contain-file-and-feature-information","dir":"Articles","previous_headings":"Wrangling","what":"Attributes Contain File and Feature Information","title":"Loading and Wrangling 'SomaScan'","text":"","code":"names(attributes(my_adat)) #> [1] \"names\"       \"class\"       \"row.names\"   \"Header.Meta\" \"Col.Meta\"    #> [6] \"file_specs\"  \"row_meta\"  # The `Col.Meta` attribute contains # target annotation information attr(my_adat, \"Col.Meta\") #> # A tibble: 5,284 √ó 21 #>    SeqId     SeqIdVersion SomaId   TargetFullName    Target UniProt EntrezGeneID #>    <chr>            <dbl> <chr>    <chr>             <chr>  <chr>   <chr>        #>  1 10000-28             3 SL019233 Beta-crystallin ‚Ä¶ CRBB2  P43320  \"1415\"       #>  2 10001-7              3 SL002564 RAF proto-oncoge‚Ä¶ c-Raf  P04049  \"5894\"       #>  3 10003-15             3 SL019245 Zinc finger prot‚Ä¶ ZNF41  P51814  \"7592\"       #>  4 10006-25             3 SL019228 ETS domain-conta‚Ä¶ ELK1   P19419  \"2002\"       #>  5 10008-43             3 SL019234 Guanylyl cyclase‚Ä¶ GUC1A  P43080  \"2978\"       #>  6 10011-65             3 SL019246 Inositol polypho‚Ä¶ OCRL   Q01968  \"4952\"       #>  7 10012-5              3 SL014669 SAM pointed doma‚Ä¶ SPDEF  O95238  \"25803\"      #>  8 10013-34             3 SL025418 Fc_MOUSE          Fc_MO‚Ä¶ Q99LC4  \"\"           #>  9 10014-31             3 SL007803 Zinc finger prot‚Ä¶ SLUG   O43623  \"6591\"       #> 10 10015-119            3 SL014924 Voltage-gated po‚Ä¶ KCAB2  Q13303  \"8514\"       #> # ‚Ñπ 5,274 more rows #> # ‚Ñπ 14 more variables: EntrezGeneSymbol <chr>, Organism <chr>, Units <chr>, #> #   Type <chr>, Dilution <chr>, PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, QcReference_170255 <dbl>, #> #   Cal_Example_Adat_Set002 <dbl>, CalQcRatio_Example_Adat_Set002_170255 <dbl>, #> #   Dilution2 <dbl>"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"analyte-features-seq-xxxx-xx","dir":"Articles","previous_headings":"Wrangling","what":"Analyte Features (seq.xxxx.xx)","title":"Loading and Wrangling 'SomaScan'","text":"","code":"getAnalytes(my_adat) |> head(20L)    # first 20 analytes; see AptName above #>  [1] \"seq.10000.28\"  \"seq.10001.7\"   \"seq.10003.15\"  \"seq.10006.25\"  #>  [5] \"seq.10008.43\"  \"seq.10011.65\"  \"seq.10012.5\"   \"seq.10013.34\"  #>  [9] \"seq.10014.31\"  \"seq.10015.119\" \"seq.10021.1\"   \"seq.10022.207\" #> [13] \"seq.10023.32\"  \"seq.10024.44\"  \"seq.10030.8\"   \"seq.10034.16\"  #> [17] \"seq.10035.6\"   \"seq.10036.201\" \"seq.10037.98\"  \"seq.10040.63\" getAnalytes(my_adat) |> length()     # how many analytes #> [1] 5284 getAnalytes(my_adat, n = TRUE)       # the `n` argument; no. analytes #> [1] 5284"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"feature-data","dir":"Articles","previous_headings":"Wrangling","what":"Feature Data","title":"Loading and Wrangling 'SomaScan'","text":"getAnalyteInfo() function creates lookup table links analyte feature names soma_adat object annotation data ?Col.Meta via common index-key, AptName, column 1:","code":"getAnalyteInfo(my_adat) #> # A tibble: 5,284 √ó 22 #>    AptName  SeqId SeqIdVersion SomaId TargetFullName Target UniProt EntrezGeneID #>    <chr>    <chr>        <dbl> <chr>  <chr>          <chr>  <chr>   <chr>        #>  1 seq.100‚Ä¶ 1000‚Ä¶            3 SL019‚Ä¶ Beta-crystall‚Ä¶ CRBB2  P43320  \"1415\"       #>  2 seq.100‚Ä¶ 1000‚Ä¶            3 SL002‚Ä¶ RAF proto-onc‚Ä¶ c-Raf  P04049  \"5894\"       #>  3 seq.100‚Ä¶ 1000‚Ä¶            3 SL019‚Ä¶ Zinc finger p‚Ä¶ ZNF41  P51814  \"7592\"       #>  4 seq.100‚Ä¶ 1000‚Ä¶            3 SL019‚Ä¶ ETS domain-co‚Ä¶ ELK1   P19419  \"2002\"       #>  5 seq.100‚Ä¶ 1000‚Ä¶            3 SL019‚Ä¶ Guanylyl cycl‚Ä¶ GUC1A  P43080  \"2978\"       #>  6 seq.100‚Ä¶ 1001‚Ä¶            3 SL019‚Ä¶ Inositol poly‚Ä¶ OCRL   Q01968  \"4952\"       #>  7 seq.100‚Ä¶ 1001‚Ä¶            3 SL014‚Ä¶ SAM pointed d‚Ä¶ SPDEF  O95238  \"25803\"      #>  8 seq.100‚Ä¶ 1001‚Ä¶            3 SL025‚Ä¶ Fc_MOUSE       Fc_MO‚Ä¶ Q99LC4  \"\"           #>  9 seq.100‚Ä¶ 1001‚Ä¶            3 SL007‚Ä¶ Zinc finger p‚Ä¶ SLUG   O43623  \"6591\"       #> 10 seq.100‚Ä¶ 1001‚Ä¶            3 SL014‚Ä¶ Voltage-gated‚Ä¶ KCAB2  Q13303  \"8514\"       #> # ‚Ñπ 5,274 more rows #> # ‚Ñπ 14 more variables: EntrezGeneSymbol <chr>, Organism <chr>, Units <chr>, #> #   Type <chr>, Dilution <chr>, PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, QcReference_170255 <dbl>, #> #   Cal_Example_Adat_Set002 <dbl>, CalQcRatio_Example_Adat_Set002_170255 <dbl>, #> #   Dilution2 <dbl>"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"clinical-data","dir":"Articles","previous_headings":"Wrangling","what":"Clinical Data","title":"Loading and Wrangling 'SomaScan'","text":"","code":"getMeta(my_adat)             # clinical meta data for each sample #>  [1] \"PlateId\"                \"PlateRunDate\"           \"ScannerID\"              #>  [4] \"PlatePosition\"          \"SlideId\"                \"Subarray\"               #>  [7] \"SampleId\"               \"SampleType\"             \"PercentDilution\"        #> [10] \"SampleMatrix\"           \"Barcode\"                \"Barcode2d\"              #> [13] \"SampleName\"             \"SampleNotes\"            \"AliquotingNotes\"        #> [16] \"SampleDescription\"      \"AssayNotes\"             \"TimePoint\"              #> [19] \"ExtIdentifier\"          \"SsfExtId\"               \"SampleGroup\"            #> [22] \"SiteId\"                 \"TubeUniqueID\"           \"CLI\"                    #> [25] \"HybControlNormScale\"    \"RowCheck\"               \"NormScale_20\"           #> [28] \"NormScale_0_005\"        \"NormScale_0_5\"          \"ANMLFractionUsed_20\"    #> [31] \"ANMLFractionUsed_0_005\" \"ANMLFractionUsed_0_5\"   \"Age\"                    #> [34] \"Sex\" getMeta(my_adat, n = TRUE)   # also an `n` argument #> [1] 34"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"adat-structure","dir":"Articles","previous_headings":"Wrangling","what":"ADAT structure","title":"Loading and Wrangling 'SomaScan'","text":"soma_adat object also contains specific structure useful users. Please also see ?colmeta ?annotations details fields.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"group-generics","dir":"Articles","previous_headings":"Wrangling","what":"Group Generics","title":"Loading and Wrangling 'SomaScan'","text":"may perform basic mathematical transformations feature data special soma_adat S3 methods (see ?groupGenerics):","code":"head(my_adat$seq.2429.27) #> [1]  8642.3 12472.1 14627.7 13579.8  8938.8  6738.8  logData <- log10(my_adat)    # a typical log10() transform head(logData$seq.2429.27) #> [1] 3.936629 4.095940 4.165176 4.132893 3.951279 3.828583  roundData <- round(my_adat) head(roundData$seq.2429.27) #> [1]  8642 12472 14628 13580  8939  6739  sqData <- sqrt(my_adat) head(sqData$seq.2429.27) #> [1]  92.96397 111.67856 120.94503 116.53240  94.54523  82.09019  antilog(1:4) #> [1]    10   100  1000 10000  sum(my_adat < 100)  # low signalling values #> [1] 693  all.equal(my_adat, sqrt(my_adat^2)) #> [1] TRUE  all.equal(my_adat, antilog(log10(my_adat))) #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"math-generics","dir":"Articles","previous_headings":"Wrangling > Group Generics","what":"Math Generics","title":"Loading and Wrangling 'SomaScan'","text":"","code":"getGroupMembers(\"Math\") #>  [1] \"abs\"      \"sign\"     \"sqrt\"     \"ceiling\"  \"floor\"    \"trunc\"    #>  [7] \"cummax\"   \"cummin\"   \"cumprod\"  \"cumsum\"   \"exp\"      \"expm1\"    #> [13] \"log\"      \"log10\"    \"log2\"     \"log1p\"    \"cos\"      \"cosh\"     #> [19] \"sin\"      \"sinh\"     \"tan\"      \"tanh\"     \"acos\"     \"acosh\"    #> [25] \"asin\"     \"asinh\"    \"atan\"     \"atanh\"    \"cospi\"    \"sinpi\"    #> [31] \"tanpi\"    \"gamma\"    \"lgamma\"   \"digamma\"  \"trigamma\"  getGroupMembers(\"Compare\") #> [1] \"==\" \">\"  \"<\"  \"!=\" \"<=\" \">=\"  getGroupMembers(\"Arith\") #> [1] \"+\"   \"-\"   \"*\"   \"^\"   \"%%\"  \"%/%\" \"/\"  getGroupMembers(\"Summary\") #> [1] \"max\"   \"min\"   \"range\" \"prod\"  \"sum\"   \"any\"   \"all\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"full-complement-of-dplyr-s3-methods","dir":"Articles","previous_headings":"Wrangling","what":"Full Complement of dplyr S3 Methods","title":"Loading and Wrangling 'SomaScan'","text":"soma_adat also comes numerous class specific methods popular dplyr generics make working soma_adat objects simpler familiar standard toolkit:","code":"dim(my_adat) #> [1]   10 5318 males <- dplyr::filter(my_adat, Sex == \"M\") dim(males) #> [1]    3 5318  males |>   dplyr::select(SampleType, SampleMatrix, starts_with(\"NormScale\")) #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 3 #>      Columns              5 #>      Clinical Data        5 #>      Features             0 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, UniProt, #> ‚Ñπ EntrezGeneID, EntrezGeneSymbol, Organism, Units, Type, Dilution, #> ‚Ñπ PlateScale_Reference, CalReference, Cal_Example_Adat_Set001, #> ‚Ñπ ColCheck, CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, CalQcRatio_Example_Adat_Set002_170255, #> ‚Ñπ Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 3 √ó 6 #>   row_names   SampleType SampleMatrix NormScale_20 NormScale_0_005 NormScale_0_5 #>   <chr>       <chr>      <chr>               <dbl>           <dbl>         <dbl> #> 1 2584958000‚Ä¶ Sample     Plasma-PPT          0.984           1.03          0.915 #> 2 2584958000‚Ä¶ Sample     Plasma-PPT          1.08            0.946         0.912 #> 3 2584958000‚Ä¶ Sample     Plasma-PPT          0.921           1.13          0.953 #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"merging-sample-annotation-data","dir":"Articles","previous_headings":"Wrangling > Full Complement of dplyr S3 Methods","what":"Merging Sample Annotation Data","title":"Loading and Wrangling 'SomaScan'","text":"example_data object includes sample annotation data built-, variables Age Sex included clinical samples, practice ADAT files generally clinical sample annotation data fields included. merge sample annotation data existing soma_adat class object, use left_join() method. , joining ex_clin_data tibble object adds two additional clinical variables, smoking_status alcohol_use:","code":"# `clin_path` should be the elaborated path and file name of the *.csv or # similar file to be loaded into the R workspace from your local file system # (e.g. clin_path = \"PATH_TO_CLIN/clin_data.csv\") # clin_data <- readr::read_csv(clin_path)  merged_adat <- my_adat |>    dplyr::left_join(ex_clin_data, by = \"SampleId\")   merged_adat |>    dplyr::select(SampleId, Age, Sex, smoking_status, alcohol_use) |>    head(n = 3) #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 3 #>      Columns              5 #>      Clinical Data        5 #>      Features             0 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, UniProt, #> ‚Ñπ EntrezGeneID, EntrezGeneSymbol, Organism, Units, Type, Dilution, #> ‚Ñπ PlateScale_Reference, CalReference, Cal_Example_Adat_Set001, #> ‚Ñπ ColCheck, CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, CalQcRatio_Example_Adat_Set002_170255, #> ‚Ñπ Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 3 √ó 6 #>   row_names      SampleId   Age Sex   smoking_status alcohol_use #>   <chr>          <chr>    <int> <chr> <chr>          <chr>       #> 1 258495800012_3 1           76 F     Never          Yes         #> 2 258495800004_7 2           55 F     Never          Yes         #> 3 258495800010_8 3           47 M     Never          No          #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"available-s3-methods-soma_adat","dir":"Articles","previous_headings":"Wrangling","what":"Available S3 Methods soma_adat","title":"Loading and Wrangling 'SomaScan'","text":"","code":"# see full complement of `soma_adat` methods methods(class = \"soma_adat\") #>  [1] [              [[             [[<-           [<-            ==             #>  [6] $              $<-            anti_join      arrange        count          #> [11] filter         full_join      getAdatVersion getAnalytes    getMeta        #> [16] group_by       inner_join     is_seqFormat   left_join      Math           #> [21] median         merge          mutate         Ops            print          #> [26] rename         right_join     row.names<-    sample_frac    sample_n       #> [31] semi_join      separate       slice_sample   slice          summary        #> [36] Summary        transform      ungroup        unite          #> see '?methods' for accessing help and source code"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-loading-and-wrangling.html","id":"writing-a-soma_adat","dir":"Articles","previous_headings":"","what":"Writing a soma_adat","title":"Loading and Wrangling 'SomaScan'","text":"","code":"is_intact_attr(my_adat)   # MUST have intact attrs #> [1] TRUE  write_adat(my_adat, file = tempfile(\"my-adat-\", fileext = \".adat\")) #> ‚úî ADAT passed all checks and traps. #> ‚úî ADAT written to: \"/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T//RtmpcOBaet/my-adat-1dab2ded79cf.adat\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-safely-map-values.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Safely Map Values via dplyr::left_join()","text":"Mapping values one column specific values another (new) column data frame common task data science. safely often struggle. existing methods tidyverse useful, opinion come drawbacks: can clunky implement -> LHS/RHS syntax difficult () remember complex syntax -> difficult remember; overkill mapping purposes see safe way map (re-code) values existing column new column.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-safely-map-values.html","id":"mapping-example","dir":"Articles","previous_headings":"Introduction","what":"Mapping Example","title":"Safely Map Values via dplyr::left_join()","text":"","code":"# wish to map values of 'x' df <- withr::with_seed(101, {   data.frame(id    = 1:10L,              value = rnorm(10),              x     = sample(letters[1:3L], 10, replace = TRUE)   ) }) df #>    id      value x #> 1   1 -0.3260365 b #> 2   2  0.5524619 c #> 3   3 -0.6749438 c #> 4   4  0.2143595 a #> 5   5  0.3107692 c #> 6   6  1.1739663 a #> 7   7  0.6187899 b #> 8   8 -0.1127343 a #> 9   9  0.9170283 a #> 10 10 -0.2232594 c  # create a [n x 2] lookup-table (aka hash map) # n = no. values to map # x = existing values to map # new_x = new mapped values for each `x` map <- data.frame(x = letters[1:4L], new_x = c(\"cat\", \"dog\", \"bird\", \"turtle\")) map #>   x  new_x #> 1 a    cat #> 2 b    dog #> 3 c   bird #> 4 d turtle  # use `dplyr::left_join()` # note: 'turtle' is absent because `d` is not in `df$x` (thus ignored) dplyr::left_join(df, map) #> Joining with `by = join_by(x)` #>    id      value x new_x #> 1   1 -0.3260365 b   dog #> 2   2  0.5524619 c  bird #> 3   3 -0.6749438 c  bird #> 4   4  0.2143595 a   cat #> 5   5  0.3107692 c  bird #> 6   6  1.1739663 a   cat #> 7   7  0.6187899 b   dog #> 8   8 -0.1127343 a   cat #> 9   9  0.9170283 a   cat #> 10 10 -0.2232594 c  bird"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-safely-map-values.html","id":"un-mapped-values---nas","dir":"Articles","previous_headings":"Introduction","what":"Un-mapped Values -> NAs","title":"Safely Map Values via dplyr::left_join()","text":"Notice b maps NA. mapping object now lacks mapping b (compare row 2 ). Using slightly different syntax via tibble::enframe().","code":"# note: `b` is missing in the map map_vec <- c(a = \"cat\", c = \"bird\", d = \"turtle\") map2 <- tibble::enframe(map_vec, name = \"x\", value = \"new_x\") map2 #> # A tibble: 3 √ó 2 #>   x     new_x  #>   <chr> <chr>  #> 1 a     cat    #> 2 c     bird   #> 3 d     turtle  # note: un-mapped values generate NAs: `b -> NA` dplyr::left_join(df, map2, by = \"x\") #>    id      value x new_x #> 1   1 -0.3260365 b  <NA> #> 2   2  0.5524619 c  bird #> 3   3 -0.6749438 c  bird #> 4   4  0.2143595 a   cat #> 5   5  0.3107692 c  bird #> 6   6  1.1739663 a   cat #> 7   7  0.6187899 b  <NA> #> 8   8 -0.1127343 a   cat #> 9   9  0.9170283 a   cat #> 10 10 -0.2232594 c  bird"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-safely-rename-df.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Safely Rename Data Frames","text":"Renaming variables/features data frame (tibble) common task data science. safely often struggle. can achieved safely via dplyr::rename() function via 2 steps: Set mapping either named vector Apply dplyr::rename() function via !!! syntax Alternatively, roll--rename() function Note: entries mapping (.e.¬†key) object must present names data frame object.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-safely-rename-df.html","id":"example-with-mtcars","dir":"Articles","previous_headings":"Introduction","what":"Example with mtcars","title":"Safely Rename Data Frames","text":"","code":"# Create map/key of the names to map key <- c(MPG = \"mpg\", CARB = \"carb\")   # named vector key #>    MPG   CARB  #>  \"mpg\" \"carb\"  # rename `mtcars` rename(mtcars, !!! key) |> head() #>                    MPG cyl disp  hp drat    wt  qsec vs am gear CARB #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-safely-rename-df.html","id":"a-somascan-example-example_data","dir":"Articles","previous_headings":"Introduction","what":"A SomaScan example (example_data)","title":"Safely Rename Data Frames","text":"Occasionally might required rename AptNames (seq.1234.56) -> SeqIds (1234-56) analyzing SomaScan data.","code":"getAnalytes(example_data) |>    head() #> [1] \"seq.10000.28\" \"seq.10001.7\"  \"seq.10003.15\" \"seq.10006.25\" #> [5] \"seq.10008.43\" \"seq.10011.65\"  # create map (named vector) key2 <- getAnalytes(example_data)   names(key2) <- getSeqId(key2)     # re-name `seq.XXXX` -> SeqIds key2 <- c(key2, ID = \"SampleId\")  # SampleId -> ID head(key2, 10L) #>        10000-28         10001-7        10003-15        10006-25  #>  \"seq.10000.28\"   \"seq.10001.7\"  \"seq.10003.15\"  \"seq.10006.25\"  #>        10008-43        10011-65         10012-5        10013-34  #>  \"seq.10008.43\"  \"seq.10011.65\"   \"seq.10012.5\"  \"seq.10013.34\"  #>        10014-31       10015-119  #>  \"seq.10014.31\" \"seq.10015.119\"  # rename analytes of `example_data` getAnalytes(example_data) |>   head(10L) #>  [1] \"seq.10000.28\"  \"seq.10001.7\"   \"seq.10003.15\"  \"seq.10006.25\"  #>  [5] \"seq.10008.43\"  \"seq.10011.65\"  \"seq.10012.5\"   \"seq.10013.34\"  #>  [9] \"seq.10014.31\"  \"seq.10015.119\"  new <- rename(example_data, !!! key2)  getAnalytes(new) |>   head(10L) #>  [1] \"10000-28\"  \"10001-7\"   \"10003-15\"  \"10006-25\"  \"10008-43\"  #>  [6] \"10011-65\"  \"10012-5\"   \"10013-34\"  \"10014-31\"  \"10015-119\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-safely-rename-df.html","id":"alternative-to-dplyr","dir":"Articles","previous_headings":"Introduction","what":"Alternative to dplyr","title":"Safely Rename Data Frames","text":"prefer avoid dplyr import/dependency, can achieve similar result similar syntax writing renaming function: Now, similar syntax (use !!!):","code":"rename2 <- function (.data, ...) {   map <- c(...)   loc <- setNames(match(map, names(.data), nomatch = 0L), names(map))   loc <- loc[loc > 0L]   newnames <- names(.data)   newnames[loc] <- names(loc)   setNames(.data, newnames) } # rename `mtcars` in-line rename2(mtcars, MPG = \"mpg\", CARB = \"carb\") |>   head() #>                    MPG cyl disp  hp drat    wt  qsec vs am gear CARB #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1  # rename `mtcars` via named `key` rename2(mtcars, key) |>   head() #>                    MPG cyl disp  hp drat    wt  qsec vs am gear CARB #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-train-test-setup.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Common train-test data setups","text":"machine learning (ML) analyses require random split original data training/test data sets, model fit training data performance evaluated test data set. split proportions can vary, though 80/20 training/test common. often depends number available samples class distribution splits. Among many alternatives, 3 common approaches, equally viable depend analyst‚Äôs weighing pros/cons . recommend one : base R data frame indexing [sample()] [ use dplyr::slice_sample() dplyr::sample_frac() combination dplyr::anti_join() use rsample package (demonstrated)","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-train-test-setup.html","id":"original-raw-data","dir":"Articles","previous_headings":"Introduction","what":"Original Raw Data","title":"Common train-test data setups","text":"analyses, typically start raw original data set must split randomly training test sets.","code":"raw <- SomaDataIO::rn2col(head(mtcars, 10L), \"CarModel\") |>   SomaDataIO::add_rowid(\"id\") |> # set up identifier variable for the join()   tibble::as_tibble() raw #> # A tibble: 10 √ó 13 #>       id CarModel          mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <int> <chr>           <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1     1 Mazda RX4        21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2     2 Mazda RX4 Wag    21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3     3 Datsun 710       22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4     4 Hornet 4 Drive   21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5     5 Hornet Sportab‚Ä¶  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6     6 Valiant          18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7     7 Duster 360       14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8     8 Merc 240D        24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9     9 Merc 230         22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10    10 Merc 280         19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-train-test-setup.html","id":"option-1-sample","dir":"Articles","previous_headings":"Introduction","what":"Option #1: sample()","title":"Common train-test data setups","text":"","code":"n     <- nrow(raw) idx   <- withr::with_seed(1, sample(1:n, floor(n / 2))) # sample random 50% (n = 5) train <- raw[idx, ] test  <- raw[-idx, ] train #> # A tibble: 5 √ó 13 #>      id CarModel         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <int> <chr>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     9 Merc 230        22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 2     4 Hornet 4 Drive  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #> 3     7 Duster 360      14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #> 4     1 Mazda RX4       21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 5     2 Mazda RX4 Wag   21       6  160    110  3.9   2.88  17.0     0     1     4     4  test #> # A tibble: 5 √ó 13 #>      id CarModel           mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <int> <chr>            <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     3 Datsun 710        22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #> 2     5 Hornet Sportabo‚Ä¶  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #> 3     6 Valiant           18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #> 4     8 Merc 240D         24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #> 5    10 Merc 280          19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4"},{"path":"https://somalogic.github.io/SomaDataIO/dev/articles/tips-train-test-setup.html","id":"option-2-anti_join","dir":"Articles","previous_headings":"Introduction","what":"Option #2: anti_join()","title":"Common train-test data setups","text":"","code":"# sample random 50% (n = 5) train <- withr::with_seed(1, dplyr::slice_sample(raw, n = floor(n / 2)))  # or using `dplyr::sample_frac()` # train <- withr::with_seed(1, dplyr::sample_frac(raw, size = 0.5))  # use anti_join() to get the sample setdiff test <- dplyr::anti_join(raw, train, by = \"id\") train #> # A tibble: 5 √ó 13 #>      id CarModel         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <int> <chr>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     9 Merc 230        22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 2     4 Hornet 4 Drive  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #> 3     7 Duster 360      14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #> 4     1 Mazda RX4       21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 5     2 Mazda RX4 Wag   21       6  160    110  3.9   2.88  17.0     0     1     4     4  test #> # A tibble: 5 √ó 13 #>      id CarModel           mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <int> <chr>            <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     3 Datsun 710        22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #> 2     5 Hornet Sportabo‚Ä¶  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #> 3     6 Valiant           18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #> 4     8 Merc 240D         24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #> 5    10 Merc 280          19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4"},{"path":"https://somalogic.github.io/SomaDataIO/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"SomaDataIO proudly brought : Stu Field. Author. Caleb Scheidel. Maintainer. Standard BioTools, Inc.. Copyright holder, funder. üß¨","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Field S (2025). SomaDataIO: Input/Output 'SomaScan' Data. R package version 6.3.0.9000, https://somalogic.github.io/SomaDataIO/.","code":"@Manual{,   title = {SomaDataIO: Input/Output 'SomaScan' Data},   author = {Stu Field},   year = {2025},   note = {R package version 6.3.0.9000},   url = {https://somalogic.github.io/SomaDataIO/}, }"},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"somadataio-","dir":"","previous_headings":"","what":"Input/Output SomaScan Data","title":"Input/Output SomaScan Data","text":"SomaDataIO R package loads exports ‚ÄòSomaScan‚Äô data via Standard BioTools, Inc.¬†structured text file called ADAT (*.adat). package also exports auxiliary functions manipulating, wrangling, extracting relevant information ADAT object memory. Basic familiarity R environment assumed, ability install contributed packages Comprehensive R Archive Network (CRAN). run issues/problems SomaDataIO full documentation recent release can found website articles workflows. issue persists encourage consult issues page , appropriate, submit issue /feature request.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Input/Output SomaScan Data","text":"SomaDataIO package licensed MIT license intended solely research use (‚ÄúRUO‚Äù) purposes. code contained herein may used diagnostic, clinical, therapeutic, commercial purposes.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Input/Output SomaScan Data","text":"easiest way install SomaDataIO install directly CRAN: Alternatively GitHub: installs current ‚Äúdevelopment‚Äù version repository HEAD. install recent release, use: install specific tagged release, use:","code":"install.packages(\"SomaDataIO\") remotes::install_github(\"SomaLogic/SomaDataIO\") remotes::install_github(\"SomaLogic/SomaDataIO@*release\") remotes::install_github(\"SomaLogic/SomaDataIO@v5.3.0\")"},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"package-dependencies","dir":"","previous_headings":"Installation","what":"Package Dependencies","title":"Input/Output SomaScan Data","text":"SomaDataIO package intentionally developed contain limited number dependencies CRAN. makes package stable external software design changes also limits contained feature set. mind, SomaDataIO aims strike balance providing long(er)-term stability limited set features. package dependencies (see also DESCRIPTION file): R (>= 4.1.0) cli dplyr ggplot2 lifecycle magrittr readxl tibble tidyr","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"biobase","dir":"","previous_headings":"Installation","what":"Biobase","title":"Input/Output SomaScan Data","text":"Biobase package suggested, required two functions, pivotExpressionSet() adat2eSet(). Biobase must installed separately Bioconductor entering following R Console: Information Bioconductor can found : https://bioconductor.org/install/","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"Biobase\", version = remotes::bioc_version())"},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"loading","dir":"","previous_headings":"Installation","what":"Loading","title":"Input/Output SomaScan Data","text":"Upon successful installation, load SomaDataIO normal: index available commands:","code":"library(SomaDataIO) library(help = SomaDataIO)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"objects-and-data","dir":"","previous_headings":"","what":"Objects and Data","title":"Input/Output SomaScan Data","text":"SomaDataIO package comes five (5) objects available users run canned examples (analyses). can accessed SomaDataIO attached via library(). : example_data: original ‚ÄòSomaScan‚Äô file (example_data.adat) can found downloaded directly via: within SomaDataIO replaced abbreviated, light-weight version containing first 10 samples: ex_analytes: analyte (feature) variables example_data ex_anno_tbl: annotations table associated example_data ex_target_names: mapping object analyte -> target ex_clin_data: table containing variables SampleId, smoking_status alcohol_use demonstrate merging clinical sample annotation information soma_adat object See also ?SomaScanObjects","code":"wget https://raw.githubusercontent.com/SomaLogic/SomaLogic-Data/main/example_data.adat dir(system.file(\"extdata\", package = \"SomaDataIO\"), full.names = TRUE)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"main-io-features","dir":"","previous_headings":"","what":"Main (I/O) Features","title":"Input/Output SomaScan Data","text":"parse import *.adat text file R session soma_adat object. subset, reorder, list various fields soma_adat object. ?SeqId analyte (feature) matching. dplyr tidyr verb S3 methods soma_adat class. ?rownames helpers break soma_adat attributes. please see article Loading Wrangling ‚ÄòSomaScan‚Äô write soma_adat object *.adat text file.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"loading-an-adat","dir":"","previous_headings":"","what":"Loading an ADAT","title":"Input/Output SomaScan Data","text":"Loading ADAT text file simple using read_adat(): Please see article Loading Wrangling SomaScan details options.","code":"# Note: This `system.file()` command returns a filepath to the `example_data10`  # object in the `SomaDataIO` package adat_path <- system.file(\"extdata\", \"example_data10.adat\",                          package = \"SomaDataIO\", mustWork = TRUE) adat_path #> [1] \"/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library/SomaDataIO/extdata/example_data10.adat\"  # `adat_path` should be the elaborated path and file name of the *.adat file to # be loaded into the R workspace from your local file system # (e.g. adat_path = \"PATH_TO_ADAT/my_adat.adat\") my_adat <- read_adat(file = adat_path)  # test object class is.soma_adat(my_adat) #> [1] TRUE  # S3 print method (forwards -> tibble) my_adat #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 10 #>      Columns              5318 #>      Clinical Data        34 #>      Features             5284 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, UniProt, EntrezGeneID, #> ‚Ñπ EntrezGeneSymbol, Organism, Units, Type, Dilution, PlateScale_Reference, #> ‚Ñπ CalReference, Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 10 √ó 5,319 #>    row_names      PlateId  PlateRunDate ScannerID PlatePosition SlideId Subarray #>    <chr>          <chr>    <chr>        <chr>     <chr>           <dbl>    <dbl> #>  1 258495800012_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11        3 #>  2 258495800004_7 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11        7 #>  3 258495800010_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11        8 #>  4 258495800003_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H6            2.58e11        4 #>  5 258495800009_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H5            2.58e11        4 #>  6 258495800012_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H4            2.58e11        8 #>  7 258495800001_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H3            2.58e11        3 #>  8 258495800004_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H2            2.58e11        8 #>  9 258495800001_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H12           2.58e11        8 #> 10 258495800004_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H11           2.58e11        3 #> # ‚Ñπ 5,312 more variables: SampleId <chr>, SampleType <chr>, #> #   PercentDilution <int>, SampleMatrix <chr>, Barcode <lgl>, Barcode2d <chr>, #> #   SampleName <lgl>, SampleNotes <lgl>, AliquotingNotes <lgl>, #> #   SampleDescription <chr>, ‚Ä¶ #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"wrangling","dir":"","previous_headings":"","what":"Wrangling","title":"Input/Output SomaScan Data","text":"soma_adat class comes numerous class-specific S3 methods popular dplyr tidyr generics.","code":"# see full complement of `soma_adat` methods methods(class = \"soma_adat\") #>  [1] [              [[             [[<-           [<-            ==             #>  [6] $              $<-            anti_join      arrange        count          #> [11] filter         full_join      getAdatVersion getAnalytes    getMeta        #> [16] group_by       inner_join     is_seqFormat   left_join      Math           #> [21] median         merge          mutate         Ops            print          #> [26] rename         right_join     row.names<-    sample_frac    sample_n       #> [31] semi_join      separate       slice_sample   slice          summary        #> [36] Summary        transform      ungroup        unite          #> see '?methods' for accessing help and source code"},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"merging-sample-annotation-data","dir":"","previous_headings":"Wrangling","what":"Merging Sample Annotation Data","title":"Input/Output SomaScan Data","text":"example_data object includes sample annotation data built-, variables Age Sex included clinical samples, practice ADAT files generally clinical sample annotation data fields included. merge sample annotation data existing soma_adat class object, use left_join() method. , joining ex_clin_data object adds two additional clinical variables, smoking_status alcohol_use: Please see article Loading Wrangling SomaScan details available soma_adat methods.","code":"# `clin_path` should be the elaborated path and file name of the *.csv or # similar file to be loaded into the R workspace from your local file system # (e.g. clin_path = \"PATH_TO_CLIN/clin_data.csv\") # clin_data <- readr::read_csv(clin_path)  merged_adat <- my_adat |>    dplyr::left_join(ex_clin_data, by = \"SampleId\")   merged_adat |>    dplyr::select(SampleId, Age, Sex, smoking_status, alcohol_use) |>    head(n = 3) #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 3 #>      Columns              5 #>      Clinical Data        5 #>      Features             0 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, UniProt, EntrezGeneID, #> ‚Ñπ EntrezGeneSymbol, Organism, Units, Type, Dilution, PlateScale_Reference, #> ‚Ñπ CalReference, Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 3 √ó 6 #>   row_names      SampleId   Age Sex   smoking_status alcohol_use #>   <chr>          <chr>    <int> <chr> <chr>          <chr>       #> 1 258495800012_3 1           76 F     Never          Yes         #> 2 258495800004_7 2           55 F     Never          Yes         #> 3 258495800010_8 3           47 M     Never          No          #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"adat-structure","dir":"","previous_headings":"","what":"ADAT structure","title":"Input/Output SomaScan Data","text":"soma_adat object also contains specific structure useful users. Please also see ?colmeta ?annotations details fields.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"typical-somascan-analysis","dir":"","previous_headings":"","what":"Typical ‚ÄòSomaScan‚Äô Analysis","title":"Input/Output SomaScan Data","text":"section now lives individual package articles. detail please see: see stats::t.test() see workflow: Two-Group Comparison see stats::aov() see workflow: ANOVA Three-Group Analysis see stats::glm() see workflow: Binary Classification see stats::lm() see workflow: Linear Regression Note , effort reduce package size dependencies, articles workflows accessible via SomaDataIO pkgdown website, included installed package.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/index.html","id":"mit-license","dir":"","previous_headings":"","what":"MIT LICENSE","title":"Input/Output SomaScan Data","text":"LICENSE https://choosealicense.com/licenses/mit/ https://www.tldrlegal.com/license/mit-license/ ‚ÄúSomaDataIO‚Äù ‚ÄúSomaLogic‚Äù trademarks owned Standard BioTools, Inc.¬†license hereby granted trademarks purposes identifying origin source Software.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/Col.Meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyte Annotations, Col.Meta, and Row Info ‚Äî Col.Meta","title":"Analyte Annotations, Col.Meta, and Row Info ‚Äî Col.Meta","text":"standard SomaLogic ADAT, section information sits directly measurement data (RFU data matrix) column meta data (Col.Meta), contains detailed information annotations analytes, SeqId()s, targets. See section information available fields descriptions. Use getAnalyteInfo() obtain object containing information programmatic analyses, use getMeta() obtain column names representing row-specific meta data samples (see section ).","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/Col.Meta.html","id":"col-meta-analyte-annotations-","dir":"Reference","previous_headings":"","what":"Col Meta (Analyte Annotations)","title":"Analyte Annotations, Col.Meta, and Row Info ‚Äî Col.Meta","text":"Information describing analytes found data matrix standard SomaLogic ADAT. information may consist following:","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/Col.Meta.html","id":"row-meta-sample-annotations-","dir":"Reference","previous_headings":"","what":"Row Meta (Sample Annotations)","title":"Analyte Annotations, Col.Meta, and Row Info ‚Äî Col.Meta","text":"Information describing samples typically found left data matrix standard SomaLogic ADAT. information may consist clinical information provided client, run-specific diagnostic information included assay quality control. examples may present section:","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/Col.Meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyte Annotations, Col.Meta, and Row Info ‚Äî Col.Meta","text":"","code":"# Annotations/Col.Meta tbl <- getAnalyteInfo(example_data) tbl #> # A tibble: 5,284 √ó 22 #>    AptName      SeqId SeqIdVersion SomaId TargetFullName Target UniProt #>    <chr>        <chr>        <dbl> <chr>  <chr>          <chr>  <chr>   #>  1 seq.10000.28 1000‚Ä¶            3 SL019‚Ä¶ Beta-crystall‚Ä¶ CRBB2  P43320  #>  2 seq.10001.7  1000‚Ä¶            3 SL002‚Ä¶ RAF proto-onc‚Ä¶ c-Raf  P04049  #>  3 seq.10003.15 1000‚Ä¶            3 SL019‚Ä¶ Zinc finger p‚Ä¶ ZNF41  P51814  #>  4 seq.10006.25 1000‚Ä¶            3 SL019‚Ä¶ ETS domain-co‚Ä¶ ELK1   P19419  #>  5 seq.10008.43 1000‚Ä¶            3 SL019‚Ä¶ Guanylyl cycl‚Ä¶ GUC1A  P43080  #>  6 seq.10011.65 1001‚Ä¶            3 SL019‚Ä¶ Inositol poly‚Ä¶ OCRL   Q01968  #>  7 seq.10012.5  1001‚Ä¶            3 SL014‚Ä¶ SAM pointed d‚Ä¶ SPDEF  O95238  #>  8 seq.10013.34 1001‚Ä¶            3 SL025‚Ä¶ Fc_MOUSE       Fc_MO‚Ä¶ Q99LC4  #>  9 seq.10014.31 1001‚Ä¶            3 SL007‚Ä¶ Zinc finger p‚Ä¶ SLUG   O43623  #> 10 seq.10015.1‚Ä¶ 1001‚Ä¶            3 SL014‚Ä¶ Voltage-gated‚Ä¶ KCAB2  Q13303  #> # ‚Ñπ 5,274 more rows #> # ‚Ñπ 15 more variables: EntrezGeneID <chr>, EntrezGeneSymbol <chr>, #> #   Organism <chr>, Units <chr>, Type <chr>, Dilution <chr>, #> #   PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, #> #   QcReference_170255 <dbl>, Cal_Example_Adat_Set002 <dbl>, ‚Ä¶  # Row/sample Meta r_m <- getMeta(example_data) head(r_m) #> [1] \"PlateId\"       \"PlateRunDate\"  \"ScannerID\"     \"PlatePosition\" #> [5] \"SlideId\"       \"Subarray\"       # Normalization Scale Factors grep(\"NormScale\", r_m, value = TRUE) #> [1] \"HybControlNormScale\" \"NormScale_20\"        \"NormScale_0_005\"     #> [4] \"NormScale_0_5\"        # adat subset example_data[1:3, head(r_m)] #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 3 #>      Columns              6 #>      Clinical Data        6 #>      Features             0 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 3 √ó 7 #>   row_names      PlateId   PlateRunDate ScannerID PlatePosition SlideId #>   <chr>          <chr>     <chr>        <chr>     <chr>           <dbl> #> 1 258495800012_3 Example ‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11 #> 2 258495800004_7 Example ‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11 #> 3 258495800010_8 Example ‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11 #> # ‚Ñπ 1 more variable: Subarray <dbl> #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SeqId.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with SomaLogic SeqIds ‚Äî SeqId","title":"Working with SomaLogic SeqIds ‚Äî SeqId","text":"SeqId cornerstone used uniquely identify SomaLogic analytes. SeqIds follow format <Pool>-<Clone>_<Version>, example \"1234-56_7\" can represented : See Details definition sub-unit. <Pool>-<Clone> combination sufficient uniquely identify specific analyte therefore versions longer provided (though may present legacy ADATs). tools enable users extract, test, identify, compare, manipulate SeqIds across assay runs /versions.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SeqId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Working with SomaLogic SeqIds ‚Äî SeqId","text":"","code":"getSeqId(x, trim.version = FALSE)  regexSeqId()  locateSeqId(x, trailing = TRUE)  seqid2apt(x)  apt2seqid(x)  is.apt(x)  is.SeqId(x)  is.AptName(x)  matchSeqIds(x, y, order.by.x = TRUE)  getSeqIdMatches(x, y, show = FALSE)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SeqId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Working with SomaLogic SeqIds ‚Äî SeqId","text":"x Character. vector strings, usually analyte/feature column names, AptNames, SeqIds. seqid2apt(), vector SeqIds. apt2seqid(), character vector containing SeqIds. matchSeqIds(), vector pattern matches containing SeqIds. Can AptNames GeneIDs, seq.XXXX format, even \"naked\" SeqIds. trim.version Logical. Whether remove version number, .e. \"1234-56_7\" -> \"1234-56\". Primarily legacy ADATs. trailing Logical. regular expression explicitly specify trailing SeqId pattern match, .e. \"regex$\"? common case default. y Character. second vector AptNames containing SeqIds match contained x. matchSeqIds() values returned matching elements. order..x Logical. Order returned character string x (first) argument? show Logical. Return data frame visibly?","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SeqId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Working with SomaLogic SeqIds ‚Äî SeqId","text":"getSeqId(): character vector SeqIds captured string. regexSeqId(): regular expression (regex) string pre-defined match SomaLogic SeqId pattern. locateSeqId(): data frame containing start stop integer positions SeqId matches value x. seqid2apt(): character vector seq.* prefix, .e. inverse getSeqId(). apt2seqid(): character vector SeqIds. .SeqId() return TRUE elements. .apt(), .SeqId(): Logical. TRUE FALSE. matchSeqIds(): character string corresponding values y intersect x y. matches found, character(0). getSeqIdMatches(): \\(n x 2\\) data frame, n length intersect matching SeqIds. data frame named passed arguments, x y.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SeqId.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Working with SomaLogic SeqIds ‚Äî SeqId","text":"AptName SeqId combined string, usually GeneId- seq.-prefix, convenient, human-readable manipulation within R.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SeqId.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Working with SomaLogic SeqIds ‚Äî SeqId","text":"getSeqId(): extracts/captures SeqId match analyte column identifier, .e. column name ADAT loaded read_adat(). Assumes SeqId pattern occurs end string, vast majority cases true. edge cases, see trailing argument locateSeqId(). regexSeqId(): generates pre-formatted regular expression matching SeqIds. Note trailing match, commonly required, locateSeqId() offers alternative mach anywhere string. Used internally many utility functions locateSeqId(): generates data frame positional SeqId matches. Specifically designed facilitate SeqId extraction via substr(). Similar stringr::str_locate(). seqid2apt(): converts SeqId anonymous-AptName format, .e. 1234-56 -> seq.1234.56. Version numbers (1234-56_ver) always trimmed present. apt2seqid(): converts anonymous-AptName SeqId format, .e. seq.1234.56 -> 1234-56. Version numbers (seq.1234.56.ver) always trimmed present. .apt(): regular expression match determine string contains SeqId, thus probably AptName format string. legacy EntrezGeneSymbol-SeqId combinations newer -called \"anonymous-AptNames\" formats (seq.1234.45) matched. .SeqId(): tests SeqId format, .e. values returned getSeqId() always return TRUE. .AptName(): tests AptName format, .e. values returned seqid2apt() always return TRUE. function match AptNames, SeqIds, therefore strict .apt(). matchSeqIds(): matches two character vectors basis intersecting SeqIds. Note elements y containing SeqId regular expression silently dropped. getSeqIdMatches(): matches two character vectors basis intersecting SeqIds (irrespective GeneID-prefix). produces two-column data frame can used map two sets. final order matches/rows input corresponding first argument (x). default data frame invisibly returned avoid dumping excess output console (see show = argument.)","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SeqId.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Working with SomaLogic SeqIds ‚Äî SeqId","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SeqId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with SomaLogic SeqIds ‚Äî SeqId","text":"","code":"x <- c(\"ABDC.3948.48.2\", \"3948.88\",        \"3948.48.2\", \"3948-48_2\", \"3948.48.2\",        \"3948-48_2\", \"3948-88\",        \"My.Favorite.Apt.3948.88.9\")  tibble::tibble(orig       = x,                SeqId      = getSeqId(x),                SeqId_trim = getSeqId(x, TRUE),                AptName    = seqid2apt(SeqId)) #> # A tibble: 8 √ó 4 #>   orig                      SeqId     SeqId_trim AptName     #>   <chr>                     <chr>     <chr>      <chr>       #> 1 ABDC.3948.48.2            3948-48_2 3948-48    seq.3948.48 #> 2 3948.88                   3948-88   3948-88    seq.3948.88 #> 3 3948.48.2                 3948-48_2 3948-48    seq.3948.48 #> 4 3948-48_2                 3948-48_2 3948-48    seq.3948.48 #> 5 3948.48.2                 3948-48_2 3948-48    seq.3948.48 #> 6 3948-48_2                 3948-48_2 3948-48    seq.3948.48 #> 7 3948-88                   3948-88   3948-88    seq.3948.88 #> 8 My.Favorite.Apt.3948.88.9 3948-88_9 3948-88    seq.3948.88  # Logical Matching is.apt(\"AGR2.4959.2\") # TRUE #> [1] TRUE is.apt(\"seq.4959.2\")  # TRUE #> [1] TRUE is.apt(\"4959-2\")      # TRUE #> [1] TRUE is.apt(\"AGR2\")        # FALSE #> [1] FALSE   # SeqId Matching x <- c(\"seq.4554.56\", \"seq.3714.49\", \"PlateId\") y <- c(\"Group\", \"3714-49\", \"Assay\", \"4554-56\") matchSeqIds(x, y) #> [1] \"4554-56\" \"3714-49\" matchSeqIds(x, y, order.by.x = FALSE) #> [1] \"3714-49\" \"4554-56\"  # vector of features feats <- getAnalytes(example_data)  match_df <- getSeqIdMatches(feats[1:100], feats[90:500])  # 11 overlapping match_df #>     feats[1:100] feats[90:500] #> 1   seq.10461.57  seq.10461.57 #> 2   seq.10462.14  seq.10462.14 #> 3    seq.10464.6   seq.10464.6 #> 4   seq.10467.58  seq.10467.58 #> 5   seq.10471.25  seq.10471.25 #> 6   seq.10476.23  seq.10476.23 #> 7  seq.10477.162 seq.10477.162 #> 8   seq.10485.56  seq.10485.56 #> 9   seq.10489.19  seq.10489.19 #> 10   seq.10490.3   seq.10490.3 #> 11  seq.10491.21  seq.10491.21  a <- utils::head(feats, 15) b <- withr::with_seed(99, sample(getSeqId(a)))   # => SeqId & shuffle (getSeqIdMatches(a, b))                          # sorted by first vector \"a\" #>                a         b #> 1   seq.10000.28  10000-28 #> 2    seq.10001.7   10001-7 #> 3   seq.10003.15  10003-15 #> 4   seq.10006.25  10006-25 #> 5   seq.10008.43  10008-43 #> 6   seq.10011.65  10011-65 #> 7    seq.10012.5   10012-5 #> 8   seq.10013.34  10013-34 #> 9   seq.10014.31  10014-31 #> 10 seq.10015.119 10015-119 #> 11   seq.10021.1   10021-1 #> 12 seq.10022.207 10022-207 #> 13  seq.10023.32  10023-32 #> 14  seq.10024.44  10024-44 #> 15   seq.10030.8   10030-8"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaDataIO-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function(s) of the SomaDataIO package ‚Äî SomaDataIO-deprecated","title":"Deprecated function(s) of the SomaDataIO package ‚Äî SomaDataIO-deprecated","text":"functions either   current version SomaDataIO package. may eventually completely removed, please re-code scripts accordingly based suggestions :","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaDataIO-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated function(s) of the SomaDataIO package ‚Äî SomaDataIO-deprecated","text":"badges may see SomaDataIO:","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaDataIO-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SomaDataIO: Input/Output 'SomaScan' Data ‚Äî SomaDataIO-package","title":"SomaDataIO: Input/Output 'SomaScan' Data ‚Äî SomaDataIO-package","text":"Load export 'SomaScan' data via 'Standard BioTools, Inc.' structured text file called ADAT ('*.adat'). file format see https://github.com/SomaLogic/SomaLogic-Data/blob/main/README.md. package also exports auxiliary functions manipulating, wrangling, extracting relevant information ADAT object memory.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaDataIO-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SomaDataIO: Input/Output 'SomaScan' Data ‚Äî SomaDataIO-package","text":"Load ADAT file global workspace call read_adat(). function parses main data table data.frame object assigns remaining data file object attributes, .e. call attributes(adat). functions package designed make extracting, manipulating, wrangling data newly created soma_adat object convenient. familiar micro-array data analysis associated packages, e.g. Biobase, notice feature data (proteins) arranged columns samples (arrays) rows. transpose typical micro-array data. conflict can easily solved using transpose function, t(), part base R. addition, familiar standard ExpressionSet object, available Bioconductor, might find functions adat2eSet() pivotExpressionSet() particularly useful.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaDataIO-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SomaDataIO: Input/Output 'SomaScan' Data ‚Äî SomaDataIO-package","text":"Maintainer: Caleb Scheidel calebjscheidel@gmail.com Authors: Stu Field stu.g.field@gmail.com (ORCID) contributors: Standard BioTools, Inc. [copyright holder, funder]","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaDataIO-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SomaDataIO: Input/Output 'SomaScan' Data ‚Äî SomaDataIO-package","text":"","code":"# a listing of all pkg functions library(help = SomaDataIO)  # the `soma_adat` class class(example_data) #> [1] \"soma_adat\"  \"data.frame\" is.soma_adat(example_data) #> [1] TRUE  # Annotations Lookup Table anno_tbl <- getAnalyteInfo(example_data) anno_tbl #> # A tibble: 5,284 √ó 22 #>    AptName      SeqId SeqIdVersion SomaId TargetFullName Target UniProt #>    <chr>        <chr>        <dbl> <chr>  <chr>          <chr>  <chr>   #>  1 seq.10000.28 1000‚Ä¶            3 SL019‚Ä¶ Beta-crystall‚Ä¶ CRBB2  P43320  #>  2 seq.10001.7  1000‚Ä¶            3 SL002‚Ä¶ RAF proto-onc‚Ä¶ c-Raf  P04049  #>  3 seq.10003.15 1000‚Ä¶            3 SL019‚Ä¶ Zinc finger p‚Ä¶ ZNF41  P51814  #>  4 seq.10006.25 1000‚Ä¶            3 SL019‚Ä¶ ETS domain-co‚Ä¶ ELK1   P19419  #>  5 seq.10008.43 1000‚Ä¶            3 SL019‚Ä¶ Guanylyl cycl‚Ä¶ GUC1A  P43080  #>  6 seq.10011.65 1001‚Ä¶            3 SL019‚Ä¶ Inositol poly‚Ä¶ OCRL   Q01968  #>  7 seq.10012.5  1001‚Ä¶            3 SL014‚Ä¶ SAM pointed d‚Ä¶ SPDEF  O95238  #>  8 seq.10013.34 1001‚Ä¶            3 SL025‚Ä¶ Fc_MOUSE       Fc_MO‚Ä¶ Q99LC4  #>  9 seq.10014.31 1001‚Ä¶            3 SL007‚Ä¶ Zinc finger p‚Ä¶ SLUG   O43623  #> 10 seq.10015.1‚Ä¶ 1001‚Ä¶            3 SL014‚Ä¶ Voltage-gated‚Ä¶ KCAB2  Q13303  #> # ‚Ñπ 5,274 more rows #> # ‚Ñπ 15 more variables: EntrezGeneID <chr>, EntrezGeneSymbol <chr>, #> #   Organism <chr>, Units <chr>, Type <chr>, Dilution <chr>, #> #   PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, #> #   QcReference_170255 <dbl>, Cal_Example_Adat_Set002 <dbl>, ‚Ä¶  # Find all analytes starting with \"MMP\" in `anno_tbl` dplyr::filter(anno_tbl, grepl(\"^MMP\", Target)) #> # A tibble: 15 √ó 22 #>    AptName      SeqId SeqIdVersion SomaId TargetFullName Target UniProt #>    <chr>        <chr>        <dbl> <chr>  <chr>          <chr>  <chr>   #>  1 seq.15419.15 1541‚Ä¶            3 SL012‚Ä¶ Matrix metall‚Ä¶ MMP20  O60882  #>  2 seq.2579.17  2579‚Ä¶            5 SL000‚Ä¶ Matrix metall‚Ä¶ MMP-9  P14780  #>  3 seq.2788.55  2788‚Ä¶            1 SL000‚Ä¶ Stromelysin-1  MMP-3  P08254  #>  4 seq.2789.26  2789‚Ä¶            2 SL000‚Ä¶ Matrilysin     MMP-7  P09237  #>  5 seq.2838.53  2838‚Ä¶            1 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-17 Q9ULZ9  #>  6 seq.4160.49  4160‚Ä¶            1 SL000‚Ä¶ 72 kDa type I‚Ä¶ MMP-2  P08253  #>  7 seq.4496.60  4496‚Ä¶            2 SL000‚Ä¶ Macrophage me‚Ä¶ MMP-12 P39900  #>  8 seq.4924.32  4924‚Ä¶            1 SL000‚Ä¶ Interstitial ‚Ä¶ MMP-1  P03956  #>  9 seq.4925.54  4925‚Ä¶            2 SL000‚Ä¶ Collagenase 3  MMP-13 P45452  #> 10 seq.5002.76  5002‚Ä¶            1 SL002‚Ä¶ Matrix metall‚Ä¶ MMP-14 P50281  #> 11 seq.5268.49  5268‚Ä¶            3 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-16 P51512  #> 12 seq.6425.87  6425‚Ä¶            3 SL007‚Ä¶ Matrix metall‚Ä¶ MMP19  Q99542  #> 13 seq.8479.4   8479‚Ä¶            3 SL000‚Ä¶ Stromelysin-2  MMP-10 P09238  #> 14 seq.9172.69  9172‚Ä¶            3 SL000‚Ä¶ Neutrophil co‚Ä¶ MMP-8  P22894  #> 15 seq.9719.145 9719‚Ä¶            3 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-16 P51512  #> # ‚Ñπ 15 more variables: EntrezGeneID <chr>, EntrezGeneSymbol <chr>, #> #   Organism <chr>, Units <chr>, Type <chr>, Dilution <chr>, #> #   PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, #> #   QcReference_170255 <dbl>, Cal_Example_Adat_Set002 <dbl>, #> #   CalQcRatio_Example_Adat_Set002_170255 <dbl>, Dilution2 <dbl>"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaScanObjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data and Objects ‚Äî SomaScanObjects","title":"Example Data and Objects ‚Äî SomaScanObjects","text":"example_data object intended provide existing prospective SomaLogic customers example data enable analysis preparation prior receipt SomaScan data, also generally curious SomaScan data deliverable. intended used control group studies provide metrics SomaScan data general.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaScanObjects.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Data and Objects ‚Äî SomaScanObjects","text":"example_data soma_adat parsed via read_adat() containing 192 samples (see breakdown sample type). 5318 columns containing 5284 analyte features 34 clinical meta data fields. data pre-processed via following steps: hybridization normalized (samples) calibrators buffers median normalized plate scaled calibrated Adaptive Normalization Maximum Likelihood (ANML) QC clinical samples Note1: Age Sex (M/F) fields contain simulated values designed contain biological signal.   ex_analytes character string analyte features contained soma_adat object, derived call getAnalytes(). ex_anno_tbl lookup table corresponding transposed data frame \"Col.Meta\" attribute ADAT, index key field AptName included column 1, derived call getAnalyteInfo(). ex_target_names lookup table mapping SeqId feature names -> target names contained example_data. object (one like ) convenient console via auto-complete labeling /creating plot titles fly. ex_clin_data table containing SampleId, smoking_status, alcohol_use fields clinical sample example_data used demonstrate merge sample annotation information existing soma_adat object.","code":"**Note2:** The `SampleType` column contains sample source/type information and usually the `SampleType == Sample` represents the \"client\" samples.  **Note3:** The original source file can be found at \\url{https://github.com/SomaLogic/SomaLogic-Data}."},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaScanObjects.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Data and Objects ‚Äî SomaScanObjects","text":"https://github.com/SomaLogic/SomaLogic-Data Standard BioTools, Inc.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaScanObjects.html","id":"data-description","dir":"Reference","previous_headings":"","what":"Data Description","title":"Example Data and Objects ‚Äî SomaScanObjects","text":"example_data object contains SomaScan V4 study healthy normal individuals. RFU measurements identifiers altered protect personally identifiable information (PII), also retain underlying biological signal much possible. 192 total EDTA-plasma samples across two 96-well plate runs broken following types: 170 clinical samples (client study samples) 10 calibrators (replicate controls combining data across runs) 6 QC samples (replicate controls used assess run quality) 6 Buffer samples (protein controls)","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaScanObjects.html","id":"data-processing","dir":"Reference","previous_headings":"","what":"Data Processing","title":"Example Data and Objects ‚Äî SomaScanObjects","text":"standard V4 data normalization procedure EDTA-plasma samples applied dataset. details data standardization process see Data Standardization File Specification Technical Note. General details outlined .","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/SomaScanObjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Data and Objects ‚Äî SomaScanObjects","text":"","code":"# S3 print method example_data #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 192 #>      Columns              5318 #>      Clinical Data        34 #>      Features             5284 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 192 √ó 5,319 #>    row_names      PlateId  PlateRunDate ScannerID PlatePosition SlideId #>    <chr>          <chr>    <chr>        <chr>     <chr>           <dbl> #>  1 258495800012_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11 #>  2 258495800004_7 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11 #>  3 258495800010_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11 #>  4 258495800003_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H6            2.58e11 #>  5 258495800009_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H5            2.58e11 #>  6 258495800012_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H4            2.58e11 #>  7 258495800001_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H3            2.58e11 #>  8 258495800004_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H2            2.58e11 #>  9 258495800001_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H12           2.58e11 #> 10 258495800004_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H11           2.58e11 #> # ‚Ñπ 182 more rows #> # ‚Ñπ 5,313 more variables: Subarray <dbl>, SampleId <chr>, #> #   SampleType <chr>, PercentDilution <int>, SampleMatrix <chr>, #> #   Barcode <lgl>, Barcode2d <chr>, SampleName <lgl>, #> #   SampleNotes <lgl>, AliquotingNotes <lgl>, ‚Ä¶ #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # print header info print(example_data, show_header = TRUE) #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 192 #>      Columns              5318 #>      Clinical Data        34 #>      Features             5284 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Header Data ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 35 √ó 2 #>    Key                  Value                                           #>    <chr>                <chr>                                           #>  1 AdatId               GID-1234-56-789-abcdef                          #>  2 Version              1.2                                             #>  3 AssayType            PharmaServices                                  #>  4 AssayVersion         V4                                              #>  5 AssayRobot           Fluent 1 L-307                                  #>  6 Legal                Experiment details and data have been processe‚Ä¶ #>  7 CreatedBy            PharmaServices                                  #>  8 CreatedDate          2020-07-24                                      #>  9 EnteredBy            Technician1                                     #> 10 ExpDate              2020-06-18, 2020-07-20                          #> 11 GeneratedBy          Px (Build:  : ), Canopy_0.1.1                   #> 12 RunNotes             2 columns ('Age' and 'Sex') have been added to‚Ä¶ #> 13 ProcessSteps         Raw RFU, Hyb Normalization, medNormInt (Sample‚Ä¶ #> 14 ProteinEffectiveDate 2019-08-06                                      #> 15 StudyMatrix          EDTA Plasma                                     #> # ‚Ñπ 20 more rows #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  class(example_data) #> [1] \"soma_adat\"  \"data.frame\"  # Features/Analytes head(ex_analytes, 20L) #>  [1] \"seq.10000.28\"  \"seq.10001.7\"   \"seq.10003.15\"  \"seq.10006.25\"  #>  [5] \"seq.10008.43\"  \"seq.10011.65\"  \"seq.10012.5\"   \"seq.10013.34\"  #>  [9] \"seq.10014.31\"  \"seq.10015.119\" \"seq.10021.1\"   \"seq.10022.207\" #> [13] \"seq.10023.32\"  \"seq.10024.44\"  \"seq.10030.8\"   \"seq.10034.16\"  #> [17] \"seq.10035.6\"   \"seq.10036.201\" \"seq.10037.98\"  \"seq.10040.63\"   # Feature info table (annotations) ex_anno_tbl #> # A tibble: 5,284 √ó 22 #>    AptName      SeqId SeqIdVersion SomaId TargetFullName Target UniProt #>    <chr>        <chr>        <dbl> <chr>  <chr>          <chr>  <chr>   #>  1 seq.10000.28 1000‚Ä¶            3 SL019‚Ä¶ Beta-crystall‚Ä¶ CRBB2  P43320  #>  2 seq.10001.7  1000‚Ä¶            3 SL002‚Ä¶ RAF proto-onc‚Ä¶ c-Raf  P04049  #>  3 seq.10003.15 1000‚Ä¶            3 SL019‚Ä¶ Zinc finger p‚Ä¶ ZNF41  P51814  #>  4 seq.10006.25 1000‚Ä¶            3 SL019‚Ä¶ ETS domain-co‚Ä¶ ELK1   P19419  #>  5 seq.10008.43 1000‚Ä¶            3 SL019‚Ä¶ Guanylyl cycl‚Ä¶ GUC1A  P43080  #>  6 seq.10011.65 1001‚Ä¶            3 SL019‚Ä¶ Inositol poly‚Ä¶ OCRL   Q01968  #>  7 seq.10012.5  1001‚Ä¶            3 SL014‚Ä¶ SAM pointed d‚Ä¶ SPDEF  O95238  #>  8 seq.10013.34 1001‚Ä¶            3 SL025‚Ä¶ Fc_MOUSE       Fc_MO‚Ä¶ Q99LC4  #>  9 seq.10014.31 1001‚Ä¶            3 SL007‚Ä¶ Zinc finger p‚Ä¶ SLUG   O43623  #> 10 seq.10015.1‚Ä¶ 1001‚Ä¶            3 SL014‚Ä¶ Voltage-gated‚Ä¶ KCAB2  Q13303  #> # ‚Ñπ 5,274 more rows #> # ‚Ñπ 15 more variables: EntrezGeneID <chr>, EntrezGeneSymbol <chr>, #> #   Organism <chr>, Units <chr>, Type <chr>, Dilution <chr>, #> #   PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, #> #   QcReference_170255 <dbl>, Cal_Example_Adat_Set002 <dbl>, ‚Ä¶  # Search via `filter()` dplyr::filter(ex_anno_tbl, grepl(\"^MMP\", Target)) #> # A tibble: 15 √ó 22 #>    AptName      SeqId SeqIdVersion SomaId TargetFullName Target UniProt #>    <chr>        <chr>        <dbl> <chr>  <chr>          <chr>  <chr>   #>  1 seq.15419.15 1541‚Ä¶            3 SL012‚Ä¶ Matrix metall‚Ä¶ MMP20  O60882  #>  2 seq.2579.17  2579‚Ä¶            5 SL000‚Ä¶ Matrix metall‚Ä¶ MMP-9  P14780  #>  3 seq.2788.55  2788‚Ä¶            1 SL000‚Ä¶ Stromelysin-1  MMP-3  P08254  #>  4 seq.2789.26  2789‚Ä¶            2 SL000‚Ä¶ Matrilysin     MMP-7  P09237  #>  5 seq.2838.53  2838‚Ä¶            1 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-17 Q9ULZ9  #>  6 seq.4160.49  4160‚Ä¶            1 SL000‚Ä¶ 72 kDa type I‚Ä¶ MMP-2  P08253  #>  7 seq.4496.60  4496‚Ä¶            2 SL000‚Ä¶ Macrophage me‚Ä¶ MMP-12 P39900  #>  8 seq.4924.32  4924‚Ä¶            1 SL000‚Ä¶ Interstitial ‚Ä¶ MMP-1  P03956  #>  9 seq.4925.54  4925‚Ä¶            2 SL000‚Ä¶ Collagenase 3  MMP-13 P45452  #> 10 seq.5002.76  5002‚Ä¶            1 SL002‚Ä¶ Matrix metall‚Ä¶ MMP-14 P50281  #> 11 seq.5268.49  5268‚Ä¶            3 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-16 P51512  #> 12 seq.6425.87  6425‚Ä¶            3 SL007‚Ä¶ Matrix metall‚Ä¶ MMP19  Q99542  #> 13 seq.8479.4   8479‚Ä¶            3 SL000‚Ä¶ Stromelysin-2  MMP-10 P09238  #> 14 seq.9172.69  9172‚Ä¶            3 SL000‚Ä¶ Neutrophil co‚Ä¶ MMP-8  P22894  #> 15 seq.9719.145 9719‚Ä¶            3 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-16 P51512  #> # ‚Ñπ 15 more variables: EntrezGeneID <chr>, EntrezGeneSymbol <chr>, #> #   Organism <chr>, Units <chr>, Type <chr>, Dilution <chr>, #> #   PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, #> #   QcReference_170255 <dbl>, Cal_Example_Adat_Set002 <dbl>, #> #   CalQcRatio_Example_Adat_Set002_170255 <dbl>, Dilution2 <dbl>  # Lookup table -> targets # MMP-9 ex_target_names$seq.2579.17 #> [1] \"Matrix metalloproteinase-9\"  # gender hormone FSH tapply(example_data$seq.3032.11, example_data$Sex, median) #>      F      M  #> 3358.1  556.4   # gender hormone LH tapply(example_data$seq.2953.31, example_data$Sex, median) #>      F      M  #> 2693.8  883.6   # Target lookup ex_target_names$seq.2953.31     # tab-completion at console #> [1] \"Luteinizing hormone\"  # Sample Type/Source table(example_data$SampleType) #>  #>     Buffer Calibrator         QC     Sample  #>          6         10          6        170   # Sex/Gender Variable table(example_data$Sex) #>  #>  F  M  #> 85 85   # Age Variable summary(example_data$Age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   18.00   46.00   55.00   55.66   67.00   77.00      22"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers to Extract Information from an ADAT ‚Äî adat-helpers","title":"Helpers to Extract Information from an ADAT ‚Äî adat-helpers","text":"Retrieve elements HEADER attribute soma_adat object: getAdatVersion() determines ADAT version number parsed ADAT header. getSomaScanVersion() determines original SomaScan assay version generated RFU measurements within soma_adat object. checkSomaScanVersion() determines version recognized version SomaScan. Table SomaScan assay versions: getSignalSpace() determines current signal space RFU values, may differ original SomaScan signal space data lifted. See lift_adat() vignette(\"lifting--bridging\", package = \"SomaDataIO\"). getSomaScanLiftCCC() accesses lifting Concordance Correlation Coefficients various SomaScan versions. CCC metrics see lift_adat().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers to Extract Information from an ADAT ‚Äî adat-helpers","text":"","code":"getAdatVersion(x)  getSomaScanVersion(adat)  getSignalSpace(adat)  checkSomaScanVersion(ver)  getSomaScanLiftCCC(matrix = c(\"plasma\", \"serum\"))"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers to Extract Information from an ADAT ‚Äî adat-helpers","text":"x Either soma_adat object intact attributes attributes soma_adat object. adat soma_adat object (intact attributes), typically created using read_adat(). ver character(1). SomaScan version string. Note: \"v\"-prefix case insensitive. matrix Character. string (usually) either \"serum\" \"plasma\".","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers to Extract Information from an ADAT ‚Äî adat-helpers","text":"getAdatVersion() key-value Version string. getSomaScanVersion() key-value AssayVersion string. getSignalSpace() key-value SignalSpace string. checkSomaScanVersion() Returns NULL (invisibly) checks pass. getSomaScanLiftCCC() Returns tibble either serum plasma CCC various versions SomaScan assay.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat-helpers.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Helpers to Extract Information from an ADAT ‚Äî adat-helpers","text":"Lin, Lawrence -Kuei. 1989. Concordance Correlation Coefficient Evaluate Reproducibility. Biometrics. 45:255-268.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat-helpers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helpers to Extract Information from an ADAT ‚Äî adat-helpers","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat-helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers to Extract Information from an ADAT ‚Äî adat-helpers","text":"","code":"getAdatVersion(example_data) #> [1] \"1.2\"  attr(example_data, \"Header.Meta\")$HEADER$Version <- \"99.9\" getAdatVersion(example_data) #> [1] \"99.9\"  ver <- getSomaScanVersion(example_data) ver #> [1] \"V4\"  rfu_space <- getSignalSpace(example_data) rfu_space #> [1] \"V4\"  is.null(checkSomaScanVersion(ver)) #> [1] TRUE  # plasma (default) getSomaScanLiftCCC() #> # A tibble: 11,083 √ó 4 #>    SeqId  plasma_11k_to_5k_ccc plasma_11k_to_7k_ccc plasma_7k_to_5k_ccc #>    <chr>                 <dbl>                <dbl>               <dbl> #>  1 10000‚Ä¶                0.966                0.982               0.963 #>  2 10001‚Ä¶                0.86                 0.961               0.875 #>  3 10003‚Ä¶                0.674                0.787               0.668 #>  4 10006‚Ä¶                0.864                0.927               0.877 #>  5 10008‚Ä¶                0.879                0.939               0.908 #>  6 10010‚Ä¶               NA                    0.915              NA     #>  7 10011‚Ä¶                0.642                0.784               0.743 #>  8 10012‚Ä¶                0.528                0.661               0.591 #>  9 10013‚Ä¶                0.76                 0.824               0.744 #> 10 10014‚Ä¶                0.934                0.971               0.941 #> # ‚Ñπ 11,073 more rows  # serum getSomaScanLiftCCC(\"serum\") #> # A tibble: 11,083 √ó 4 #>    SeqId    serum_11k_to_5k_ccc serum_11k_to_7k_ccc serum_7k_to_5k_ccc #>    <chr>                  <dbl>               <dbl>              <dbl> #>  1 10000-28               0.97                0.977              0.967 #>  2 10001-7                0.819               0.857              0.875 #>  3 10003-15               0.761               0.759              0.774 #>  4 10006-25               0.903               0.937              0.937 #>  5 10008-43               0.915               0.951              0.925 #>  6 10010-10              NA                   0.895             NA     #>  7 10011-65               0.515               0.748              0.741 #>  8 10012-5                0.57                0.717              0.716 #>  9 10013-34               0.716               0.86               0.778 #> 10 10014-31               0.906               0.951              0.913 #> # ‚Ñπ 11,073 more rows"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat2eSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","title":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","text":"Utility convert SomaLogic soma_adat object ExpressionSet object via Biobase package Bioconductor: https://www.bioconductor.org/packages/release/bioc/html/Biobase.html.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat2eSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","text":"","code":"adat2eSet(adat)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat2eSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","text":"adat soma_adat class object read R environment using read_adat().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat2eSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","text":"Bioconductor object class ExpressionSet.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat2eSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","text":"Biobase package required must installed Bioconductor via following R console:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"Biobase\", version = remotes::bioc_version())"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat2eSet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","text":"https://bioconductor.org/install/","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat2eSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/adat2eSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ADAT to ExpressionSet Object ‚Äî adat2eSet","text":"","code":"eSet <- adat2eSet(example_data) class(eSet) #> [1] \"ExpressionSet\" #> attr(,\"package\") #> [1] \"Biobase\" eSet #> ExpressionSet (storageMode: lockedEnvironment) #> assayData: 5284 features, 192 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: 258495800012_3 258495800004_7 ... #>     258495800110_5 (192 total) #>   varLabels: PlateId PlateRunDate ... Sex (34 total) #>   varMetadata: labelDescription #> featureData #>   featureNames: seq.10000.28 seq.10001.7 ... seq.9999.1 (5284 #>     total) #>   fvarLabels: SeqId SeqIdVersion ... Dilution2 (21 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #> Annotation:    ft <- Biobase::exprs(eSet) head(ft[, 1:10L], 10L) #>               258495800012_3 258495800004_7 258495800010_8 #> seq.10000.28           476.5          474.4          415.6 #> seq.10001.7            310.1          293.5          299.6 #> seq.10003.15           100.3          101.8         3030.1 #> seq.10006.25           602.8          561.9          563.9 #> seq.10008.43           561.8          541.9          423.9 #> seq.10011.65          6897.1         2985.5         3203.6 #> seq.10012.5           1796.6         2123.0         2095.6 #> seq.10013.34           441.9          521.1          560.4 #> seq.10014.31           941.7          933.4         1012.0 #> seq.10015.119          728.1          477.3          535.1 #>               258495800003_4 258495800009_4 258495800012_8 #> seq.10000.28           442.6          465.7          496.6 #> seq.10001.7            247.9          710.7          669.6 #> seq.10003.15           112.9           95.9          135.5 #> seq.10006.25           563.7          791.0          826.0 #> seq.10008.43           469.8          443.5          458.7 #> seq.10011.65          3140.9         2707.5         1705.7 #> seq.10012.5           1922.2         1607.1         1396.0 #> seq.10013.34           582.0          438.6          415.7 #> seq.10014.31          5207.2          943.4          801.8 #> seq.10015.119          480.9          929.2          793.0 #>               258495800001_3 258495800004_8 258495800001_8 #> seq.10000.28           693.0          522.3          452.1 #> seq.10001.7            614.2          632.8          918.3 #> seq.10003.15           140.1          101.0          113.2 #> seq.10006.25           682.7          739.3          905.4 #> seq.10008.43           481.7          724.7          541.2 #> seq.10011.65          6424.4         3559.6         2674.6 #> seq.10012.5           1675.5         1832.8         1526.6 #> seq.10013.34           488.1          483.0          747.4 #> seq.10014.31           838.9          839.1          815.5 #> seq.10015.119          454.3          798.0          981.7 #>               258495800004_3 #> seq.10000.28           702.1 #> seq.10001.7            237.7 #> seq.10003.15           126.9 #> seq.10006.25           634.2 #> seq.10008.43           585.0 #> seq.10011.65          2807.1 #> seq.10012.5           1656.6 #> seq.10013.34           510.6 #> seq.10014.31           869.1 #> seq.10015.119          438.9"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addAttributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Attributes to soma_adat Objects ‚Äî addAttributes","title":"Add Attributes to soma_adat Objects ‚Äî addAttributes","text":"Adds set attributes, typically \"Header.Meta\" \"Col.Meta\", data.frame, tibble, soma_adat similar tabular object. Existing attributes data -written. Typically untouched : names class row.names","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addAttributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Attributes to soma_adat Objects ‚Äî addAttributes","text":"","code":"addAttributes(data, new.atts)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addAttributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Attributes to soma_adat Objects ‚Äî addAttributes","text":"data receiving data.frame object new attributes. new.atts named list object containing new attributes add existing ones.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addAttributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Attributes to soma_adat Objects ‚Äî addAttributes","text":"data frame object corresponding data attributes new.atts grafted . Existing attribute names -written.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addAttributes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Attributes to soma_adat Objects ‚Äî addAttributes","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Class to an Object ‚Äî addClass","title":"Add a Class to an Object ‚Äî addClass","text":"Utility add (prepend) class(es) existing objects.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Class to an Object ‚Äî addClass","text":"","code":"addClass(x, class)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Class to an Object ‚Äî addClass","text":"x object receive new class(es). class Character. name additional class(es).","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Class to an Object ‚Äî addClass","text":"object new classes.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addClass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add a Class to an Object ‚Äî addClass","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/addClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Class to an Object ‚Äî addClass","text":"","code":"class(iris) #> [1] \"data.frame\"  addClass(iris, \"new\") |> class() #> [1] \"new\"        \"data.frame\"  addClass(iris, c(\"A\", \"B\")) |> class()    # 2 classes #> [1] \"A\"          \"B\"          \"data.frame\"  addClass(iris, c(\"A\", \"data.frame\")) |> class()    # no duplicates #> [1] \"A\"          \"data.frame\"  addClass(iris, c(\"data.frame\", \"A\")) |> class()    # re-orders if exists #> [1] \"data.frame\" \"A\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calcOutlierMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","title":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","text":"Calculate median absolute deviation (statistical) outliers measurements fold-change criteria ADAT. Two values required calculation: median absolute deviation (MAD) fold-change (FC). Outliers determined based result 6*MAD x*FC , x number fold changes defined.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calcOutlierMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","text":"","code":"calcOutlierMap(   data,   anno_tbl = NULL,   apt.order = c(NA, \"dilution\", \"signal\"),   sample.order = NULL,   fc.crit = 5 )  # S3 method for class 'outlier_map' print(x, ...)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calcOutlierMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","text":"data soma_adat object containing RFU feature data. anno_tbl annotations table produced via getAnalyteInfo(). Used calculate analyte dilutions matrix column ordering. NULL, table generated internally data (possible), analytes plotted dilution order. apt.order Character. columns/features ordered? Options include: dilution mix (\"dilution\"), median overall signal (\"signal\"), -data (default). sample.order Either character string indicating column name entries used order data frame rows, numeric vector representing order data frame rows. default (NULL) leaves row ordering data. fc.crit Integer. fold change criterion evaluate. Defaults 5x. x object class \"outlier_map\". ... Arguments S3 print methods.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calcOutlierMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","text":"list class c(\"outlier_map\", \"Map\") containing: matrix boolean matrix TRUE/FALSE whether sample outlier according stated criteria. x.lab character string containing plot x-axis label. title character string containing plot title. rows..freq logical indicating samples ordered outlier frequency. class.tab table containing frequencies class input sample.order defined categorical variable. sample.order numeric vector representing order data frame rows. legend.sub character string containing plot legend subtitle.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calcOutlierMap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","text":"S3 plotting method, see plot.Map().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calcOutlierMap.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","text":"print(outlier_map): S3 print method class \"outlier_map\".","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calcOutlierMap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calcOutlierMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate MAD Outlier Map ‚Äî calcOutlierMap","text":"","code":"dat <- example_data |> dplyr::filter(SampleType == \"Sample\") om <- calcOutlierMap(dat) class(om) #> [1] \"outlier_map\" \"Map\"         \"list\"         # S3 print method om #> ‚ïê‚ïê SomaLogic Outlier Map ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> \"170 x 5284\" #> \"Outlier Map: | x - median(x) | > 6 * mad(x) & FC > 5x\" #> \"Proteins Ordered in Adat\" #> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ‚Ä¶, 169, #> and 170 #> \"Proteins\" #>   Outlier Map dimensions    NA #>   Title                     FALSE #>   Class Table               NA #>   Rows by Frequency         FALSE #>   Sample Order              NA #>   x-label                   FALSE #>   Legend Sub-title          NA #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # `sample.order = \"frequency\"` orders samples by outlier frequency om <- calcOutlierMap(dat, sample.order = \"frequency\") om$rows.by.freq #> [1] TRUE om$sample.order #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 #>  [17]  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32 #>  [33]  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48 #>  [49]  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 #>  [65]  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80 #>  [81]  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 #>  [97]  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 #> [113] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 #> [129] 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #> [145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 #> [161] 161 162 163 164 165 166 167 168 169 170  # order samples field in Adat om <- calcOutlierMap(dat, sample.order = \"Sex\") om$sample.order #>   [1]   1   2   5   6   8   9  10  13  14  16  17  21  22  28  29  30 #>  [17]  31  32  35  38  39  41  43  44  46  47  48  51  53  54  58  61 #>  [33]  63  66  68  69  70  71  77  79  81  82  83  85  86  89  90  94 #>  [49]  95 101 102 104 106 108 112 114 119 120 122 125 126 127 128 132 #>  [65] 133 135 136 141 142 143 145 146 147 154 156 157 158 159 160 161 #>  [81] 164 165 166 167 170   3   4   7  11  12  15  18  19  20  23  24 #>  [97]  25  26  27  33  34  36  37  40  42  45  49  50  52  55  56  57 #> [113]  59  60  62  64  65  67  72  73  74  75  76  78  80  84  87  88 #> [129]  91  92  93  96  97  98  99 100 103 105 107 109 110 111 113 115 #> [145] 116 117 118 121 123 124 129 130 131 134 137 138 139 140 144 148 #> [161] 149 150 151 152 153 155 162 163 168 169"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calc_eLOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Estimated Limit of Detection (eLOD) ‚Äî calc_eLOD","title":"Calculate Estimated Limit of Detection (eLOD) ‚Äî calc_eLOD","text":"Calculate estimated limit detection (eLOD) SOMAmer reagent analytes provided input data. input data filtered include buffer samples desired eLOD calculation.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calc_eLOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Estimated Limit of Detection (eLOD) ‚Äî calc_eLOD","text":"","code":"calc_eLOD(data)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calc_eLOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Estimated Limit of Detection (eLOD) ‚Äî calc_eLOD","text":"data soma_adat, data.frame, tibble object including SeqId columns (seq.xxxxx.xx) containing RFU values.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calc_eLOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Estimated Limit of Detection (eLOD) ‚Äî calc_eLOD","text":"tibble object 2 columns: SeqId eLOD.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calc_eLOD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Estimated Limit of Detection (eLOD) ‚Äî calc_eLOD","text":"eLOD calculated using following steps: SOMAmer, median adjusted median absolute deviation (\\(MAD_{Adjusted}\\)) calculated, $$MAD_{Adjusted} = 1.4826 * MAD$$ 1.4826 set constant used adjust MAD reflective standard deviation normal distribution. SOMAmer, calculate $$eLOD = median + 3.3 * MAD_{Adjusted}$$ Note: eLOD useful non-core matrices, including cell lysate CSF, used carefully evaluating background signal plasma serum.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calc_eLOD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Estimated Limit of Detection (eLOD) ‚Äî calc_eLOD","text":"Caleb Scheidel, Christopher Dimapasok","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/calc_eLOD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Estimated Limit of Detection (eLOD) ‚Äî calc_eLOD","text":"","code":"# filter data frame using vector of SampleId controls df <- withr::with_seed(101, {   data.frame(     SampleType = rep(c(\"Sample\", \"Buffer\"), each = 10),     SampleId = paste0(\"Sample_\", 1:20),     seq.20.1.100 = runif(20, 1, 100),     seq.21.1.100 = runif(20, 1, 100),     seq.22.2.100 = runif(20, 1, 100)   ) }) sample_ids <- paste0(\"Sample_\", 11:20) selected_samples <- df |> filter(SampleId %in% sample_ids)  selected_elod <- calc_eLOD(selected_samples) head(selected_elod) #> # A tibble: 3 √ó 2 #>   SeqId         eLOD #>   <chr>        <dbl> #> 1 seq.20.1.100  168. #> 2 seq.21.1.100  131. #> 3 seq.22.2.100  116. if (FALSE) { # \\dontrun{ # filter `soma_adat` object to buffer samples buffer_samples <- example_data |> filter(SampleType == \"Buffer\")  # calculate eLOD buffer_elod <- calc_eLOD(buffer_samples) head(buffer_elod)  # use eLOD to calculate signal to noise ratio of samples samples_median <- example_data |> dplyr::filter(SampleType == \"Sample\") |>   dplyr::summarise(across(starts_with(\"seq\"), median, .names = \"median_{col}\")) |>   tidyr::pivot_longer(starts_with(\"median_\"), names_to = \"SeqId\",                       values_to = \"median_signal\") |>   dplyr::mutate(SeqId = gsub(\"median_seq\", \"seq\", SeqId))  # analytes with signal to noise > 2 ratios <- samples_median |>   dplyr::mutate(signal_to_noise = median_signal / buffer_elod$eLOD) |>   dplyr::filter(signal_to_noise > 2) |>   dplyr::arrange(desc(signal_to_noise))  head(ratios) } # }"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/cleanNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Up Character String ‚Äî cleanNames","title":"Clean Up Character String ‚Äî cleanNames","text":"Often names, particularly within soma_adat objects, messy due varying inputs, function attempts remedy removing following: trailing/leading/internal whitespace non-alphanumeric strings (except underscores) duplicated internal dots (..), (...), etc. SomaScan normalization scale factor format","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/cleanNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Up Character String ‚Äî cleanNames","text":"","code":"cleanNames(x)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/cleanNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Up Character String ‚Äî cleanNames","text":"x Character. String clean .","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/cleanNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Up Character String ‚Äî cleanNames","text":"cleaned character string.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/cleanNames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clean Up Character String ‚Äî cleanNames","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/cleanNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Up Character String ‚Äî cleanNames","text":"","code":"cleanNames(\"    sdkfj...sdlkfj.sdfii4994### \") #> [1] \"sdkfj.sdlkfj.sdfii4994\"  cleanNames(\"Hyb..Scale\") #> [1] \"HybControlNormScale\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/diffAdats.html","id":null,"dir":"Reference","previous_headings":"","what":"Diff Two ADAT Objects ‚Äî diffAdats","title":"Diff Two ADAT Objects ‚Äî diffAdats","text":"Diff tool differences two soma_adat objects. diffs table values interrogated, intersect column meta data feature data considered","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/diffAdats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diff Two ADAT Objects ‚Äî diffAdats","text":"","code":"diffAdats(adat1, adat2, tolerance = 1e-06)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/diffAdats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diff Two ADAT Objects ‚Äî diffAdats","text":"adat1, adat2 Two soma_adat objects compare. tolerance Numeric > 0. Differences smaller tolerance triggered. See .equal().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/diffAdats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diff Two ADAT Objects ‚Äî diffAdats","text":"NULL, invisibly. Called side effects.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/diffAdats.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Diff Two ADAT Objects ‚Äî diffAdats","text":"diffs column name intersect reported.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/diffAdats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diff Two ADAT Objects ‚Äî diffAdats","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/diffAdats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diff Two ADAT Objects ‚Äî diffAdats","text":"","code":"# subset `example_data` for speed # all SeqIds from 2000 -> 2999 seqs <- grep(\"^seq\\\\.2[0-9]{3}\", names(example_data), value = TRUE) ex_data_small <- head(example_data[, c(getMeta(example_data), seqs)], 10L) dim(ex_data_small) #> [1]  10 264  # no diff to itself diffAdats(ex_data_small, ex_data_small) #> ‚ïê‚ïê Checking ADAT attributes & characteristics ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> ‚Üí Attribute names are identical       ‚úì #> ‚Üí Attributes are identical            ‚úì #> ‚Üí ADAT dimensions are identical       ‚úì #> ‚Üí ADAT row names are identical        ‚úì #> ‚Üí ADATs contain identical Features    ‚úì #> ‚Üí ADATs contain same Meta Fields      ‚úì #> ‚îÄ‚îÄ Checking the data matrix ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Üí All Clinical data is identical      ‚úì #> ‚Üí All Feature data is identical       ‚úì #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # remove random column rm <- withr::with_seed(123, sample(1:ncol(ex_data_small), 1)) diffAdats(ex_data_small, ex_data_small[, -rm]) #> ‚ïê‚ïê Checking ADAT attributes & characteristics ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> ‚Üí Attribute names are identical       ‚úì #> ‚Üí Attributes are identical            ‚úñ #> ‚Üí ADAT dimensions are identical       ‚úñ #> ‚Üí   ADATs have same # of rows         ‚úì #> ‚Üí   ADATs have same # of columns      ‚úñ #> ‚Üí   ADATs have same # of features     ‚úñ #> ‚Üí   ADATs have same # of meta data    ‚úì #> ‚Üí ADAT row names are identical        ‚úì #> ‚Üí ADATs contain identical Features    ‚úñ #> ‚Üí ADATs contain same Meta Fields      ‚úì #> \"ex_data_small\" #> \"ex_data_small[, -rm]\" #>          seq.2790.54 #>  #> ‚úî Continuing on the \"*INTERSECT*\" of ADAT columns #> ‚îÄ‚îÄ Checking the data matrix ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Üí All Clinical data is identical      ‚úì #> ‚Üí All Feature data is identical       ‚úì #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # randomly shuffle Subarray diffAdats(ex_data_small, dplyr::mutate(ex_data_small, Subarray = sample(Subarray))) #> ‚ïê‚ïê Checking ADAT attributes & characteristics ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> ‚Üí Attribute names are identical       ‚úì #> ‚Üí Attributes are identical            ‚úì #> ‚Üí ADAT dimensions are identical       ‚úì #> ‚Üí ADAT row names are identical        ‚úì #> ‚Üí ADATs contain identical Features    ‚úì #> ‚Üí ADATs contain same Meta Fields      ‚úì #> ‚îÄ‚îÄ Checking the data matrix ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Üí All Clinical data is identical      ‚úñ #>     No. fields that differ            1 #> ‚îÄ‚îÄ Clinical data diffs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> \"Subarray\" #> NULL #> ‚Üí All Feature data is identical       ‚úì #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # modify 2 RFUs randomly new <- ex_data_small new[5L, c(rm, rm + 1L)] <- 999 diffAdats(ex_data_small, new) #> ‚ïê‚ïê Checking ADAT attributes & characteristics ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> ‚Üí Attribute names are identical       ‚úì #> ‚Üí Attributes are identical            ‚úì #> ‚Üí ADAT dimensions are identical       ‚úì #> ‚Üí ADAT row names are identical        ‚úì #> ‚Üí ADATs contain identical Features    ‚úì #> ‚Üí ADATs contain same Meta Fields      ‚úì #> ‚îÄ‚îÄ Checking the data matrix ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Üí All Clinical data is identical      ‚úì #> ‚Üí All Feature data is identical       ‚úñ #>     No. fields that differ            2 #> ‚îÄ‚îÄ Feature data diffs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> \"seq.2790.54\" and \"seq.2794.60\" #> NULL #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalyteInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Analyte Annotation Information ‚Äî getAnalyteInfo","title":"Get Analyte Annotation Information ‚Äî getAnalyteInfo","text":"Uses Col.Meta attribute (analyte annotation data appears protein measurements *.adat text file) soma_adat object, adds AptName column key, conducts sanity checks, generates \"lookup table\" analyte data can used simple manipulation indexing analyte annotation information. importantly, analyte column names soma_adat (e.g. seq.XXXX.XX) become AptName column lookup table represents key index table soma_adat comes.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalyteInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Analyte Annotation Information ‚Äî getAnalyteInfo","text":"","code":"getAnalyteInfo(adat)  getTargetNames(tbl)  getFeatureData(adat)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalyteInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Analyte Annotation Information ‚Äî getAnalyteInfo","text":"adat soma_adat object (intact attributes), typically created using read_adat(). tbl tibble object containing analyte target annotation information. usually result call getAnalyteInfo().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalyteInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Analyte Annotation Information ‚Äî getAnalyteInfo","text":"tibble object columns corresponding column meta data entries soma_adat. One row per analyte.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalyteInfo.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get Analyte Annotation Information ‚Äî getAnalyteInfo","text":"getTargetNames(): creates lookup table (dictionary) named list object AptNames Target names key-value pairs. convenient tool quickly access TargetName given AptName key-value pairs map seq.XXXX.XX corresponding TargetName tbl. structure provides convenient auto-completion mechanism command line generating plot titles. getFeatureData(): . Please now use getAnalyteInfo().","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalyteInfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Analyte Annotation Information ‚Äî getAnalyteInfo","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalyteInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Analyte Annotation Information ‚Äî getAnalyteInfo","text":"","code":"# Get Aptamer table anno_tbl <- getAnalyteInfo(example_data) anno_tbl #> # A tibble: 5,284 √ó 22 #>    AptName      SeqId SeqIdVersion SomaId TargetFullName Target UniProt #>    <chr>        <chr>        <dbl> <chr>  <chr>          <chr>  <chr>   #>  1 seq.10000.28 1000‚Ä¶            3 SL019‚Ä¶ Beta-crystall‚Ä¶ CRBB2  P43320  #>  2 seq.10001.7  1000‚Ä¶            3 SL002‚Ä¶ RAF proto-onc‚Ä¶ c-Raf  P04049  #>  3 seq.10003.15 1000‚Ä¶            3 SL019‚Ä¶ Zinc finger p‚Ä¶ ZNF41  P51814  #>  4 seq.10006.25 1000‚Ä¶            3 SL019‚Ä¶ ETS domain-co‚Ä¶ ELK1   P19419  #>  5 seq.10008.43 1000‚Ä¶            3 SL019‚Ä¶ Guanylyl cycl‚Ä¶ GUC1A  P43080  #>  6 seq.10011.65 1001‚Ä¶            3 SL019‚Ä¶ Inositol poly‚Ä¶ OCRL   Q01968  #>  7 seq.10012.5  1001‚Ä¶            3 SL014‚Ä¶ SAM pointed d‚Ä¶ SPDEF  O95238  #>  8 seq.10013.34 1001‚Ä¶            3 SL025‚Ä¶ Fc_MOUSE       Fc_MO‚Ä¶ Q99LC4  #>  9 seq.10014.31 1001‚Ä¶            3 SL007‚Ä¶ Zinc finger p‚Ä¶ SLUG   O43623  #> 10 seq.10015.1‚Ä¶ 1001‚Ä¶            3 SL014‚Ä¶ Voltage-gated‚Ä¶ KCAB2  Q13303  #> # ‚Ñπ 5,274 more rows #> # ‚Ñπ 15 more variables: EntrezGeneID <chr>, EntrezGeneSymbol <chr>, #> #   Organism <chr>, Units <chr>, Type <chr>, Dilution <chr>, #> #   PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, #> #   QcReference_170255 <dbl>, Cal_Example_Adat_Set002 <dbl>, ‚Ä¶  # Use `dplyr::group_by()` dplyr::tally(dplyr::group_by(anno_tbl, Dilution))  # print summary by dilution #> # A tibble: 4 √ó 2 #>   Dilution     n #>   <chr>    <int> #> 1 0           12 #> 2 0.005      173 #> 3 0.5        828 #> 4 20        4271  # Columns containing \"Target\" anno_tbl |>   dplyr::select(dplyr::contains(\"Target\")) #> # A tibble: 5,284 √ó 2 #>    TargetFullName                                         Target   #>    <chr>                                                  <chr>    #>  1 Beta-crystallin B2                                     CRBB2    #>  2 RAF proto-oncogene serine/threonine-protein kinase     c-Raf    #>  3 Zinc finger protein 41                                 ZNF41    #>  4 ETS domain-containing protein Elk-1                    ELK1     #>  5 Guanylyl cyclase-activating protein 1                  GUC1A    #>  6 Inositol polyphosphate 5-phosphatase OCRL-1            OCRL     #>  7 SAM pointed domain-containing Ets transcription factor SPDEF    #>  8 Fc_MOUSE                                               Fc_MOUSE #>  9 Zinc finger protein SNAI2                              SLUG     #> 10 Voltage-gated potassium channel subunit beta-2         KCAB2    #> # ‚Ñπ 5,274 more rows  # Rows of \"Target\" starting with MMP anno_tbl |>   dplyr::filter(grepl(\"^MMP\", Target)) #> # A tibble: 15 √ó 22 #>    AptName      SeqId SeqIdVersion SomaId TargetFullName Target UniProt #>    <chr>        <chr>        <dbl> <chr>  <chr>          <chr>  <chr>   #>  1 seq.15419.15 1541‚Ä¶            3 SL012‚Ä¶ Matrix metall‚Ä¶ MMP20  O60882  #>  2 seq.2579.17  2579‚Ä¶            5 SL000‚Ä¶ Matrix metall‚Ä¶ MMP-9  P14780  #>  3 seq.2788.55  2788‚Ä¶            1 SL000‚Ä¶ Stromelysin-1  MMP-3  P08254  #>  4 seq.2789.26  2789‚Ä¶            2 SL000‚Ä¶ Matrilysin     MMP-7  P09237  #>  5 seq.2838.53  2838‚Ä¶            1 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-17 Q9ULZ9  #>  6 seq.4160.49  4160‚Ä¶            1 SL000‚Ä¶ 72 kDa type I‚Ä¶ MMP-2  P08253  #>  7 seq.4496.60  4496‚Ä¶            2 SL000‚Ä¶ Macrophage me‚Ä¶ MMP-12 P39900  #>  8 seq.4924.32  4924‚Ä¶            1 SL000‚Ä¶ Interstitial ‚Ä¶ MMP-1  P03956  #>  9 seq.4925.54  4925‚Ä¶            2 SL000‚Ä¶ Collagenase 3  MMP-13 P45452  #> 10 seq.5002.76  5002‚Ä¶            1 SL002‚Ä¶ Matrix metall‚Ä¶ MMP-14 P50281  #> 11 seq.5268.49  5268‚Ä¶            3 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-16 P51512  #> 12 seq.6425.87  6425‚Ä¶            3 SL007‚Ä¶ Matrix metall‚Ä¶ MMP19  Q99542  #> 13 seq.8479.4   8479‚Ä¶            3 SL000‚Ä¶ Stromelysin-2  MMP-10 P09238  #> 14 seq.9172.69  9172‚Ä¶            3 SL000‚Ä¶ Neutrophil co‚Ä¶ MMP-8  P22894  #> 15 seq.9719.145 9719‚Ä¶            3 SL003‚Ä¶ Matrix metall‚Ä¶ MMP-16 P51512  #> # ‚Ñπ 15 more variables: EntrezGeneID <chr>, EntrezGeneSymbol <chr>, #> #   Organism <chr>, Units <chr>, Type <chr>, Dilution <chr>, #> #   PlateScale_Reference <dbl>, CalReference <dbl>, #> #   Cal_Example_Adat_Set001 <dbl>, ColCheck <chr>, #> #   CalQcRatio_Example_Adat_Set001_170255 <dbl>, #> #   QcReference_170255 <dbl>, Cal_Example_Adat_Set002 <dbl>, #> #   CalQcRatio_Example_Adat_Set002_170255 <dbl>, Dilution2 <dbl>  # Target names tg <- getTargetNames(anno_tbl)  # how to use for plotting feats <- sample(anno_tbl$AptName, 6) op <- par(mfrow = c(2, 3)) sapply(feats, function(.x) plot(1:10, main = tg[[.x]]))  #> $seq.5465.32 #> NULL #>  #> $seq.13116.25 #> NULL #>  #> $seq.18871.24 #> NULL #>  #> $seq.12934.1 #> NULL #>  #> $seq.13666.222 #> NULL #>  #> $seq.12771.19 #> NULL #>  par(op)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Analytes ‚Äî getAnalytes","title":"Get Analytes ‚Äî getAnalytes","text":"Return feature names (.e. column names SOMAmer reagent analytes) soma_adat. S3 methods also exist classes:   getMeta() returns inverse, character vector string names non-analyte feature columns/variables, typically correspond clinical (\"meta\") data variables. S3 methods exist classes:","code":"#> [1] getAnalytes.character  getAnalytes.data.frame getAnalytes.default #> [4] getAnalytes.list       getAnalytes.matrix     getAnalytes.recipe #> [7] getAnalytes.soma_adat #> see '?methods' for accessing help and source code #> [1] getMeta.character  getMeta.data.frame getMeta.default    getMeta.list #> [5] getMeta.matrix     getMeta.soma_adat #> see '?methods' for accessing help and source code"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Analytes ‚Äî getAnalytes","text":"","code":"getAnalytes(x, n = FALSE, rm.controls = FALSE)  getMeta(x, n = FALSE)  getFeatures(x, n = FALSE, rm.controls = FALSE)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Analytes ‚Äî getAnalytes","text":"x Typically soma_adat class object created using read_adat(). n Logical. Return integer corresponding length features? rm.controls Logical. control non-human analytes (e.g. HybControls, Non-Human, Non-Biotin, Spuriomer) removed returned value?","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Analytes ‚Äî getAnalytes","text":"getAnalytes(): character vector ADAT feature (\"analyte\") names. getMeta(): character vector ADAT clinical (\"meta\") data names. , n = TRUE, integer corresponding length character vector.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalytes.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get Analytes ‚Äî getAnalytes","text":"getFeatures(): . Please now use getAnalytes().","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalytes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Analytes ‚Äî getAnalytes","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getAnalytes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Analytes ‚Äî getAnalytes","text":"","code":"# RFU feature variables apts <- getAnalytes(example_data) head(apts) #> [1] \"seq.10000.28\" \"seq.10001.7\"  \"seq.10003.15\" \"seq.10006.25\" #> [5] \"seq.10008.43\" \"seq.10011.65\" getAnalytes(example_data, n = TRUE) #> [1] 5284  # vector string bb <- getAnalytes(names(example_data)) all.equal(apts, bb) #> [1] TRUE  # create some control sequences # ~~~~~~~~~ Spuriomer ~~~ HybControl ~~~ apts2 <- c(\"seq.2053.2\", \"seq.2171.12\", head(apts)) apts2 #> [1] \"seq.2053.2\"   \"seq.2171.12\"  \"seq.10000.28\" \"seq.10001.7\"  #> [5] \"seq.10003.15\" \"seq.10006.25\" \"seq.10008.43\" \"seq.10011.65\" no_crtl <- getAnalytes(apts2, rm.controls = TRUE) no_crtl #> [1] \"seq.10000.28\" \"seq.10001.7\"  \"seq.10003.15\" \"seq.10006.25\" #> [5] \"seq.10008.43\" \"seq.10011.65\" setdiff(apts2, no_crtl) #> [1] \"seq.2053.2\"  \"seq.2171.12\"  # clinical variables mvec <- getMeta(example_data) head(mvec, 10) #>  [1] \"PlateId\"         \"PlateRunDate\"    \"ScannerID\"       #>  [4] \"PlatePosition\"   \"SlideId\"         \"Subarray\"        #>  [7] \"SampleId\"        \"SampleType\"      \"PercentDilution\" #> [10] \"SampleMatrix\"    getMeta(example_data, n = TRUE) #> [1] 34  # test 'data.frame' and 'character' S3 methods are identical identical(getMeta(example_data), getMeta(names(example_data))) # TRUE #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getOutlierIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Flagged Ids From MAD Outlier Map ‚Äî getOutlierIds","title":"Get Flagged Ids From MAD Outlier Map ‚Äî getOutlierIds","text":"Return IDs flagged samples objects outlier_map class. Samples flagged based percent analytes (RFU columns) given sample identified outliers using median absolute deviation (MAD).","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getOutlierIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Flagged Ids From MAD Outlier Map ‚Äî getOutlierIds","text":"","code":"getOutlierIds(x, flags = 0.05, data = NULL, include = NULL)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getOutlierIds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Flagged Ids From MAD Outlier Map ‚Äî getOutlierIds","text":"x object class: outlier_map - calcOutlierMap() flags Numeric [0, 1]. \"outlier_map\", proportion analytes (columns) given sample must outliers flag placed right-axis, right-axis, thus flagging sample. NULL (default), 0.05 (5%) selected. data Optional. data originally used create map x. omitted, single column data frame returned. include Optional. Character vector column name(s) data include resulting data frame. Ignored data = NULL.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getOutlierIds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Flagged Ids From MAD Outlier Map ‚Äî getOutlierIds","text":"data.frame indices (idx) flagged samples, along additional variables specified include.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getOutlierIds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Flagged Ids From MAD Outlier Map ‚Äî getOutlierIds","text":"Caleb Scheidel","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/getOutlierIds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Flagged Ids From MAD Outlier Map ‚Äî getOutlierIds","text":"","code":"# flagged outliers # create a single sample outlier (12) out_adat <- example_data apts     <- getAnalytes(out_adat) out_adat[12, apts] <- out_adat[12, apts] * 10  om <- calcOutlierMap(out_adat) getOutlierIds(om, out_adat, flags = 0.05, include = c(\"Sex\", \"Subarray\")) #>   idx  Sex Subarray #> 1  12    M        5 #> 2  13 <NA>        4 #> 3  43 <NA>        8 #> 4  87 <NA>        6 #> 5 143 <NA>        4 #> 6 151 <NA>        4 #> 7 173 <NA>        4"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"S3 group generic methods apply group specific prototype functions RFU data soma_adat objects. clinical meta data transformed remain unmodified returned object (Math() Ops()) ignored Summary() group. See groupGeneric().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"","code":"# S3 method for class 'soma_adat' Math(x, ...)  antilog(x, base = 10)  # S3 method for class 'soma_adat' Ops(e1, e2 = NULL)  # S3 method for class 'soma_adat' Summary(..., na.rm = FALSE)  # S3 method for class 'soma_adat' e1 == e2"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"x soma_adat class object perform transformation. ... Additional arguments passed various group generics appropriate. base positive complex number: base respect logarithms computed. e1, e2 Objects. na.rm Logical. missing values removed?","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"soma_adat object dimensions input object feature columns transformed specified generic.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"antilog(): performs inverse anti-log transform numeric vector soma_adat object. note: default base = 10, differs log() default base e. Ops(soma_adat): performs binary mathematical operations class soma_adat. See Ops(). Summary(soma_adat): performs summary calculations class soma_adat. See Summary(). == : compares left- right-hand sides operator unless RHS also soma_adat, case diffAdats() invoked.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"math","dir":"Reference","previous_headings":"","what":"Math","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"Group members:   Commonly used generics group include: log(), log10(), log2(), antilog(), abs(), sign(), floor(), sqrt(), exp()","code":"#>  [1] \"abs\"      \"acos\"     \"acosh\"    \"asin\"     \"asinh\"    \"atan\" #>  [7] \"atanh\"    \"ceiling\"  \"cos\"      \"cosh\"     \"cospi\"    \"cummax\" #> [13] \"cummin\"   \"cumprod\"  \"cumsum\"   \"digamma\"  \"exp\"      \"expm1\" #> [19] \"floor\"    \"gamma\"    \"lgamma\"   \"log\"      \"log10\"    \"log1p\" #> [25] \"log2\"     \"sign\"     \"sin\"      \"sinh\"     \"sinpi\"    \"sqrt\" #> [31] \"tan\"      \"tanh\"     \"tanpi\"    \"trigamma\" \"trunc\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"ops","dir":"Reference","previous_headings":"","what":"Ops","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"Group members:   Note `==` method RHS also soma_adat, diffAdats() invoked compares LHS vs. RHS. Commonly used generics group include: +, -, *, /, ^, ==, >, <","code":"#>  [1] \"+\"   \"-\"   \"*\"   \"^\"   \"%%\"  \"%/%\" \"/\"   \"==\"  \">\"   \"<\"   \"!=\"  \"<=\" #> [13] \">=\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"summary","dir":"Reference","previous_headings":"","what":"Summary","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"Group members:   Commonly used generics group include: max(), min(), range(), sum(), ()","code":"#> [1] \"all\"   \"any\"   \"max\"   \"min\"   \"prod\"  \"range\" \"sum\""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/groupGenerics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Generics for soma_adat Class Objects ‚Äî groupGenerics","text":"","code":"# subset `example_data` for speed # all SeqIds from 2000 -> 2999 seqs <- grep(\"^seq\\\\.2[0-9]{3}\", names(example_data), value = TRUE) ex_data_small <- head(example_data[, c(getMeta(example_data), seqs)], 10L) dim(ex_data_small) #> [1]  10 264  ex_data_small$seq.2991.9 #>  [1] 4921.8 4392.2 4791.5 6017.2 5711.3 5092.4 4417.9 5394.3 6111.4 #> [10] 6045.2  # Math Generics: # ------------- # log-transformation a <- log(ex_data_small) a$seq.2991.9 #>  [1] 8.501430 8.387586 8.474599 8.702377 8.650202 8.535505 8.393420 #>  [8] 8.593098 8.717911 8.707020  b <- log10(ex_data_small) b$seq.2991.9 #>  [1] 3.692124 3.642682 3.680471 3.779394 3.756735 3.706923 3.645216 #>  [8] 3.731935 3.786141 3.781411 isTRUE(all.equal(b, log(ex_data_small, base = 10))) #> [1] TRUE  # floor c <- floor(ex_data_small) c$seq.2991.9 #>  [1] 4921 4392 4791 6017 5711 5092 4417 5394 6111 6045  # square-root d <- sqrt(ex_data_small) d$seq.2991.9 #>  [1] 70.15554 66.27368 69.22066 77.57061 75.57314 71.36105 66.46729 #>  [8] 73.44590 78.17544 77.75088  # rounding e <- round(ex_data_small) e$seq.2991.9 #>  [1] 4922 4392 4792 6017 5711 5092 4418 5394 6111 6045  # inverse log antilog(1:4) #> [1]    10   100  1000 10000  alog <- antilog(b) all.equal(ex_data_small, alog)    # return `b` -> linear space #> [1] TRUE  # Ops Generics: # ------------- plus1 <- ex_data_small + 1 times2 <- ex_data_small * 2  sq <- ex_data_small^2 all.equal(sqrt(sq), ex_data_small) #> [1] TRUE  gt100k <- ex_data_small > 100000 gt100k #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 10 #>      Columns              264 #>      Clinical Data        34 #>      Features             230 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 10 √ó 265 #>    row_names      PlateId  PlateRunDate ScannerID PlatePosition SlideId #>    <chr>          <chr>    <chr>        <chr>     <chr>           <dbl> #>  1 258495800012_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11 #>  2 258495800004_7 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11 #>  3 258495800010_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11 #>  4 258495800003_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H6            2.58e11 #>  5 258495800009_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H5            2.58e11 #>  6 258495800012_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H4            2.58e11 #>  7 258495800001_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H3            2.58e11 #>  8 258495800004_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H2            2.58e11 #>  9 258495800001_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H12           2.58e11 #> 10 258495800004_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H11           2.58e11 #> # ‚Ñπ 259 more variables: Subarray <dbl>, SampleId <chr>, #> #   SampleType <chr>, PercentDilution <int>, SampleMatrix <chr>, #> #   Barcode <lgl>, Barcode2d <chr>, SampleName <lgl>, #> #   SampleNotes <lgl>, AliquotingNotes <lgl>, ‚Ä¶ #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  ex_data_small == ex_data_small   # invokes diffAdats() #> ‚ïê‚ïê Checking ADAT attributes & characteristics ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> ‚Üí Attribute names are identical       ‚úì #> ‚Üí Attributes are identical            ‚úì #> ‚Üí ADAT dimensions are identical       ‚úì #> ‚Üí ADAT row names are identical        ‚úì #> ‚Üí ADATs contain identical Features    ‚úì #> ‚Üí ADATs contain same Meta Fields      ‚úì #> ‚îÄ‚îÄ Checking the data matrix ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Üí All Clinical data is identical      ‚úì #> ‚Üí All Feature data is identical       ‚úì #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> NULL  # Summary Generics: # ------------- sum(ex_data_small) #> [1] 24319326  any(ex_data_small < 100)  # low RFU analytes #> [1] TRUE  sum(ex_data_small < 100)  # how many #> [1] 67  min(ex_data_small) #> [1] 9.9  min(ex_data_small, 0) #> [1] 0  max(ex_data_small) #> [1] 213074.3  max(ex_data_small, 1e+7) #> [1] 1e+07  range(ex_data_small) #> [1]      9.9 213074.3"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_intact_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Are Attributes Intact? ‚Äî is_intact_attr","title":"Are Attributes Intact? ‚Äî is_intact_attr","text":"function runs series checks determine soma_adat object complete set attributes. , indicates object modified since initial read_adat() call. Checks presence \"Header.Meta\" \"Col.Meta\" attribute names. entries added read_adat() call. Specifically, within sections also checks presence following entries: \"Header.Meta\" section: \"HEADER\", \"COL_DATA\", \"ROW_DATA\" \"Col.Meta\" section: \"SeqId\", \"Target\", \"Units\", \"Dilution\" altered missing, FALSE returned. .intact.attributes() . remains backward compatibility may removed future. encouraged shift code is_intact_attr().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_intact_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are Attributes Intact? ‚Äî is_intact_attr","text":"","code":"is_intact_attr(adat, verbose = interactive())  is.intact.attributes(adat, verbose = interactive())"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_intact_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are Attributes Intact? ‚Äî is_intact_attr","text":"adat soma_adat object query. verbose Logical. diagnostic information failures printed console? default, see interactive(), invoked, messages via direct calls triggered. prohibits messages generated deep call stack bubbling user.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_intact_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are Attributes Intact? ‚Äî is_intact_attr","text":"Logical. TRUE checks pass, otherwise FALSE.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_intact_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are Attributes Intact? ‚Äî is_intact_attr","text":"","code":"# checking attributes my_adat <- example_data is_intact_attr(my_adat)           # TRUE #> [1] TRUE is_intact_attr(my_adat[, -303L])   # doesn't break atts; TRUE #> [1] TRUE attributes(my_adat)$Col.Meta$Target <- NULL    # break attributes is_intact_attr(my_adat)  # FALSE (Target missing) #> [1] FALSE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_seqFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Test AptName Format ‚Äî is_seqFormat","title":"Test AptName Format ‚Äî is_seqFormat","text":"Test whether object new seq.XXXX.XX format.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_seqFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test AptName Format ‚Äî is_seqFormat","text":"","code":"is_seqFormat(x)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_seqFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test AptName Format ‚Äî is_seqFormat","text":"x object tested.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_seqFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test AptName Format ‚Äî is_seqFormat","text":"logical indicating whether x contains AptNames consistent new format, beginning seq. prefix.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_seqFormat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test AptName Format ‚Äî is_seqFormat","text":"Stu Field, Eduardo Tabacman","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/is_seqFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test AptName Format ‚Äî is_seqFormat","text":"","code":"# character S3 method is_seqFormat(names(example_data))   # no; meta data not ^seq. #> [1] FALSE is_seqFormat(tail(names(example_data), -20L))   # yes #> [1] FALSE  # soma_adat S3 method is_seqFormat(example_data) #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":null,"dir":"Reference","previous_headings":"","what":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"SomaScan platform continually improves technical processes assay versions. primary change interest content expansion, protocol changes may implemented including: changing reagents, liquid handling equipment, well volumes. Table SomaScan assay versions: However, given analyte, technical upgrades can result minute measurement signal differences, requiring calibration (aka \"lifting\" \"bridging\") bring RFUs comparable signal space. accomplished applying analyte-specific scalar, linear transformation, analyte RFU measurement (column). annotations file (*.xlsx) wish examine bridging scalars , please see read_annotations(). Lifting SomaScan versions longer requires annotations file containing lifting scalars. now enable users pass bridge parameter, indicating direction bridge. example, \"lift\" 11k -> 7k, must acting SomaScan data 11k RFU space pass bridge = \"11k_to_7k\". Likewise, 7k -> 5k requires bridge = \"7k_to_5k\". Lastly, may also lift directly 11k -> 5k (aka \"double-bridge\") bridge = \"11k_to_5k\". See options bridge argument.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"","code":"lift_adat(   adat,   bridge = c(\"11k_to_7k\", \"11k_to_5k\", \"7k_to_11k\", \"7k_to_5k\", \"5k_to_11k\", \"5k_to_7k\"),   anno.tbl = deprecated() )  is_lifted(adat)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"adat soma_adat object (intact attributes), typically created using read_adat(). bridge direction lift (.e. bridge). anno.tbl . Please now use bridge argument.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"lift_adat(): \"lifted\" soma_adat object corresponding scaling requested bridge parameter. RFU values rounded 1 decimal place match standard SomaScan delivery format. is_lifted(): Logical. Whether RFU values soma_adat lifted original signal space new signal space.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"Matched samples across assay versions used calculate bridging scalars. analyte, scalar computed ratio population medians across assay versions. Please see lifting vignette vignette(\"lifting--bridging\", package = \"SomaDataIO\") details.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":"lin-s-ccc","dir":"Reference","previous_headings":"","what":"Lin's CCC","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"Lin's Concordance Correlation Coefficient (CCC) calculated computing correlation post-lift RFU values RFU values generated original SomaScan version. CCC estimate measure well analyte can bridged across SomaScan versions. See vignette(\"lifting--bridging\", package = \"SomaDataIO\"). lifting scalars, annotations file may view analyte-specific CCC values via read_annotations(). Alternatively, getSomaScanLiftCCC() retrieves values internal object \"serum\" \"plasma\".","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":"analyte-setdiff","dir":"Reference","previous_headings":"","what":"Analyte Setdiff","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"Newer versions SomaScan typically additional content, .e. new reagents added multi-plex assay bind additional proteins. lifting previous SomaScan version, new reagents exist \"earlier\" assay version assay scaled 1.0, thus maintained, unmodified returned object. Users may need drop columns order combine data previous study earlier SomaScan version, e.g. collapseAdats(). inverse scenario, lifting \"forward\" previous, lower-plex version, extra reference values unnecessary perform lift, warning triggered. resulting data consists RFU data \"new\" signal space, fewer analytes otherwise expected (e.g. 11k space 5284 analytes; see example ).","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"Lin, Lawrence -Kuei. 1989. Concordance Correlation Coefficient Evaluate Reproducibility. Biometrics. 45:255-268.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/lift_adat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lift an ADAT Between Assay Versions ‚Äî lift_adat","text":"","code":"# `example_data` is SomaScan (V4, 5k) adat <- head(example_data, 3L) dim(adat) #> [1]    3 5318  getSomaScanVersion(adat) #> [1] \"V4\"  getSignalSpace(adat) #> [1] \"V4\"  # perform 'lift' lift_11k <- lift_adat(adat, \"5k_to_11k\")  # warning #> Warning: There are extra scaling values (5799) in the reference. #> They will be ignored.  is_lifted(lift_11k) #> [1] TRUE  dim(lift_11k) #> [1]    3 5318  # attributes updated to reflect the 'lift' attr(lift_11k, \"Header\")$HEADER$SignalSpace #> [1] \"v5.0\"  attr(lift_11k, \"Header\")$HEADER$ProcessSteps #> [1] \"Raw RFU, Hyb Normalization, medNormInt (SampleId), plateScale, Calibration, anmlQC, qcCheck, anmlSMP, Lifting Bridge (5k -> 11k)\""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/loadAdatsAsList.html","id":null,"dir":"Reference","previous_headings":"","what":"Load ADAT files as a list ‚Äî loadAdatsAsList","title":"Load ADAT files as a list ‚Äî loadAdatsAsList","text":"Load series ADATs return list soma_adat objects, one ADAT file. collapseAdats() concatenates list ADATs loadAdatsAsList(), maintaining relevant attribute entries (mainly HEADER element). makes writing final object possible without loss HEADER information.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/loadAdatsAsList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load ADAT files as a list ‚Äî loadAdatsAsList","text":"","code":"loadAdatsAsList(files, collapse = FALSE, verbose = interactive(), ...)  collapseAdats(x)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/loadAdatsAsList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load ADAT files as a list ‚Äî loadAdatsAsList","text":"files character string files load. collapse Logical. resulting list ADATs collapsed single ADAT object? verbose Logical. function call run verbose mode. ... Additional arguments passed read_adat(). x list soma_adat class objects returned loadAdatsAsList().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/loadAdatsAsList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load ADAT files as a list ‚Äî loadAdatsAsList","text":"list ADATs named files, soma_adat object corresponding individual file files. collapseAdats(), single, collapsed soma_adat object.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/loadAdatsAsList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load ADAT files as a list ‚Äî loadAdatsAsList","text":"Note 1: default behavior \"vertically bind\" (rbind())  intersect column variables, unique columns silently dropped. Note 2: \"vertically binding\" column union desired, use dplyr::bind_rows(), however results NAs non-intersecting columns. many files little variable intersection, sparse RFU-matrix result (likely break ADAT attributes):","code":"adats <- loadAdatsAsList(files) union_adat <- dplyr::bind_rows(adats, .id = \"SourceFile\")"},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/loadAdatsAsList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load ADAT files as a list ‚Äî loadAdatsAsList","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/loadAdatsAsList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load ADAT files as a list ‚Äî loadAdatsAsList","text":"","code":"# only 1 file in directory dir(system.file(\"extdata\", package = \"SomaDataIO\")) #> [1] \"example_data10.adat\"  files <- system.file(\"extdata\", package = \"SomaDataIO\") |>   dir(pattern = \"[.]adat$\", full.names = TRUE) |> rev()  adats <- loadAdatsAsList(files) class(adats) #> [1] \"list\"  # collapse into 1 ADAT collapsed <- collapseAdats(adats) class(collapsed) #> [1] \"soma_adat\"  \"data.frame\"  # Alternatively use `collapse = TRUE` # \\donttest{   loadAdatsAsList(files, collapse = TRUE) #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 10 #>      Columns              5318 #>      Clinical Data        34 #>      Features             5284 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 10 √ó 5,319 #>    row_names      PlateId  PlateRunDate ScannerID PlatePosition SlideId #>    <chr>          <chr>    <chr>        <chr>     <chr>           <dbl> #>  1 258495800012_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11 #>  2 258495800004_7 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11 #>  3 258495800010_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11 #>  4 258495800003_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H6            2.58e11 #>  5 258495800009_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H5            2.58e11 #>  6 258495800012_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H4            2.58e11 #>  7 258495800001_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H3            2.58e11 #>  8 258495800004_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H2            2.58e11 #>  9 258495800001_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H12           2.58e11 #> 10 258495800004_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H11           2.58e11 #> # ‚Ñπ 5,313 more variables: Subarray <dbl>, SampleId <chr>, #> #   SampleType <chr>, PercentDilution <int>, SampleMatrix <chr>, #> #   Barcode <lgl>, Barcode2d <chr>, SampleName <lgl>, #> #   SampleNotes <lgl>, AliquotingNotes <lgl>, ‚Ä¶ #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê # }"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/merge_clin.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Clinical Data into SomaScan ‚Äî merge_clin","title":"Merge Clinical Data into SomaScan ‚Äî merge_clin","text":"Occasionally, additional clinical data obtained samples submitted SomaLogic, even 'SomaScan' results delivered. requires new clinical variables, .e. non-proteomic, data merged 'SomaScan' data \"new\" ADAT prior analysis. merge_clin() easily merges clinical variables existing soma_adat object simple wrapper around dplyr::left_join().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/merge_clin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Clinical Data into SomaScan ‚Äî merge_clin","text":"","code":"merge_clin(x, clin_data, by = NULL, by_class = NULL, ...)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/merge_clin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Clinical Data into SomaScan ‚Äî merge_clin","text":"x soma_adat object (intact attributes), typically created using read_adat(). clin_data One 2 options: data frame containing clinical variables merge x, path file, typically *.csv, containing clinical variables merge x. character vector variables join . See dplyr::left_join() details. by_class clin_data file path, named character vector variable class. ensures \"-key\" compatible join. example, c(SampleId = \"character\"). See read.table() details colClasses argument, also examples . ... Additional parameters passed dplyr::left_join().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/merge_clin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Clinical Data into SomaScan ‚Äî merge_clin","text":"soma_adat new clinical variables merged.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/merge_clin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge Clinical Data into SomaScan ‚Äî merge_clin","text":"functionality also exists command-line tool (R script) contained merge_clin.R lives cli/merge system file directory. Please see: dir(system.file(\"cli/merge\", package = \"SomaDataIO\"), full.names = TRUE) vignette(\"cli-merge-tool\", package = \"SomaDataIO\")","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/merge_clin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge Clinical Data into SomaScan ‚Äî merge_clin","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/merge_clin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Clinical Data into SomaScan ‚Äî merge_clin","text":"","code":"# retrieve clinical data clin_file <- system.file(\"cli/merge\", \"meta.csv\",                          package = \"SomaDataIO\",                          mustWork = TRUE) clin_file #> [1] \"/Users/runner/work/_temp/Library/SomaDataIO/cli/merge/meta.csv\"  # view clinical data to be merged: # 1) `group` # 2) `newvar` clin_df <- read.csv(clin_file, colClasses = c(SampleId = \"character\")) clin_df #>   SampleId group    newvar #> 1        1     a -0.757960 #> 2        3     b -0.363479 #> 3        5     a  1.010235 #> 4        7     b  1.342776 #> 5        9     a -3.010827  # create mini-adat apts <- withr::with_seed(123, sample(getAnalytes(example_data), 2L)) adat <- head(example_data, 9L) |>   # 9 x 2   dplyr::select(SampleId, all_of(apts))  # merge clinical variables merged <- merge_clin(adat, clin_df, by = \"SampleId\") merged #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 9 #>      Columns              5 #>      Clinical Data        3 #>      Features             2 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 9 √ó 6 #>   row_names      SampleId seq.19251.56 seq.19328.51 group newvar #>   <chr>          <chr>           <dbl>        <dbl> <chr>  <dbl> #> 1 258495800012_3 1               2933.         504  a     -0.758 #> 2 258495800004_7 2               1995.         439. NA    NA     #> 3 258495800010_8 3               3424.         421. b     -0.363 #> 4 258495800003_4 4               2989.         468. NA    NA     #> 5 258495800009_4 5               5078.         474. a      1.01  #> 6 258495800012_8 6               6131.         546. NA    NA     #> 7 258495800001_3 7               3865          468. b      1.34  #> 8 258495800004_8 8               6865.         469. NA    NA     #> 9 258495800001_8 9               9204.         494. a     -3.01  #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # Alternative syntax: #   1) pass file path #   2) merge on different variable names #   3) convert join type on-the-fly clin_file2 <- system.file(\"cli/merge\", \"meta2.csv\",                           package = \"SomaDataIO\",                           mustWork = TRUE)  id_type <- typeof(adat$SampleId) merged2 <- merge_clin(adat, clin_file2,                # file path                       by = c(SampleId = \"ClinKey\"),    # join on 2 variables                       by_class = c(ClinKey = id_type)) # match types merged2 #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 9 #>      Columns              5 #>      Clinical Data        3 #>      Features             2 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 9 √ó 6 #>   row_names      SampleId seq.19251.56 seq.19328.51 group newvar #>   <chr>          <chr>           <dbl>        <dbl> <chr>  <dbl> #> 1 258495800012_3 1               2933.         504  a     -0.758 #> 2 258495800004_7 2               1995.         439. NA    NA     #> 3 258495800010_8 3               3424.         421. b     -0.363 #> 4 258495800003_4 4               2989.         468. NA    NA     #> 5 258495800009_4 5               5078.         474. a      1.01  #> 6 258495800012_8 6               6131.         546. NA    NA     #> 7 258495800001_3 7               3865          468. b      1.34  #> 8 258495800004_8 8               6865.         469. NA    NA     #> 9 258495800001_8 9               9204.         494. a     -3.01  #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"Common Parameters in SomaDataIO ‚Äî params","title":"Common Parameters in SomaDataIO ‚Äî params","text":"parameters commonly used throughout SomaDataIO package.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common Parameters in SomaDataIO ‚Äî params","text":"adat soma_adat object (intact attributes), typically created using read_adat(). x soma_adat object (intact attributes), typically created using read_adat(). matrix Character. string (usually) either \"serum\" \"plasma\".","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common Parameters in SomaDataIO ‚Äî params","text":"soma_adat class object.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/parseHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"SomaLogic ADAT parser ‚Äî parseHeader","title":"SomaLogic ADAT parser ‚Äî parseHeader","text":"Parses header section ADAT file.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/parseHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SomaLogic ADAT parser ‚Äî parseHeader","text":"","code":"parseHeader(file)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/parseHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SomaLogic ADAT parser ‚Äî parseHeader","text":"file Character. elaborated path file name *.adat file loaded R workspace environment.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/parseHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SomaLogic ADAT parser ‚Äî parseHeader","text":"list relevant file information required read_adat() order complete loading ADAT file, including: Header.Meta list notes information adat Col.Meta list vectors contain column meta data individual analytes, includes information target name calibration QC ratios file_specs list values file parsing specifications row_meta character vector clinical variables; assay information included adat output along RFU data","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/parseHeader.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SomaLogic ADAT parser ‚Äî parseHeader","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/parseHeader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SomaLogic ADAT parser ‚Äî parseHeader","text":"","code":"f <- system.file(\"extdata\", \"example_data10.adat\",                  package = \"SomaDataIO\", mustWork = TRUE) header <- parseHeader(f) names(header) #> [1] \"Header.Meta\" \"Col.Meta\"    \"file_specs\"  \"row_meta\"     header$Header.Meta #> $HEADER #> $HEADER$AdatId #> [1] \"GID-1234-56-789-abcdef\" #> attr(,\"raw_key\") #> [1] \"!AdatId\" #>  #> $HEADER$Version #> [1] \"1.2\" #> attr(,\"raw_key\") #> [1] \"!Version\" #>  #> $HEADER$AssayType #> [1] \"PharmaServices\" #> attr(,\"raw_key\") #> [1] \"!AssayType\" #>  #> $HEADER$AssayVersion #> [1] \"V4\" #> attr(,\"raw_key\") #> [1] \"!AssayVersion\" #>  #> $HEADER$AssayRobot #> [1] \"Fluent 1 L-307\" #> attr(,\"raw_key\") #> [1] \"!AssayRobot\" #>  #> $HEADER$Legal #> [1] \"Experiment details and data have been processed to protect Personally Identifiable Information (PII) and comply with existing privacy laws.\" #> attr(,\"raw_key\") #> [1] \"!Legal\" #>  #> $HEADER$CreatedBy #> [1] \"PharmaServices\" #> attr(,\"raw_key\") #> [1] \"!CreatedBy\" #>  #> $HEADER$CreatedDate #> [1] \"2020-07-24\" #> attr(,\"raw_key\") #> [1] \"!CreatedDate\" #>  #> $HEADER$EnteredBy #> [1] \"Technician1\" #> attr(,\"raw_key\") #> [1] \"!EnteredBy\" #>  #> $HEADER$ExpDate #> [1] \"2020-06-18, 2020-07-20\" #> attr(,\"raw_key\") #> [1] \"!ExpDate\" #>  #> $HEADER$GeneratedBy #> [1] \"Px (Build:  : ), Canopy_0.1.1\" #> attr(,\"raw_key\") #> [1] \"!GeneratedBy\" #>  #> $HEADER$RunNotes #> [1] \"2 columns ('Age' and 'Sex') have been added to this ADAT. Age has been randomly increased or decreased by 1-2 years to protect patient information\" #> attr(,\"raw_key\") #> [1] \"!RunNotes\" #>  #> $HEADER$ProcessSteps #> [1] \"Raw RFU, Hyb Normalization, medNormInt (SampleId), plateScale, Calibration, anmlQC, qcCheck, anmlSMP\" #> attr(,\"raw_key\") #> [1] \"!ProcessSteps\" #>  #> $HEADER$ProteinEffectiveDate #> [1] \"2019-08-06\" #> attr(,\"raw_key\") #> [1] \"!ProteinEffectiveDate\" #>  #> $HEADER$StudyMatrix #> [1] \"EDTA Plasma\" #> attr(,\"raw_key\") #> [1] \"!StudyMatrix\" #>  #> $HEADER$PlateType #> character(0) #> attr(,\"raw_key\") #> [1] \"!PlateType\" #>  #> $HEADER$LabLocation #> [1] \"SLUS\" #> attr(,\"raw_key\") #> [1] \"!LabLocation\" #>  #> $HEADER$StudyOrganism #> character(0) #> attr(,\"raw_key\") #> [1] \"!StudyOrganism\" #>  #> $HEADER$Title #> [1] \"Example Adat Set001, Example Adat Set002\" #> attr(,\"raw_key\") #> [1] \"!Title\" #>  #> $HEADER$AssaySite #> [1] \"SW\" #> attr(,\"raw_key\") #> [1] \"!AssaySite\" #>  #> $HEADER$CalibratorId #> [1] \"170261\" #> attr(,\"raw_key\") #> [1] \"!CalibratorId\" #>  #> $HEADER$ReportConfig #> [1] \"{\\\"analysisSteps\\\":[{\\\"stepType\\\":\\\"hybNorm\\\",\\\"referenceSource\\\":\\\"intraplate\\\",\\\"includeSampleTypes\\\":[\\\"QC\\\",\\\"Calibrator\\\",\\\"Buffer\\\"]},{\\\"stepName\\\":\\\"medNormInt\\\",\\\"stepType\\\":\\\"medNorm\\\",\\\"includeSampleTypes\\\":[\\\"Calibrator\\\",\\\"Buffer\\\"],\\\"referenceSource\\\":\\\"intraplate\\\",\\\"referenceFields\\\":[\\\"SampleId\\\"]},{\\\"stepType\\\":\\\"plateScale\\\",\\\"referenceSource\\\":\\\"Reference_v4_Plasma_Calibrator_170261\\\"},{\\\"stepType\\\":\\\"calibrate\\\",\\\"referenceSource\\\":\\\"Reference_v4_Plasma_Calibrator_170261\\\"},{\\\"stepName\\\":\\\"anmlQC\\\",\\\"stepType\\\":\\\"ANML\\\",\\\"effectSizeCutoff\\\":2.0,\\\"minFractionUsed\\\":0.3,\\\"includeSampleTypes\\\":[\\\"QC\\\"],\\\"referenceSource\\\":\\\"Reference_v4_Plasma_ANML\\\"},{\\\"stepType\\\":\\\"qcCheck\\\",\\\"QCReferenceSource\\\":\\\"Reference_v4_Plasma_QC_ANML_170255\\\",\\\"tailsCriteriaLower\\\":0.8,\\\"tailsCriteriaUpper\\\":1.2,\\\"tailThreshold\\\":15.0,\\\"QCAdditionalReferenceSources\\\":[\\\"Reference_v4_Plasma_QC_ANML_170259\\\",\\\"Reference_v4_Plasma_QC_ANML_170260\\\"],\\\"prenormalized\\\":true},{\\\"stepName\\\":\\\"anmlSMP\\\",\\\"stepType\\\":\\\"ANML\\\",\\\"effectSizeCutoff\\\":2.0,\\\"minFractionUsed\\\":0.3,\\\"includeSampleTypes\\\":[\\\"Sample\\\"],\\\"referenceSource\\\":\\\"Reference_v4_Plasma_ANML\\\"}],\\\"qualityReports\\\":[\\\"SQS Report\\\"],\\\"filter\\\":{\\\"proteinEffectiveDate\\\":\\\"2019-08-06\\\"}}\" #> attr(,\"raw_key\") #> [1] \"!ReportConfig\" #>  #> $HEADER$HybNormReference #> [1] \"intraplate\" #> attr(,\"raw_key\") #> [1] \"HybNormReference\" #>  #> $HEADER$MedNormReference #> [1] \"intraplate\" #> attr(,\"raw_key\") #> [1] \"MedNormReference\" #>  #> $HEADER$NormalizationAlgorithm #> [1] \"ANML\" #> attr(,\"raw_key\") #> [1] \"NormalizationAlgorithm\" #>  #> $HEADER$PlateScale_ReferenceSource #> [1] \"Reference_v4_Plasma_Calibrator_170261\" #> attr(,\"raw_key\") #> [1] \"PlateScale_ReferenceSource\" #>  #> $HEADER$PlateScale_Scalar_Example_Adat_Set001 #> [1] \"1.08091554\" #> attr(,\"raw_key\") #> [1] \"PlateScale_Scalar_Example_Adat_Set001\" #>  #> $HEADER$PlateScale_PassFlag_Example_Adat_Set001 #> [1] \"PASS\" #> attr(,\"raw_key\") #> [1] \"PlateScale_PassFlag_Example_Adat_Set001\" #>  #> $HEADER$CalibrationReference #> [1] \"Reference_v4_Plasma_Calibrator_170261\" #> attr(,\"raw_key\") #> [1] \"CalibrationReference\" #>  #> $HEADER$CalPlateTailPercent_Example_Adat_Set001 #> [1] \"0.1\" #> attr(,\"raw_key\") #> [1] \"CalPlateTailPercent_Example_Adat_Set001\" #>  #> $HEADER$PlateTailPercent_Example_Adat_Set001 #> [1] \"1.2\" #> attr(,\"raw_key\") #> [1] \"PlateTailPercent_Example_Adat_Set001\" #>  #> $HEADER$PlateTailTest_Example_Adat_Set001 #> [1] \"PASS\" #> attr(,\"raw_key\") #> [1] \"PlateTailTest_Example_Adat_Set001\" #>  #> $HEADER$PlateScale_Scalar_Example_Adat_Set002 #> [1] \"1.09915270\" #> attr(,\"raw_key\") #> [1] \"PlateScale_Scalar_Example_Adat_Set002\" #>  #> $HEADER$PlateScale_PassFlag_Example_Adat_Set002 #> [1] \"PASS\" #> attr(,\"raw_key\") #> [1] \"PlateScale_PassFlag_Example_Adat_Set002\" #>  #> $HEADER$CalPlateTailPercent_Example_Adat_Set002 #> [1] \"2.6\" #> attr(,\"raw_key\") #> [1] \"CalPlateTailPercent_Example_Adat_Set002\" #>  #> $HEADER$PlateTailPercent_Example_Adat_Set002 #> [1] \"4.2\" #> attr(,\"raw_key\") #> [1] \"PlateTailPercent_Example_Adat_Set002\" #>  #> $HEADER$PlateTailTest_Example_Adat_Set002 #> [1] \"PASS\" #> attr(,\"raw_key\") #> [1] \"PlateTailTest_Example_Adat_Set002\" #>  #>  #> $COL_DATA #> $COL_DATA$Name #>  [1] \"SeqId\"                                 #>  [2] \"SeqIdVersion\"                          #>  [3] \"SomaId\"                                #>  [4] \"TargetFullName\"                        #>  [5] \"Target\"                                #>  [6] \"UniProt\"                               #>  [7] \"EntrezGeneID\"                          #>  [8] \"EntrezGeneSymbol\"                      #>  [9] \"Organism\"                              #> [10] \"Units\"                                 #> [11] \"Type\"                                  #> [12] \"Dilution\"                              #> [13] \"PlateScale_Reference\"                  #> [14] \"CalReference\"                          #> [15] \"Cal_Example_Adat_Set001\"               #> [16] \"ColCheck\"                              #> [17] \"CalQcRatio_Example_Adat_Set001_170255\" #> [18] \"QcReference_170255\"                    #> [19] \"Cal_Example_Adat_Set002\"               #> [20] \"CalQcRatio_Example_Adat_Set002_170255\" #> attr(,\"raw_key\") #> [1] \"!Name\" #>  #> $COL_DATA$Type #>  [1] \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" #>  [8] \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" #> [15] \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" #> attr(,\"raw_key\") #> [1] \"!Type\" #>  #>  #> $ROW_DATA #> $ROW_DATA$Name #>  [1] \"PlateId\"                \"PlateRunDate\"           #>  [3] \"ScannerID\"              \"PlatePosition\"          #>  [5] \"SlideId\"                \"Subarray\"               #>  [7] \"SampleId\"               \"SampleType\"             #>  [9] \"PercentDilution\"        \"SampleMatrix\"           #> [11] \"Barcode\"                \"Barcode2d\"              #> [13] \"SampleName\"             \"SampleNotes\"            #> [15] \"AliquotingNotes\"        \"SampleDescription\"      #> [17] \"AssayNotes\"             \"TimePoint\"              #> [19] \"ExtIdentifier\"          \"SsfExtId\"               #> [21] \"SampleGroup\"            \"SiteId\"                 #> [23] \"TubeUniqueID\"           \"CLI\"                    #> [25] \"HybControlNormScale\"    \"RowCheck\"               #> [27] \"NormScale_20\"           \"NormScale_0_005\"        #> [29] \"NormScale_0_5\"          \"ANMLFractionUsed_20\"    #> [31] \"ANMLFractionUsed_0_005\" \"ANMLFractionUsed_0_5\"   #> [33] \"Age\"                    \"Sex\"                    #> attr(,\"raw_key\") #> [1] \"!Name\" #>  #> $ROW_DATA$Type #>  [1] \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" #>  [8] \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" #> [15] \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" #> [22] \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" #> [29] \"String\" \"String\" \"String\" \"String\" \"String\" \"String\" #> attr(,\"raw_key\") #> [1] \"!Type\" #>  #>  #> $TABLE_BEGIN #> [1] \"example_data10.adat\" #>   header$file_specs #> $empty_adat #> [1] FALSE #>  #> $table_begin #> [1] 45 #>  #> $col_meta_start #> [1] 46 #>  #> $col_meta_shift #> [1] 35 #>  #> $data_begin #> [1] 66 #>  #> $old_adat #> [1] FALSE #>   header$row_meta #>  [1] \"PlateId\"                \"PlateRunDate\"           #>  [3] \"ScannerID\"              \"PlatePosition\"          #>  [5] \"SlideId\"                \"Subarray\"               #>  [7] \"SampleId\"               \"SampleType\"             #>  [9] \"PercentDilution\"        \"SampleMatrix\"           #> [11] \"Barcode\"                \"Barcode2d\"              #> [13] \"SampleName\"             \"SampleNotes\"            #> [15] \"AliquotingNotes\"        \"SampleDescription\"      #> [17] \"AssayNotes\"             \"TimePoint\"              #> [19] \"ExtIdentifier\"          \"SsfExtId\"               #> [21] \"SampleGroup\"            \"SiteId\"                 #> [23] \"TubeUniqueID\"           \"CLI\"                    #> [25] \"HybControlNormScale\"    \"RowCheck\"               #> [27] \"NormScale_20\"           \"NormScale_0_005\"        #> [29] \"NormScale_0_5\"          \"ANMLFractionUsed_20\"    #> [31] \"ANMLFractionUsed_0_005\" \"ANMLFractionUsed_0_5\"   #> [33] \"Age\"                    \"Sex\"                     head(as.data.frame(header$Col.Meta)) #>      SeqId SeqIdVersion   SomaId #> 1 10000-28            3 SL019233 #> 2  10001-7            3 SL002564 #> 3 10003-15            3 SL019245 #> 4 10006-25            3 SL019228 #> 5 10008-43            3 SL019234 #> 6 10011-65            3 SL019246 #>                                       TargetFullName Target UniProt #> 1                                 Beta-crystallin B2  CRBB2  P43320 #> 2 RAF proto-oncogene serine/threonine-protein kinase  c-Raf  P04049 #> 3                             Zinc finger protein 41  ZNF41  P51814 #> 4                ETS domain-containing protein Elk-1   ELK1  P19419 #> 5              Guanylyl cyclase-activating protein 1  GUC1A  P43080 #> 6        Inositol polyphosphate 5-phosphatase OCRL-1   OCRL  Q01968 #>   EntrezGeneID EntrezGeneSymbol Organism Units    Type Dilution #> 1         1415           CRYBB2    Human   RFU Protein       20 #> 2         5894             RAF1    Human   RFU Protein       20 #> 3         7592            ZNF41    Human   RFU Protein      0.5 #> 4         2002             ELK1    Human   RFU Protein       20 #> 5         2978           GUCA1A    Human   RFU Protein       20 #> 6         4952             OCRL    Human   RFU Protein       20 #>   PlateScale_Reference CalReference Cal_Example_Adat_Set001 ColCheck #> 1                687.4        687.4              1.01252025     PASS #> 2                227.8        227.8              1.01605709     PASS #> 3                126.9        126.9              0.95056180     PASS #> 4                634.2        634.2              0.99607350     PASS #> 5                585.0        585.0              0.94051447     PASS #> 6               2807.1       2807.1              1.05383489     PASS #>   CalQcRatio_Example_Adat_Set001_170255 QcReference_170255 #> 1                                 1.008              505.4 #> 2                                 0.970              223.9 #> 3                                 1.046              119.6 #> 4                                 1.042              667.2 #> 5                                 1.036              587.5 #> 6                                 0.975             2617.6 #>   Cal_Example_Adat_Set002 CalQcRatio_Example_Adat_Set002_170255 #> 1              1.01476233                                 1.067 #> 2              1.03686846                                 1.007 #> 3              1.15258856                                 0.981 #> 4              0.93581231                                 1.026 #> 5              0.96201283                                 0.998 #> 6              1.03133955                                 1.013"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pivotExpressionSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Long Format ‚Äî pivotExpressionSet","title":"Convert to Long Format ‚Äî pivotExpressionSet","text":"Utility convert ExpressionSet class object \"wide\" data format \"long\" format via tidyr::pivot_longer(). Biobase package required function.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pivotExpressionSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Long Format ‚Äî pivotExpressionSet","text":"","code":"pivotExpressionSet(eSet)  meltExpressionSet(eSet)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pivotExpressionSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Long Format ‚Äî pivotExpressionSet","text":"eSet ExpressionSet class object, created using adat2eSet().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pivotExpressionSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Long Format ‚Äî pivotExpressionSet","text":"tibble consisting long format conversion ExpressionSet object.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pivotExpressionSet.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert to Long Format ‚Äî pivotExpressionSet","text":"meltExpressionSet(): . Please now use pivotExpressionSet().","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pivotExpressionSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert to Long Format ‚Äî pivotExpressionSet","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/pivotExpressionSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to Long Format ‚Äî pivotExpressionSet","text":"","code":"# subset into a reduced mini-ADAT object # 10 samples (rows) # 5 clinical variables and 3 features (cols) sub_adat <- example_data[1:10, c(1:5, 35:37)] ex_set   <- adat2eSet(sub_adat)  # convert ExpressionSet object to long format adat_long <- pivotExpressionSet(ex_set)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/plot.Map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Image Maps ‚Äî plot.Map","title":"Plot Image Maps ‚Äî plot.Map","text":"Plotting function objects outlier_map class. Produces heatmap-style image using ggplot2 syntax, objects produced calcOutlierMap().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/plot.Map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Image Maps ‚Äî plot.Map","text":"","code":"# S3 method for class 'Map' plot(   x,   color.scheme = NULL,   legend.ticks = 7,   gridlines = NULL,   gridlinecol = \"red\",   gridlinelwd = 0.5,   gridlinelty = 2,   main = NULL,   y.lab = NULL,   x.lab = NULL,   flags = NULL,   legend.width = 1,   legend.height = 2,   filename = NULL,   plot.width = 14,   plot.height = 8,   plot.scale = 1,   ... )"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/plot.Map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Image Maps ‚Äî plot.Map","text":"x object class: outlier_map color.scheme color scheme use. Typical choices include: gplots::redgreen() gplots::bluered() grDevices::heat.colors() grDevices::terrain.colors() grDevices::topo.colors() RColorBrewer::brewer.pal() viridis::viridis() viridis::magma() legend.ticks many ticks place color legend. gridlines Numeric vector logical. Indicates draw horizontal grid lines can used separate samples (rows). vector cumulative sum horizontal lines drawn, typically something like cumsum(table(data$Sex)). Alternatively, TRUE can passed whereby lines determined \"class.tab\" element x$class.tab (possible). gridlinecol Color gridlines. gridlinelwd Width gridlines. gridlinelty Line type gridlines. main Character. Main title plot. See ggplot2::ggtitle() ggplot2 style graphics. y.lab Character. Optional string y-axis. Otherwise one automatically generated (default). x.lab Character. Optional string x-axis. Otherwise one automatically generated (default). flags Numeric [0, 1]. \"outlier_map\", proportion analytes (columns) given sample must outliers flag placed right-axis, right-axis, thus flagging sample. NULL (default), 0.05 (5%) selected. legend.width Width color legend. legend.height Height color legend. filename Optional. provided, plot written file. file name must also include desired file type extension; used determine file type, e.g. file named foo.png saved PNG. See ggplot2::ggsave() full list file type (device) options. plot.width \"filename != NULL\", width plot image file. plot.height \"filename != NULL\", height plot image file. plot.scale \"filename != NULL\", scale plot image file. ... Arguments required plot() generic. Currently unused.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/plot.Map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Image Maps ‚Äî plot.Map","text":"Plot image passed matrix.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/plot.Map.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Image Maps ‚Äî plot.Map","text":"Stu Field, Amanda Hiser","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/plot.Map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Image Maps ‚Äî plot.Map","text":"","code":"example_data |>   dplyr::filter(SampleType == \"Sample\") |>   head(10) |>   calcOutlierMap() |>   plot(flags = 0.05) #> ‚Üí No observations were flagged at this flagging proportion: 0.05"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/preProcessAdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-Process an ADAT Object for Analysis ‚Äî preProcessAdat","title":"Pre-Process an ADAT Object for Analysis ‚Äî preProcessAdat","text":"Pre-process ADAT file containing raw analyte RFU values preparation analysis. details please refer pre-processing -article","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/preProcessAdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-Process an ADAT Object for Analysis ‚Äî preProcessAdat","text":"","code":"preProcessAdat(   adat,   filter.features = TRUE,   filter.controls = TRUE,   filter.qc = TRUE,   filter.outliers = FALSE,   data.qc = NULL,   log.10 = FALSE,   center.scale = FALSE )"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/preProcessAdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-Process an ADAT Object for Analysis ‚Äî preProcessAdat","text":"adat soma_adat object created using read_adat(), including SeqId columns (seq.xxxxx.xx) containing raw RFU values. filter.features Logical. non-human protein features (SeqIds) dropped? Default TRUE. filter.controls Logical. SomaScan technical control samples dropped? TRUE, retains samples SampleType = \"Sample\" (study samples) discards others including buffer, calibrator, QC control samples. Default TRUE. filter.qc Logical. TRUE samples pass default normalization acceptance criteria retained. Default TRUE. filter.outliers Logical. adat object drop outlier samples? outlier sample defined >= 5% filtered SeqIds exceeding +/- 6 MAD 5x fold-change median signal. filter typically appropriate studies plasma, serum, biological matrices generally exhibiting homeostatic characteristics. studies matrices tissue homogenate, cell culture, study designs containing client-provided background lysis buffer controls (similar), filter likely appropriate. Default FALSE. set TRUE highly recommended filter.controls also set TRUE data.qc Character. Character vector variable names data QC plots desired. Default NULL, generate QC plots.  Note: plots visual inspection , samples features dropped output soma_adat object. log.10 Logical. RFU values log10 transformed? Default FALSE. center.scale Logical. RFU values Z-transformed (centered scaled)? Default FALSE. set set TRUE highly recommended log.10 also set TRUE","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/preProcessAdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-Process an ADAT Object for Analysis ‚Äî preProcessAdat","text":"soma_adat object.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/preProcessAdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-Process an ADAT Object for Analysis ‚Äî preProcessAdat","text":"soma_adat object pre-processed following steps: Filter features -> human protein analytes Filter samples -> following order criteria: ) Retain study samples (dropping buffer, calibrator, QC samples) b) pass default normalization acceptance criteria c) identified outliers. Data QC -> plots normalization scale factors clinical covariates Transformations -> log10, center, scale analyte RFU values","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/preProcessAdat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pre-Process an ADAT Object for Analysis ‚Äî preProcessAdat","text":"Caleb Scheidel","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/preProcessAdat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-Process an ADAT Object for Analysis ‚Äî preProcessAdat","text":"","code":"preProcessAdat(example_data, data.qc = c(\"Age\", \"Sex\")) #> ‚úî 305 non-human protein features were removed. #> ‚Üí 214 human proteins did not pass standard QC #> acceptance criteria and were flagged in `ColCheck`.  These features #> were not removed, as they still may yield useful information in an #> analysis, but further evaluation may be needed. #> ‚úî 6 buffer samples were removed. #> ‚úî 10 calibrator samples were removed. #> ‚úî 6 QC samples were removed. #> ‚úî 2 samples flagged in `RowCheck` did not #> pass standard normalization acceptance criteria (0.4 <= x <= 2.5) #> and were removed. #> ‚Üí Data QC plots were generated: #> $Age  #>  #> $Sex  #>  #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 168 #>      Columns              5013 #>      Clinical Data        34 #>      Features             4979 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 168 √ó 5,014 #>    row_names      PlateId  PlateRunDate ScannerID PlatePosition SlideId #>    <chr>          <chr>    <chr>        <chr>     <chr>           <dbl> #>  1 258495800012_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11 #>  2 258495800004_7 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11 #>  3 258495800010_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11 #>  4 258495800003_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H6            2.58e11 #>  5 258495800009_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H5            2.58e11 #>  6 258495800012_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H4            2.58e11 #>  7 258495800001_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H3            2.58e11 #>  8 258495800004_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H2            2.58e11 #>  9 258495800001_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H12           2.58e11 #> 10 258495800009_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H10           2.58e11 #> # ‚Ñπ 158 more rows #> # ‚Ñπ 5,008 more variables: Subarray <dbl>, SampleId <chr>, #> #   SampleType <chr>, PercentDilution <int>, SampleMatrix <chr>, #> #   Barcode <lgl>, Barcode2d <chr>, SampleName <lgl>, #> #   SampleNotes <lgl>, AliquotingNotes <lgl>, ‚Ä¶ #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_adat.html","id":null,"dir":"Reference","previous_headings":"","what":"Read (Load) SomaLogic ADATs ‚Äî read_adat","title":"Read (Load) SomaLogic ADATs ‚Äî read_adat","text":"parse load *.adat file data.frame-like object R workspace environment. class returned object soma_adat object. read.adat() . backward compatibility likely never go away completely, strongly encouraged shift code use read_adat(). .soma_adat() checks whether object class soma_adat. See inherits().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_adat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read (Load) SomaLogic ADATs ‚Äî read_adat","text":"","code":"read_adat(file, debug = FALSE, verbose = getOption(\"verbose\"), ...)  read.adat(file, debug = FALSE, verbose = getOption(\"verbose\"), ...)  is.soma_adat(x)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_adat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read (Load) SomaLogic ADATs ‚Äî read_adat","text":"file Character. elaborated path file name *.adat file loaded R workspace. debug Logical. Used debugging development ADAT fails load, particularly --spec, poorly modified, legacy ADATs. verbose Logical. function call run verbose mode, printing relevant diagnostic call information console. ... Additional arguments passed ultimately read.delim(), additional arguments passed either S3 print summary methods required generics. x R object test.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_adat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read (Load) SomaLogic ADATs ‚Äî read_adat","text":"data.frame-like object class soma_adat consisting SomaLogic RFU (feature) data clinical meta data columns, samples rows. Row names labeled unique ID \"SlideId_Subarray\" concatenation. sections ADAT header (e.g., \"Header.Meta\", \"Col.Meta\", ...) stored attributes (e.g. attributes(x)$Header.Meta). Logical. Whether x inherits class soma_adat.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_adat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read (Load) SomaLogic ADATs ‚Äî read_adat","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_adat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read (Load) SomaLogic ADATs ‚Äî read_adat","text":"","code":"# path to *.adat file # replace with your file path adat_path <- system.file(\"extdata\", \"example_data10.adat\",                          package = \"SomaDataIO\", mustWork = TRUE) adat_path #> [1] \"/Users/runner/work/_temp/Library/SomaDataIO/extdata/example_data10.adat\"  my_adat <- read_adat(adat_path)  is.soma_adat(my_adat) #> [1] TRUE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a SomaLogic Annotations File ‚Äî read_annotations","title":"Import a SomaLogic Annotations File ‚Äî read_annotations","text":"Import SomaLogic Annotations File","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a SomaLogic Annotations File ‚Äî read_annotations","text":"","code":"read_annotations(file)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a SomaLogic Annotations File ‚Äî read_annotations","text":"file path annotations file location. sanctioned, versioned file provided Standard BioTools, Inc. unmodified *.xlsx file.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a SomaLogic Annotations File ‚Äî read_annotations","text":"tibble containing analyte-specific annotations related (e.g. lift/bridging) information, keyed SomaLogic SeqId, unique SomaScan analyte identifier.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/read_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a SomaLogic Annotations File ‚Äî read_annotations","text":"","code":"if (FALSE) { # \\dontrun{   # for example   file <- \"~/Downloads/SomaScan_11K_Annotated_Content.xlsx\"   anno_tbl <- read_annotations(file) } # }"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. dplyr anti_join, arrange, count, filter, full_join, group_by, inner_join, left_join, mutate, rename, right_join, sample_frac, sample_n, semi_join, slice, slice_sample, ungroup tidyr separate, unite","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/rownames.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for Working With Row Names ‚Äî rownames","title":"Helpers for Working With Row Names ‚Äî rownames","text":"Easily move row names column vice-versa without unwanted side-effects object class attributes. Drop-replacement tibble::rownames_to_column() tibble::column_to_rownames() can undesired side-effects complex object attributes. import external packages, modify environment, change object (desired column). using col2rn(), explicit row names exist, overwritten warning. add_rowid() affect row names, differs tibble::rowid_to_column().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/rownames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for Working With Row Names ‚Äî rownames","text":"","code":"rn2col(data, name = \".rn\")  col2rn(data, name = \".rn\")  has_rn(data)  rm_rn(data)  set_rn(data, value)  add_rowid(data, name = \".rowid\")"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/rownames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for Working With Row Names ‚Äî rownames","text":"data object inherits class data.frame. Typically soma_adat class object. name Character. name column move. value Character. new set names data frame. duplicates exist modified --fly via make.unique().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/rownames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for Working With Row Names ‚Äî rownames","text":"functions attempt return object class input fully intact unmodified attributes (aside required desired action). has_rn() returns scalar logical.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/rownames.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helpers for Working With Row Names ‚Äî rownames","text":"rn2col(): moves row names data explicit column whether explicit implicit. col2rn(): inverse rn2col(). row names exist, overwritten (warning). has_rn(): returns boolean indicating whether data frame explicit row names assigned. rm_rn(): removes existing row names, leaving \"implicit\" row names. set_rn(): sets (overwrites) existing row names data frames . add_rowid(): adds sequential integer row identifier; starting 1:nrow(data). remove existing row names currently, may future (please code accordingly).","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/rownames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers for Working With Row Names ‚Äî rownames","text":"","code":"df <- data.frame(a = 1:5, b = rnorm(5), row.names = LETTERS[1:5]) df #>   a           b #> A 1  0.07003485 #> B 2 -0.63912332 #> C 3 -0.04996490 #> D 4 -0.25148344 #> E 5  0.44479712 rn2col(df)              # default name is `.rn` #>   .rn a           b #> 1   A 1  0.07003485 #> 2   B 2 -0.63912332 #> 3   C 3 -0.04996490 #> 4   D 4 -0.25148344 #> 5   E 5  0.44479712 rn2col(df, \"AptName\")   # pass `name =` #>   AptName a           b #> 1       A 1  0.07003485 #> 2       B 2 -0.63912332 #> 3       C 3 -0.04996490 #> 4       D 4 -0.25148344 #> 5       E 5  0.44479712  # moving columns df$mtcars <- sample(names(mtcars), 5) col2rn(df, \"mtcars\")   # with a warning #> Warning: `df` already has row names. They will be over-written. #>      a           b #> vs   1  0.07003485 #> mpg  2 -0.63912332 #> gear 3 -0.04996490 #> qsec 4 -0.25148344 #> hp   5  0.44479712  # Move back and forth easily # Leaves original object un-modified identical(df, col2rn(rn2col(df))) #> [1] TRUE  # add \"id\" column add_rowid(mtcars) #>                     .rowid  mpg cyl  disp  hp drat    wt  qsec vs am #> Mazda RX4                1 21.0   6 160.0 110 3.90 2.620 16.46  0  1 #> Mazda RX4 Wag            2 21.0   6 160.0 110 3.90 2.875 17.02  0  1 #> Datsun 710               3 22.8   4 108.0  93 3.85 2.320 18.61  1  1 #> Hornet 4 Drive           4 21.4   6 258.0 110 3.08 3.215 19.44  1  0 #> Hornet Sportabout        5 18.7   8 360.0 175 3.15 3.440 17.02  0  0 #> Valiant                  6 18.1   6 225.0 105 2.76 3.460 20.22  1  0 #> Duster 360               7 14.3   8 360.0 245 3.21 3.570 15.84  0  0 #> Merc 240D                8 24.4   4 146.7  62 3.69 3.190 20.00  1  0 #> Merc 230                 9 22.8   4 140.8  95 3.92 3.150 22.90  1  0 #> Merc 280                10 19.2   6 167.6 123 3.92 3.440 18.30  1  0 #> Merc 280C               11 17.8   6 167.6 123 3.92 3.440 18.90  1  0 #> Merc 450SE              12 16.4   8 275.8 180 3.07 4.070 17.40  0  0 #> Merc 450SL              13 17.3   8 275.8 180 3.07 3.730 17.60  0  0 #> Merc 450SLC             14 15.2   8 275.8 180 3.07 3.780 18.00  0  0 #> Cadillac Fleetwood      15 10.4   8 472.0 205 2.93 5.250 17.98  0  0 #> Lincoln Continental     16 10.4   8 460.0 215 3.00 5.424 17.82  0  0 #> Chrysler Imperial       17 14.7   8 440.0 230 3.23 5.345 17.42  0  0 #> Fiat 128                18 32.4   4  78.7  66 4.08 2.200 19.47  1  1 #> Honda Civic             19 30.4   4  75.7  52 4.93 1.615 18.52  1  1 #> Toyota Corolla          20 33.9   4  71.1  65 4.22 1.835 19.90  1  1 #> Toyota Corona           21 21.5   4 120.1  97 3.70 2.465 20.01  1  0 #> Dodge Challenger        22 15.5   8 318.0 150 2.76 3.520 16.87  0  0 #> AMC Javelin             23 15.2   8 304.0 150 3.15 3.435 17.30  0  0 #> Camaro Z28              24 13.3   8 350.0 245 3.73 3.840 15.41  0  0 #> Pontiac Firebird        25 19.2   8 400.0 175 3.08 3.845 17.05  0  0 #> Fiat X1-9               26 27.3   4  79.0  66 4.08 1.935 18.90  1  1 #> Porsche 914-2           27 26.0   4 120.3  91 4.43 2.140 16.70  0  1 #> Lotus Europa            28 30.4   4  95.1 113 3.77 1.513 16.90  1  1 #> Ford Pantera L          29 15.8   8 351.0 264 4.22 3.170 14.50  0  1 #> Ferrari Dino            30 19.7   6 145.0 175 3.62 2.770 15.50  0  1 #> Maserati Bora           31 15.0   8 301.0 335 3.54 3.570 14.60  0  1 #> Volvo 142E              32 21.4   4 121.0 109 4.11 2.780 18.60  1  1 #>                     gear carb #> Mazda RX4              4    4 #> Mazda RX4 Wag          4    4 #> Datsun 710             4    1 #> Hornet 4 Drive         3    1 #> Hornet Sportabout      3    2 #> Valiant                3    1 #> Duster 360             3    4 #> Merc 240D              4    2 #> Merc 230               4    2 #> Merc 280               4    4 #> Merc 280C              4    4 #> Merc 450SE             3    3 #> Merc 450SL             3    3 #> Merc 450SLC            3    3 #> Cadillac Fleetwood     3    4 #> Lincoln Continental    3    4 #> Chrysler Imperial      3    4 #> Fiat 128               4    1 #> Honda Civic            4    2 #> Toyota Corolla         4    1 #> Toyota Corona          3    1 #> Dodge Challenger       3    2 #> AMC Javelin            3    2 #> Camaro Z28             3    4 #> Pontiac Firebird       3    2 #> Fiat X1-9              4    1 #> Porsche 914-2          5    2 #> Lotus Europa           5    2 #> Ford Pantera L         5    4 #> Ferrari Dino           5    6 #> Maserati Bora          5    8 #> Volvo 142E             4    2  # remove row names has_rn(mtcars) #> [1] TRUE mtcars2 <- rm_rn(mtcars) has_rn(mtcars2) #> [1] FALSE"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/soma_adat.html","id":null,"dir":"Reference","previous_headings":"","what":"The soma_adat Class and S3 Methods ‚Äî soma_adat","title":"The soma_adat Class and S3 Methods ‚Äî soma_adat","text":"soma_adat data structure primary internal R representation SomaScan data. soma_adat automatically created via read_adat() loading *.adat text file. consists data.frame-like object leading columns clinical variables SomaScan RFU data remaining variables. Two main attributes corresponding analyte SomaScan run information contained *.adat file added: Header.Meta: information SomaScan run, see parseHeader() attr(x, \"Header.Meta\") Col.Meta: annotations information SomaScan reagents/analytes, see getAnalyteInfo() attr(x, \"Col.Meta\") file_specs: parsing specifications ingested *.adat file row_meta: names non-RFU fields. See getMeta(). See groupGenerics() details Math(), Ops(), Summary() methods dispatch class soma_adat.  See reexports() details re-exported S3 generics packages (mostly dplyr tidyr) enable S3 methods dispatched class soma_adat.  list currently available S3 methods dispatch soma_adat class:   S3 print() method returns summary information parsed object attributes, present, followed dispatch tibble::tibble() print method. Rownames printed first column print method . S3 summary() method returns following column ADAT object containing SOMAmer data (clinical meta data excluded): Target (available) Minimum value 1st Quantile Median Mean 3rd Quantile Maximum value Standard deviation Median absolute deviation (mad()) Interquartile range (IQR()) S3 Extract() method used sub-setting soma_adat object relies heavily [ method maintains soma_adat attributes intact subsets Col.Meta consistent newly created object. S3 extraction via $ fully supported, however, opposed data.frame method, partial matching allowed class soma_adat. S3 extraction via [[ supported, however, restrict usage [[ soma_adat. Use numeric index (e.g. 1L) character identifying column (e.g. \"SampleID\"). use [[,j]] syntax [[, use [ instead. $, partial matching allowed. S3 assignment via [ supported class soma_adat. S3 assignment via $ fully supported class soma_adat. S3 assignment via [[ supported class soma_adat. S3 median() currently supported soma_adat class, however dispatch place direct users alternatives.","code":"#>  [1] [              [[             [[<-           [<- #>  [5] ==             $              $<-            anti_join #>  [9] arrange        count          filter         full_join #> [13] getAdatVersion getAnalytes    getMeta        group_by #> [17] inner_join     is_seqFormat   left_join      Math #> [21] median         merge          mutate         Ops #> [25] print          rename         right_join     row.names<- #> [29] sample_frac    sample_n       select         semi_join #> [33] separate       slice_sample   slice          summary #> [37] Summary        transform      ungroup        unite #> see '?methods' for accessing help and source code"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/soma_adat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The soma_adat Class and S3 Methods ‚Äî soma_adat","text":"","code":"# S3 method for class 'soma_adat' print(x, show_header = FALSE, ...)  # S3 method for class 'soma_adat' summary(object, tbl = NULL, digits = max(3L, getOption(\"digits\") - 3L), ...)  # S3 method for class 'soma_adat' x[i, j, drop = TRUE, ...]  # S3 method for class 'soma_adat' x$name  # S3 method for class 'soma_adat' x[[i, j, ..., exact = TRUE]]  # S3 method for class 'soma_adat' x[i, j, ...] <- value  # S3 method for class 'soma_adat' `$`(x, i, j, ...) <- value  # S3 method for class 'soma_adat' x[[i, j, ...]] <- value  # S3 method for class 'soma_adat' median(x, na.rm = FALSE, ...)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/soma_adat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The soma_adat Class and S3 Methods ‚Äî soma_adat","text":"x, object soma_adat class object. show_header Logical. Header Data information displayed instead data frame (tibble) object? ... Ignored. tbl annotations table. NULL (default), annotation information extracted object (possible). Alternatively, result call getAnalyteInfo(), Target names can extracted. digits Integer. Used number formatting signif(). , j Row column indices respectively. j omitted, used column index. drop Coerce vector fetching one column via tbl[, j]. Default FALSE, ignored accessing column via tbl[j]. name name string. exact Ignored warning(). value value store row, column, range cell. na.rm logical value indicating whether NA     values stripped computation proceeds.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/soma_adat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The soma_adat Class and S3 Methods ‚Äî soma_adat","text":"set S3 methods return soma_adat object corresponding S3 method applied.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/soma_adat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The soma_adat Class and S3 Methods ‚Äî soma_adat","text":"","code":"# S3 print method example_data #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 192 #>      Columns              5318 #>      Clinical Data        34 #>      Features             5284 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Tibble ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 192 √ó 5,319 #>    row_names      PlateId  PlateRunDate ScannerID PlatePosition SlideId #>    <chr>          <chr>    <chr>        <chr>     <chr>           <dbl> #>  1 258495800012_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H9            2.58e11 #>  2 258495800004_7 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H8            2.58e11 #>  3 258495800010_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H7            2.58e11 #>  4 258495800003_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H6            2.58e11 #>  5 258495800009_4 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H5            2.58e11 #>  6 258495800012_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H4            2.58e11 #>  7 258495800001_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H3            2.58e11 #>  8 258495800004_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H2            2.58e11 #>  9 258495800001_8 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H12           2.58e11 #> 10 258495800004_3 Example‚Ä¶ 2020-06-18   SG152144‚Ä¶ H11           2.58e11 #> # ‚Ñπ 182 more rows #> # ‚Ñπ 5,313 more variables: Subarray <dbl>, SampleId <chr>, #> #   SampleType <chr>, PercentDilution <int>, SampleMatrix <chr>, #> #   Barcode <lgl>, Barcode2d <chr>, SampleName <lgl>, #> #   SampleNotes <lgl>, AliquotingNotes <lgl>, ‚Ä¶ #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # show the header info (no RFU data) print(example_data, show_header = TRUE) #> ‚ïê‚ïê SomaScan Data ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>      SomaScan version     V4 (5k) #>      Signal Space         5k #>      Attributes intact    ‚úì #>      Rows                 192 #>      Columns              5318 #>      Clinical Data        34 #>      Features             5284 #> ‚îÄ‚îÄ Column Meta ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚Ñπ SeqId, SeqIdVersion, SomaId, TargetFullName, Target, #> ‚Ñπ UniProt, EntrezGeneID, EntrezGeneSymbol, Organism, Units, #> ‚Ñπ Type, Dilution, PlateScale_Reference, CalReference, #> ‚Ñπ Cal_Example_Adat_Set001, ColCheck, #> ‚Ñπ CalQcRatio_Example_Adat_Set001_170255, QcReference_170255, #> ‚Ñπ Cal_Example_Adat_Set002, #> ‚Ñπ CalQcRatio_Example_Adat_Set002_170255, Dilution2 #> ‚îÄ‚îÄ Header Data ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> # A tibble: 35 √ó 2 #>    Key                  Value                                           #>    <chr>                <chr>                                           #>  1 AdatId               GID-1234-56-789-abcdef                          #>  2 Version              1.2                                             #>  3 AssayType            PharmaServices                                  #>  4 AssayVersion         V4                                              #>  5 AssayRobot           Fluent 1 L-307                                  #>  6 Legal                Experiment details and data have been processe‚Ä¶ #>  7 CreatedBy            PharmaServices                                  #>  8 CreatedDate          2020-07-24                                      #>  9 EnteredBy            Technician1                                     #> 10 ExpDate              2020-06-18, 2020-07-20                          #> 11 GeneratedBy          Px (Build:  : ), Canopy_0.1.1                   #> 12 RunNotes             2 columns ('Age' and 'Sex') have been added to‚Ä¶ #> 13 ProcessSteps         Raw RFU, Hyb Normalization, medNormInt (Sample‚Ä¶ #> 14 ProteinEffectiveDate 2019-08-06                                      #> 15 StudyMatrix          EDTA Plasma                                     #> # ‚Ñπ 20 more rows #> ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  # S3 summary method # MMP analytes (4) mmps <- c(\"seq.2579.17\", \"seq.2788.55\", \"seq.2789.26\", \"seq.4925.54\") mmp_adat <- example_data[, c(\"Sex\", mmps)] summary(mmp_adat) #>  seq.2579.17         seq.2788.55         seq.2789.26          #>  Target : MMP-9      Target : MMP-3      Target : MMP-7       #>  Min    :    59.3    Min    :  29.30     Min    :    24.1     #>  1Q     :  9360.5    1Q     : 126.67     1Q     :  8182.0     #>  Median : 13191.2    Median : 149.75     Median : 10947.8     #>  Mean   : 14372.5    Mean   : 157.78     Mean   : 11277.6     #>  3Q     : 19387.3    3Q     : 179.08     3Q     : 13577.0     #>  Max    : 51263.0    Max    : 423.20     Max    : 33496.9     #>  sd     :  7449.9    sd     :  53.57     sd     :  5802.6     #>  MAD    :  6877.9    MAD    :  38.62     MAD    :  4001.2     #>  IQR    : 10026.8    IQR    :  52.40     IQR    :  5395.0     #>  seq.4925.54          #>  Target : MMP-13      #>  Min    :   25.20     #>  1Q     :  328.30     #>  Median :  389.70     #>  Mean   :  424.48     #>  3Q     :  452.85     #>  Max    : 2883.20     #>  sd     :  259.01     #>  MAD    :   93.85     #>  IQR    :  124.55      # Summarize by group mmp_adat |>   split(mmp_adat$Sex) |>   lapply(summary) #> $F #>  seq.2579.17         seq.2788.55         seq.2789.26          #>  Target : MMP-9      Target : MMP-3      Target : MMP-7       #>  Min    :  4484      Min    :  97.10     Min    :   289.7     #>  1Q     :  8336      1Q     : 127.70     1Q     :  9410.0     #>  Median : 12859      Median : 150.60     Median : 12157.2     #>  Mean   : 13674      Mean   : 156.02     Mean   : 12877.3     #>  3Q     : 16148      3Q     : 181.10     3Q     : 15151.9     #>  Max    : 31879      Max    : 235.40     Max    : 32221.3     #>  sd     :  6389      sd     :  34.66     sd     :  5214.4     #>  MAD    :  6488      MAD    :  38.10     MAD    :  4342.7     #>  IQR    :  7811      IQR    :  53.40     IQR    :  5741.9     #>  seq.4925.54          #>  Target : MMP-13      #>  Min    :  241.80     #>  1Q     :  333.80     #>  Median :  388.10     #>  Mean   :  422.14     #>  3Q     :  460.70     #>  Max    : 1353.80     #>  sd     :  171.89     #>  MAD    :   95.78     #>  IQR    :  126.90     #>  #> $M #>  seq.2579.17         seq.2788.55         seq.2789.26          #>  Target : MMP-9      Target : MMP-3      Target : MMP-7       #>  Min    :  5894      Min    :  99.90     Min    :  2850       #>  1Q     :  9973      1Q     : 132.40     1Q     :  8640       #>  Median : 13645      Median : 157.40     Median : 11230       #>  Mean   : 15715      Mean   : 173.63     Mean   : 11699       #>  3Q     : 20595      3Q     : 196.20     3Q     : 13061       #>  Max    : 51263      Max    : 423.20     Max    : 33497       #>  sd     :  7979      sd     :  61.17     sd     :  5243       #>  MAD    :  6344      MAD    :  40.18     MAD    :  3477       #>  IQR    : 10622      IQR    :  63.80     IQR    :  4421       #>  seq.4925.54          #>  Target : MMP-13      #>  Min    :  205.7      #>  1Q     :  329.3      #>  Median :  401.6      #>  Mean   :  462.7      #>  3Q     :  468.9      #>  Max    : 2883.2      #>  sd     :  331.3      #>  MAD    :  103.8      #>  IQR    :  139.6      #>   # Alternatively pass annotations with Target info anno <- getAnalyteInfo(mmp_adat) summary(mmp_adat, tbl = anno) #>  seq.2579.17         seq.2788.55         seq.2789.26          #>  Target : MMP-9      Target : MMP-3      Target : MMP-7       #>  Min    :    59.3    Min    :  29.30     Min    :    24.1     #>  1Q     :  9360.5    1Q     : 126.67     1Q     :  8182.0     #>  Median : 13191.2    Median : 149.75     Median : 10947.8     #>  Mean   : 14372.5    Mean   : 157.78     Mean   : 11277.6     #>  3Q     : 19387.3    3Q     : 179.08     3Q     : 13577.0     #>  Max    : 51263.0    Max    : 423.20     Max    : 33496.9     #>  sd     :  7449.9    sd     :  53.57     sd     :  5802.6     #>  MAD    :  6877.9    MAD    :  38.62     MAD    :  4001.2     #>  IQR    : 10026.8    IQR    :  52.40     IQR    :  5395.0     #>  seq.4925.54          #>  Target : MMP-13      #>  Min    :   25.20     #>  1Q     :  328.30     #>  Median :  389.70     #>  Mean   :  424.48     #>  3Q     :  452.85     #>  Max    : 2883.20     #>  sd     :  259.01     #>  MAD    :   93.85     #>  IQR    :  124.55"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale Transform soma_adat Columns/Rows ‚Äî transform","title":"Scale Transform soma_adat Columns/Rows ‚Äî transform","text":"Scale -th row column soma_adat object -th element vector. Designed facilitate linear transformations analyte/RFU entries scaling data matrix. scaling analytes/RFU (columns), v must getAnalytes(adat, n = TRUE) elements. scaling samples (rows), v must nrow(_data) elements.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale Transform soma_adat Columns/Rows ‚Äî transform","text":"","code":"# S3 method for class 'soma_adat' transform(`_data`, v, dim = 2L, ...)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale Transform soma_adat Columns/Rows ‚Äî transform","text":"_data soma_adat object. v numeric vector appropriate length corresponding dim. dim Integer. dimension apply elements v . 1 = rows; 2 = columns (default). ... Currently used required S3 generic.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale Transform soma_adat Columns/Rows ‚Äî transform","text":"modified value _data either rows columns linearly transformed v.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale Transform soma_adat Columns/Rows ‚Äî transform","text":"Performs following operations (quickly): Columns: $$   M_{nxp} = A_{nxp} * diag(v)_{pxp} $$ Rows: $$   M_{nxp} = diag(v)_{nxn} * A_{nxp} $$","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/transform.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Scale Transform soma_adat Columns/Rows ‚Äî transform","text":"method intentionally naive, assumes user ordered v match columns/rows _data appropriately. must done upstream.","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale Transform soma_adat Columns/Rows ‚Äî transform","text":"","code":"# simplified example of underlying operations M <- matrix(1:12, ncol = 4) M #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    2    5    8   11 #> [3,]    3    6    9   12  v <- 1:4 M %*% diag(v)    # transform columns #>      [,1] [,2] [,3] [,4] #> [1,]    1    8   21   40 #> [2,]    2   10   24   44 #> [3,]    3   12   27   48  v <- 1:3 diag(v) %*% M    # transform rows #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    4   10   16   22 #> [3,]    9   18   27   36  # dummy ADAT example: v    <- c(2, 0.5)     # double seq1; half seq2 adat <- data.frame(sample      = paste0(\"sample_\", 1:3),                    seq.1234.56 = c(1, 2, 3),                    seq.9999.88 = c(4, 5, 6) * 10) adat #>     sample seq.1234.56 seq.9999.88 #> 1 sample_1           1          40 #> 2 sample_2           2          50 #> 3 sample_3           3          60  # `soma_adat` to invoke S3 method dispatch class(adat) <- c(\"soma_adat\", \"data.frame\") trans <- transform(adat, v) data.frame(trans) #>     sample seq.1234.56 seq.9999.88 #> 1 sample_1           2          20 #> 2 sample_2           4          25 #> 3 sample_3           6          30"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/updateColMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Col.Meta Attribute to Match Annotations Object ‚Äî updateColMeta","title":"Update Col.Meta Attribute to Match Annotations Object ‚Äî updateColMeta","text":"Utility update provided soma_adat object's column metadata match annotations object.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/updateColMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Col.Meta Attribute to Match Annotations Object ‚Äî updateColMeta","text":"","code":"updateColMeta(adat, anno)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/updateColMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Col.Meta Attribute to Match Annotations Object ‚Äî updateColMeta","text":"adat soma_adat data object update attributes. anno tibble containing analyte-specific annotations read_annotations()","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/updateColMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Col.Meta Attribute to Match Annotations Object ‚Äî updateColMeta","text":"identical object adat Col.Meta updated match anno.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/updateColMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Col.Meta Attribute to Match Annotations Object ‚Äî updateColMeta","text":"Attempts update following column metadata adat: SomaId Target TargetFullName UniProt Type Organism EntrezGeneSymbol EntrezGeneID","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/updateColMeta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update Col.Meta Attribute to Match Annotations Object ‚Äî updateColMeta","text":"Caleb Scheidel","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/updateColMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Col.Meta Attribute to Match Annotations Object ‚Äî updateColMeta","text":"","code":"if (FALSE) { # \\dontrun{  anno_tbl     <- read_annotations(\"path/to/annotations.xlsx\")  adat         <- read_adat(\"path/to/adat_file.adat\")  updated_adat <- updateColMeta(adat, anno_tbl) } # }"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/write_adat.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an ADAT to File ‚Äî write_adat","title":"Write an ADAT to File ‚Äî write_adat","text":"One can write existing modified internal ADAT (soma_adat R object) external file. However ADAT object must intact attributes, see is_intact_attr().","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/write_adat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an ADAT to File ‚Äî write_adat","text":"","code":"write_adat(x, file)"},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/write_adat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an ADAT to File ‚Äî write_adat","text":"x soma_adat object (intact attributes), typically created using read_adat(). file Character. File path object written. example, extensions *.adat.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/write_adat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an ADAT to File ‚Äî write_adat","text":"Invisibly returns input x.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/write_adat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write an ADAT to File ‚Äî write_adat","text":"ADAT specification longer requires Windows end line (EOL) characters (\"\\r\\n\"). current EOL spec \"\\n\" commonly used POSIX systems, like MacOS Linux. Since EOL affects resulting checksum, ADATs written systems generate slightly differing files. Standardizing \"\\n\" attempts solve issue. reference, see EOL encoding operating systems :","code":""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/write_adat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write an ADAT to File ‚Äî write_adat","text":"Stu Field","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/reference/write_adat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an ADAT to File ‚Äî write_adat","text":"","code":"# trim to 1 sample for speed adat_out <- head(example_data, 1L)  # attributes must(!) be intact to write is_intact_attr(adat_out) #> [1] TRUE  write_adat(adat_out, file = tempfile(fileext = \".adat\")) #> ‚úî ADAT passed all checks and traps. #> ‚úî ADAT written to: \"/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T//Rtmpf7JTMb/file14995319beef.adat\""},{"path":[]},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-630","dir":"Changelog","previous_headings":"","what":"SomaDataIO 6.3.0","title":"SomaDataIO 6.3.0","text":"CRAN release: 2025-05-06","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"new-functions-6-3-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"SomaDataIO 6.3.0","text":"added new function preProcessAdat() filter features, filter samples, generate data QC plots normalization scale factors covariates, perform standard analyte RFU transformations including log10, centering, scaling added calcOutlierMap() print plot S3 methods, along getOutlierIds() identifying sample level outliers outlier map object added ggplot2 package dependency","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"function-and-object-improvements-6-3-0","dir":"Changelog","previous_headings":"","what":"Function and Object Improvements","title":"SomaDataIO 6.3.0","text":"tibble object additional sample annotation fields smoking_status alcohol_use demonstrate merging soma_adat object","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"documentation-updates-6-3-0","dir":"Changelog","previous_headings":"","what":"Documentation Updates","title":"SomaDataIO 6.3.0","text":"includes guidance pre-processing SomaScan data typical analysis provides example recommended workflow filtering features, filtering samples, performing data QC checks, transformations RFU features introduces usage preProcessAdat() function added comments clarify file path input read_adat() example README updated data preparation chunks comments download read example_data.adat object data preparation chunks now use preProcessAdat() function pre-processing updated README loading wrangling vignette article section including code join ex_clin_data object example_data adat","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"internal-construction-6-3-0","dir":"Changelog","previous_headings":"","what":"Internal üöß","title":"SomaDataIO 6.3.0","text":"added helper utility functions figure(), close_figure(), save_png(), expect_snapshot_plot() saving plot snapshot output testthat/helper.R added snapshot unit tests preProcessAdat() messaging, print QC plot output","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-620","dir":"Changelog","previous_headings":"","what":"SomaDataIO 6.2.0","title":"SomaDataIO 6.2.0","text":"CRAN release: 2025-02-06","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"new-functions-6-2-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"SomaDataIO 6.2.0","text":"calculates estimated limit detection (eLOD) SeqId columns input soma_adat data.frame","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"bug-fixes-6-2-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"SomaDataIO 6.2.0","text":"removed crayon usethis dependencies favor cli fixed bug R version 4.4.1 ui_bullet() internal calls within loadAdatsAsList() write_adat() operations: min(), max(), (), range(), etc. return incorrect value due .matrix() conversion hood now skips conversion, trips warning, carries triggers error non-numerics passed part ‚Äò‚Ä¶‚Äô outside soma_adat, just like Summary.data.frame()","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"function-and-object-improvements-6-2-0","dir":"Changelog","previous_headings":"","what":"Function and Object Improvements","title":"SomaDataIO 6.2.0","text":"collapsing ADATs can problematic attributes, especially large numbers ADATs collapseAdats() now attempts smartly merge (potentially numerous elements) Col.Meta attribute final object, preserving ‚ÄúCal.Set‚Äù ‚ÄúColCheck‚Äù columns particular resulting Col.Meta attribute combined product individual ADAT elements, intersect analyte features (case rbind() called) updated 7k 11k file versions md5sum checksums now allows read_annotations() load individual Excel files Updated lift_master object alpha sort columns","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"documentation-updates-6-2-0","dir":"Changelog","previous_headings":"","what":"Documentation Updates","title":"SomaDataIO 6.2.0","text":"SomaLogic Operating Co., Inc now Standard BioTools, Inc. updated license copyright year 2025 updated package maintainer Caleb Scheidel updated links articles README introduction vignette URLs pkgdown website rather vignette() code references added clarification documents articles available website rather traditional vignettes included package read_annotations() example documentation now points recent 11k Excel annotations file parseHeader() example now prints list elements separately, rather full object, slowed website rendering","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"internal-construction-6-2-0","dir":"Changelog","previous_headings":"","what":"Internal üöß","title":"SomaDataIO 6.2.0","text":"added rhub.yaml configuration file comply rhub v2 updated macOS version pkgdown.yaml macOS-14 added write permission pkgdown.yaml file enable deployment ubuntu machine taking long build added unit tests getSomaScanLiftCCC(), parseCheck() release utilities previously untested increased test coverage pivotExpressionSet() fixed note remote windows check related Rd  targets missing package anchors now shows ‚Äòdownloads‚Äô per month total downloads Fixed link DESCRIPTION; master -> main (#107)","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-610-partying_face-champagne","dir":"Changelog","previous_headings":"","what":"SomaDataIO 6.1.0 ü•≥ üçæ","title":"SomaDataIO 6.1.0 ü•≥ üçæ","text":"CRAN release: 2024-03-26","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"lifting-code-rocket-6-1-0","dir":"Changelog","previous_headings":"","what":"Lifting Code üöÄ","title":"SomaDataIO 6.1.0 ü•≥ üçæ","text":"lift_adat() now takes bridge = argument, replacing anno.tbl = argument. Lifting now performed internally better (safer) user experience, without necessity external annotations (Excel) file. majority refactoring internal user experience major disruption API. much improved lifting/bridging documentation (#82) addition improved lifting documentation new vignette provides additional context, explanation, clear examples, lifting guidance.","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"new-functions-sparkles-6-1-0","dir":"Changelog","previous_headings":"","what":"New Functions ‚ú®","title":"SomaDataIO 6.1.0 ü•≥ üçæ","text":"is_lifted() new returns boolean according whether signal space (RFU) previously lifted Lifting accessor function Lin‚Äôs CCC values (#88) getSomaScanLiftCCC() accesses lifting correlations SomaScan versions analyte returns tibble split sample matrix (serum plasma) merge_clin() newly exported (#80) thin wrapper allows users merge clinical variables soma_adat objects easily previously users either use CLI merge tool merge clinical variables dplyr Newly exported ADAT ‚Äúget**‚Äù helpers (#83) getAdatVersion() getSomaScanVersion() getSignalSpace() checkSomaScanVersion() enables passing different objects namely soma_adat list depending situation Newly exported functions previously internal : addAttributes() addClass() cleanNames()","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"new-vignettes-nerd_face-6-1-0","dir":"Changelog","previous_headings":"","what":"New Vignettes ü§ì","title":"SomaDataIO 6.1.0 ü•≥ üçæ","text":"example analysis workflows now split vignettes/articles cross-linked README moved 3 existing statistical examples README vignettes Binary classification via logistic regression Linear regression continuous variables Two-group comparison via t-test Three-group analysis ANOVA articles pkgdown website built safely mapping values among variables safely renaming data frame loading--wrangling typical train test data splits beginning FAQs /Coming Soon pages new CLI merge tool used add new clinical data existing ADAT file","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"updates-and-improvements-hammer-6-1-0","dir":"Changelog","previous_headings":"","what":"Updates and Improvements üî®","title":"SomaDataIO 6.1.0 ü•≥ üçæ","text":"collapseAdats() better combines HEADER information (#86) certain information, e.g.¬†PlateScale Cal*, better maintained final collapsed ADAT entries combined pasting single string result less duplication superfluous entries retention ‚Äúuseful‚Äù HEADER information resulting (collapsed) soma_adat Update read_annotations() 11k content (#85) Update transform() scaleAnalytes() scaleAnalytes() (internal) now skips missing references much like ‚Äústep‚Äù recipes package transform() gets edge case protection drop = FALSE case single-analyte soma_adat scaled. New row.names() S3 method support soma_adat class dispatched calls rownmaes() rather calling NextMethod() normally invoke data.frame, now force data.frame method case tbl_df grouped_df classes present dispatched. bypassed favor data.frame tbl_df 1) can nuke attributes, 2) triggers warning adding rownames tibble. New grouped_df S3 print support grouped soma_adat now displays Grouping information call S3 print method soma_adat class New grouped_df S3 method support soma_adat class (#66) grouped_df data objects previously unsupported interfering downstream S3 methods dplyr verbs NextMethod() called support now ensures group methods maintained, well soma_adat class (importantly, attributes intact) tidyr::separate.soma_adat() S3 method simplified (#72) now uses %||% helper internally expanded error messages inside stopifnot() informative is_intact_attr() now much quieter, signaling called indirectly (#71) new conditional logic silences signaling messages called within another function (indirectly) previously lead confusing messages appear wrappers, is_intact_attr() can , sometimes deeply, nested call stack Development improvements pkgdown website added new links improved clarity YAML added new logo footer restyled side bar easier hyperlinking getting help clicking SomaLogic logo GitHub README now links pkgdown website new ‚ÄúComing Soon‚Äù drop-section website header let users know active progress (yet ready external publication) SomaDataIO longer depends desc package generate README.md","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"internal-construction-6-1-0","dir":"Changelog","previous_headings":"","what":"Internal üöß","title":"SomaDataIO 6.1.0 ü•≥ üçæ","text":"now use internal cross-functions originally intended avoid redundancy, efficiency, improved debugging convertColMeta() genRowNames() parseCheck() syncColMeta() scaleAnalytes() RFU values rounded 1 decimal place written write_adat(), via call apply(), expects 2-dim object replacing values. write_adat() longer uses apply() instead converts entire RFU data frame matrix (maintains original dimensions), use vectorized format conversion via sprintf() theory faster sprintf() called long vector, rather 1000s times shorter vectors (inside apply()). Fixed missing closing parenthesis SomaScanObjects.R (thanks @Hijinx725!, #40)","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-600-tada","dir":"Changelog","previous_headings":"","what":"SomaDataIO 6.0.0 üéâ","title":"SomaDataIO 6.0.0 üéâ","text":"CRAN release: 2023-03-15 now CRAN! ü•≥","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"new-changes-6-0-0","dir":"Changelog","previous_headings":"","what":"New changes","title":"SomaDataIO 6.0.0 üéâ","text":"Rscript --vanilla merge_clin.R merging clinical variables existing *.adat SomaScan data files added 2 new example meta.csv meta2.csv files run examples random data valid index keys see dir(system.file(\"cli\", \"merge\", package = \"SomaDataIO\")) example_data.adat reduced size n = 10 samples (192) conform CRAN size requirements (< 5MB) current file renamed example_data10.adat reflect change likely far-reaching consequences users access flat file via system.file() example_data object however remains true original file (https://github.com/SomaLogic/SomaLogic-Data/blob/master/example_data.adat) directory location inst/example/ renamed inst/extdata/ conform CRAN package standard naming conventions file single_sample.adat removed package data now redundant (however still used unit testing) SomaDataObjects renamed now SomaScanObjects read.adat() now soft-deprecated; please use read_adat() instead getSomamers() getSomamerData() meltExpressionSet() tibble new max_extra_cols = argument, set 6 print.soma_adat method calling base::merge() soma_adat strongly discouraged now redirect users use dplyr::*_join() alternatives designed preserve soma_adat attributes ADATs CreatedDate CreatedBy HEADER entry. currently breaks writer simplified make robust also refactor convenient (abnormal ADATs generated standard SomaScan processing) CreatedDateHistory removed entry written ADATs CreatedByHistory combined dated written ADATs NULL behavior remains keys missing CreatedBy CreatedDate generated either new entries -written appropriate Numerous non-user-facing (API) changes internal package maintenance, efficiency, structural upgrades included","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-531","dir":"Changelog","previous_headings":"","what":"SomaDataIO 5.3.1","title":"SomaDataIO 5.3.1","text":"Bug-fix release related write_adat(): fixed bug write_adat() resulted adding/removing clinical (non-SomaScan) variables ADAT. Export via write_adat() resulted broken ADAT file (@stufield, #18) write_adat() now much higher fidelity original text file (*.adat) full-cycle read-write-read operations; particularly presence bangs (!) Header section floating point decimals ?Col.Meta section write_adat() longer converts commas (,) semi-colons (;) ?Col.Meta block (originally introduced avoid cell alignment issues *.csv formats) write_adat() longer concatenates written ADATs, writing file. Data -written file avoid mangled ADATs resulting re-writing connection match default behavior write.table(), write.csv(), etc. read_adat() now consistent character type Barcode2 variable standard ADATs, now forces character class, allow R‚Äôs read.delim() ‚Äúguess‚Äù type Decreased dependency magrittr pipes (%>%) favor native R pipe (|>). result package now depends R >= 4.1.0 SomaDataIO continue re-export magrittr pipes backward compatibility, considered permanent. Please code accordingly Migration default branch GitHub master -> main (@stufield, #19) Numerous non-user-facing (API) changes internal package maintenance, efficiency, structural upgrades included","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-530","dir":"Changelog","previous_headings":"","what":"SomaDataIO 5.3.0","title":"SomaDataIO 5.3.0","text":"Upgrades primarily improvements SomaLogic internal code base, including: (@stufield) general reduction external package dependency improve code stability internal usage base R alternatives readr package parsing importing ADATs (e.g.¬†read.delim() readr::read_delim()). mostly code simplification, can often result marked speed improvements. SomaScan plex size increases, speed improvement become important. parseHeader() dramatically simplified, now reading lines 20L time RFU block reached. addition, block reached, header lines read-indexed (opposed line--line). read_adat() now specifies column types via colClasses = majority ADAT type double RFU columns. dramatically improve speed ingest. write_adat() simplified internally, fewer nested apply -loops. encoding input/output (/O) assumed UTF-8. New getAnalytes() S3 method class recipe recipes package. New loadAdatsAsList() load multiple ADAT files single call optionally collapse single data frame (@stufield, #8). New getTargetNames() function map ADAT seq.XXXX.XX names corresponding protein targets annotations table","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-520","dir":"Changelog","previous_headings":"","what":"SomaDataIO 5.2.0","title":"SomaDataIO 5.2.0","text":"SomaLogic Inc.¬†now SomaLogic Operating Co.¬†Inc. Added new documentation regarding Col.Meta (@stufield, #12). documentation around column meta data, row meta data, found ADAT, access . Research Use (‚ÄúRUO‚Äù) language added README (@stufield, #10). Numerous internal code improvements SomaLogic code-base (@stufield) consisted reducing usage external dependencies, e.g.¬†using stop() ui_stop() warning() ui_warn(), using usethis, cli, crayon shims aliases. package uses purrr selectively longer uses stringr. using base R alternatives favor increased stability underlying, non-user-facing code. New lift_adat() added provided ‚Äòlifting‚Äô functionality (@stufield, #11) provides mechanism convert RFU space SomaScan versions (e.g.¬†v4.1 -> v4.0). added new S3 transform.soma_adat() method simplifies linear scaling soma_adat columns (analytes). uses ‚ÄúAnnotations file‚Äù (Excel) source scalars transformation. Minor improvements updates README.Rmd (@stufield, #7) fixed broken adat2eSet() link README (#5). clearer text README regarding Biobase installation. added new links external Bioconductor website installation section README. new pkgdown links Issues (#4). SomaLogic logo added README. lifecycle (‚Äúmaturing‚Äù) badge added. Startup message improved dynamic width (@stufield). New locateSeqId() function pull SeqId regex. (@stufield). New read_annotations() function (@stufield, #2) new function parse/import SomaLogic annotations files (*.xlsx).","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-510","dir":"Changelog","previous_headings":"","what":"SomaDataIO 5.1.0","title":"SomaDataIO 5.1.0","text":"New set_rn() drop-replacement magrittr::set_rownames() getFeatures() renamed less ambiguous better align internal SomaLogic code usage. Now use getAnalytes() (@stufield) getFeatureData() also renamed getAnalyteInfo() (@stufield) various upgrades required code changes external package dependencies, e.g.¬†tidyverse. new alias read_adat(), read.adat(), backward compatibility previous versions SomaDataIO (@stufield)","code":""},{"path":"https://somalogic.github.io/SomaDataIO/dev/news/index.html","id":"somadataio-500","dir":"Changelog","previous_headings":"","what":"SomaDataIO 5.0.0","title":"SomaDataIO 5.0.0","text":"Initial public release GitHub!","code":""}]
